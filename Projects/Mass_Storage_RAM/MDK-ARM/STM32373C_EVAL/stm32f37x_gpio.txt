; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32f37x_gpio.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32f37x_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32f37x_gpio.crf ..\..\..\Libraries\STM32F37x_StdPeriph_Driver\src\stm32f37x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;116      */
;;;117    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119      /* Check the parameters */
;;;120      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;121    
;;;122      if(GPIOx == GPIOA)
000002  f1b04f90          CMP      r0,#0x48000000
000006  d005              BEQ      |L1.20|
;;;123      {
;;;124        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
;;;125        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
;;;126      }
;;;127      else if(GPIOx == GPIOB)
000008  4914              LDR      r1,|L1.92|
00000a  4288              CMP      r0,r1
00000c  d105              BNE      |L1.26|
;;;128      {
;;;129        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
00000e  2101              MOVS     r1,#1
000010  0204              LSLS     r4,r0,#8
;;;130        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
000012  e019              B        |L1.72|
                  |L1.20|
000014  2101              MOVS     r1,#1                 ;124
000016  044c              LSLS     r4,r1,#17             ;124
000018  e016              B        |L1.72|
                  |L1.26|
;;;131      }
;;;132      else if(GPIOx == GPIOC)
00001a  4911              LDR      r1,|L1.96|
00001c  4288              CMP      r0,r1
00001e  d102              BNE      |L1.38|
;;;133      {
;;;134        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
000020  2101              MOVS     r1,#1
000022  0204              LSLS     r4,r0,#8
;;;135        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
000024  e010              B        |L1.72|
                  |L1.38|
;;;136      }
;;;137      else if(GPIOx == GPIOD)
000026  490f              LDR      r1,|L1.100|
000028  4288              CMP      r0,r1
00002a  d102              BNE      |L1.50|
;;;138      {
;;;139        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
00002c  2101              MOVS     r1,#1
00002e  050c              LSLS     r4,r1,#20
;;;140        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
000030  e00a              B        |L1.72|
                  |L1.50|
;;;141      }
;;;142      else if(GPIOx == GPIOE)
000032  490d              LDR      r1,|L1.104|
000034  4288              CMP      r0,r1
000036  d102              BNE      |L1.62|
;;;143      {
;;;144        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
000038  2101              MOVS     r1,#1
00003a  0244              LSLS     r4,r0,#9
;;;145        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
00003c  e004              B        |L1.72|
                  |L1.62|
;;;146      }
;;;147      else
;;;148      {
;;;149        if(GPIOx == GPIOF)
00003e  490b              LDR      r1,|L1.108|
000040  4288              CMP      r0,r1
000042  d10a              BNE      |L1.90|
;;;150        {
;;;151          RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
000044  2101              MOVS     r1,#1
000046  058c              LSLS     r4,r1,#22
                  |L1.72|
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;152          RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
00004e  4620              MOV      r0,r4
000050  e8bd4010          POP      {r4,lr}
000054  2100              MOVS     r1,#0
000056  f7ffbffe          B.W      RCC_AHBPeriphResetCmd
                  |L1.90|
;;;153        }
;;;154      }
;;;155    }
00005a  bd10              POP      {r4,pc}
;;;156    
                          ENDP

                  |L1.92|
                          DCD      0x48000400
                  |L1.96|
                          DCD      0x48000800
                  |L1.100|
                          DCD      0x48000c00
                  |L1.104|
                          DCD      0x48001000
                  |L1.108|
                          DCD      0x48001400

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;170      */
;;;171    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;172    {
;;;173      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000002  2200              MOVS     r2,#0
;;;174    
;;;175      /* Check the parameters */
;;;176      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;177      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;178      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;179      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;180    
;;;181      /*-------------------------- Configure the port pins -----------------------*/
;;;182      /*-- GPIO Mode Configuration --*/
;;;183      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;184      {
;;;185        pos = ((uint32_t)0x01) << pinpos;
000004  2501              MOVS     r5,#1
;;;186    
;;;187        /* Get the port pins position */
;;;188        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;189    
;;;190        if (currentpin == pos)
;;;191        {
;;;192          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
;;;193          {
;;;194            /* Check Speed mode parameters */
;;;195            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;196    
;;;197            /* Speed mode configuration */
;;;198            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000006  2403              MOVS     r4,#3
                  |L2.8|
000008  680e              LDR      r6,[r1,#0]            ;188
00000a  fa05f302          LSL      r3,r5,r2              ;185
00000e  401e              ANDS     r6,r6,r3              ;188
000010  429e              CMP      r6,r3                 ;190
000012  d12d              BNE      |L2.112|
000014  790e              LDRB     r6,[r1,#4]            ;192
000016  2e01              CMP      r6,#1                 ;192
000018  d001              BEQ      |L2.30|
00001a  2e02              CMP      r6,#2                 ;192
00001c  d113              BNE      |L2.70|
                  |L2.30|
00001e  6887              LDR      r7,[r0,#8]
000020  0056              LSLS     r6,r2,#1
000022  fa04fc06          LSL      r12,r4,r6
000026  ea27070c          BIC      r7,r7,r12
00002a  6087              STR      r7,[r0,#8]
;;;199            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
00002c  794f              LDRB     r7,[r1,#5]
00002e  40b7              LSLS     r7,r7,r6
000030  6886              LDR      r6,[r0,#8]
000032  4337              ORRS     r7,r7,r6
000034  6087              STR      r7,[r0,#8]
;;;200    
;;;201            /* Check Output mode parameters */
;;;202            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;203    
;;;204            /* Output mode configuration */
;;;205            GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
000036  8886              LDRH     r6,[r0,#4]
000038  439e              BICS     r6,r6,r3
00003a  8086              STRH     r6,[r0,#4]
;;;206            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
00003c  8886              LDRH     r6,[r0,#4]
00003e  798b              LDRB     r3,[r1,#6]
000040  4093              LSLS     r3,r3,r2
000042  431e              ORRS     r6,r6,r3
000044  8086              STRH     r6,[r0,#4]
                  |L2.70|
;;;207          }
;;;208    
;;;209          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000046  6807              LDR      r7,[r0,#0]
000048  0056              LSLS     r6,r2,#1
00004a  fa04f306          LSL      r3,r4,r6
00004e  439f              BICS     r7,r7,r3
000050  6007              STR      r7,[r0,#0]
;;;210    
;;;211          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000052  790f              LDRB     r7,[r1,#4]
000054  f8d0c000          LDR      r12,[r0,#0]
000058  40b7              LSLS     r7,r7,r6
00005a  ea47070c          ORR      r7,r7,r12
00005e  6007              STR      r7,[r0,#0]
;;;212    
;;;213          /* Pull-up Pull down resistor configuration */
;;;214          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000060  68c7              LDR      r7,[r0,#0xc]
000062  439f              BICS     r7,r7,r3
000064  60c7              STR      r7,[r0,#0xc]
;;;215          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
000066  79cb              LDRB     r3,[r1,#7]
000068  40b3              LSLS     r3,r3,r6
00006a  68c6              LDR      r6,[r0,#0xc]
00006c  4333              ORRS     r3,r3,r6
00006e  60c3              STR      r3,[r0,#0xc]
                  |L2.112|
000070  1c52              ADDS     r2,r2,#1
000072  2a10              CMP      r2,#0x10              ;183
000074  d3c8              BCC      |L2.8|
;;;216        }
;;;217      }
;;;218    }
000076  bdf0              POP      {r4-r7,pc}
;;;219    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;495      */
;;;496    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  074b              LSLS     r3,r1,#29
;;;497    {
;;;498      uint32_t temp = 0x00;
;;;499      uint32_t temp_2 = 0x00;
;;;500    
;;;501      /* Check the parameters */
;;;502      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;503      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;504      assert_param(IS_GPIO_AF(GPIO_AF));
;;;505    
;;;506      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;507      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
000006  08c9              LSRS     r1,r1,#3
000008  b510              PUSH     {r4,lr}               ;497
00000a  eb000081          ADD      r0,r0,r1,LSL #2
00000e  6a01              LDR      r1,[r0,#0x20]
000010  240f              MOVS     r4,#0xf
000012  409c              LSLS     r4,r4,r3
000014  43a1              BICS     r1,r1,r4
000016  6201              STR      r1,[r0,#0x20]
;;;508      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
000018  6a01              LDR      r1,[r0,#0x20]
00001a  4311              ORRS     r1,r1,r2
;;;509      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00001c  6201              STR      r1,[r0,#0x20]
;;;510    }
00001e  bd10              POP      {r4,pc}
;;;511    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;246      */
;;;247    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;248    {
;;;249      __IO uint32_t tmp = 0x00010000;
;;;250    
;;;251      /* Check the parameters */
;;;252      assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
;;;253      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;254    
;;;255      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;256      /* Set LCKK bit */
;;;257      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;258      /* Reset LCKK bit */
;;;259      GPIOx->LCKR =  GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;260      /* Set LCKK bit */
;;;261      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;262      /* Read LCKK bit */
;;;263      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;264      /* Read LCKK bit */
;;;265      tmp = GPIOx->LCKR;
000012  69c0              LDR      r0,[r0,#0x1c]
000014  9000              STR      r0,[sp,#0]
;;;266    }
000016  bd08              POP      {r3,pc}
;;;267    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;317      */
;;;318    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;319    {
;;;320      /* Check the parameters */
;;;321      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;322    
;;;323      return ((uint16_t)GPIOx->IDR);
;;;324    }
000002  4770              BX       lr
;;;325    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;293      */
;;;294    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;295    {
;;;296      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;297    
;;;298      /* Check the parameters */
;;;299      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;300      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;301    
;;;302      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  8a12              LDRH     r2,[r2,#0x10]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L6.12|
;;;303      {
;;;304        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;305      }
;;;306      else
;;;307      {
;;;308        bitstatus = (uint8_t)Bit_RESET;
;;;309      }
;;;310      return bitstatus;
;;;311    }
00000c  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;359      */
;;;360    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  8a80              LDRH     r0,[r0,#0x14]
;;;361    {
;;;362      /* Check the parameters */
;;;363      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;364    
;;;365      return ((uint16_t)GPIOx->ODR);
;;;366    }
000002  4770              BX       lr
;;;367    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;335      */
;;;336    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;337    {
;;;338      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;339    
;;;340      /* Check the parameters */
;;;341      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;342      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;343    
;;;344      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  8a92              LDRH     r2,[r2,#0x14]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L8.12|
;;;345      {
;;;346        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;347      }
;;;348      else
;;;349      {
;;;350        bitstatus = (uint8_t)Bit_RESET;
;;;351      }
;;;352      return bitstatus;
;;;353    }
00000c  4770              BX       lr
;;;354    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;396      */
;;;397    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8501              STRH     r1,[r0,#0x28]
;;;398    {
;;;399      /* Check the parameters */
;;;400      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;401      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;402    
;;;403      GPIOx->BRR = GPIO_Pin;
;;;404    }
000002  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;377      */
;;;378    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6181              STR      r1,[r0,#0x18]
;;;379    {
;;;380      /* Check the parameters */
;;;381      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;382      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;383    
;;;384      GPIOx->BSRR = GPIO_Pin;
;;;385    }
000002  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;225      */
;;;226    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;227    {
;;;228      /* Reset GPIO init structure parameters values */
;;;229      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;230      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;231      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
00000a  2202              MOVS     r2,#2
00000c  7142              STRB     r2,[r0,#5]
;;;232      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000e  7181              STRB     r1,[r0,#6]
;;;233      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
000010  71c1              STRB     r1,[r0,#7]
;;;234    }
000012  4770              BX       lr
;;;235    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;443      */
;;;444    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  8281              STRH     r1,[r0,#0x14]
;;;445    {
;;;446      /* Check the parameters */
;;;447      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;448    
;;;449      GPIOx->ODR = PortVal;
;;;450    }
000002  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;419      */
;;;420    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L13.6|
;;;421    {
;;;422      /* Check the parameters */
;;;423      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;424      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;425      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;426    
;;;427      if (BitVal != Bit_RESET)
;;;428      {
;;;429        GPIOx->BSRR = GPIO_Pin;
000002  6181              STR      r1,[r0,#0x18]
;;;430      }
;;;431      else
;;;432      {
;;;433        GPIOx->BRR = GPIO_Pin ;
;;;434      }
;;;435    }
000004  4770              BX       lr
                  |L13.6|
000006  8501              STRH     r1,[r0,#0x28]         ;433
000008  4770              BX       lr
;;;436    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F37x_StdPeriph_Driver\\src\\stm32f37x_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f37x_gpio_c_f8e8e39a____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f37x_gpio_c_f8e8e39a____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f37x_gpio_c_f8e8e39a____REVSH|
#line 153
|__asm___16_stm32f37x_gpio_c_f8e8e39a____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f37x_gpio_c_f8e8e39a____RRX|
#line 328
|__asm___16_stm32f37x_gpio_c_f8e8e39a____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
