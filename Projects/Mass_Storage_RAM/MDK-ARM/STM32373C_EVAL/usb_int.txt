; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\usb_int.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\usb_int.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\usb_int.crf ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_int.c]
                          THUMB

                          AREA ||i.CTR_HP||, CODE, READONLY, ALIGN=2

                  CTR_HP PROC
;;;160    *******************************************************************************/
;;;161    void CTR_HP(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;162    {
;;;163      uint32_t wEPVal = 0;
;;;164    
;;;165      while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;166      {
;;;167        _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
;;;168        /* extract highest priority endpoint number */
;;;169        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
000004  4e18              LDR      r6,|L1.104|
;;;170        /* process related endpoint register */
;;;171        wEPVal = _GetENDPOINT(EPindex);
000006  4f19              LDR      r7,|L1.108|
000008  4c19              LDR      r4,|L1.112|
00000a  4d1a              LDR      r5,|L1.116|
00000c  e026              B        |L1.92|
00000e  bf00              NOP                            ;167
                  |L1.16|
000010  f64770ff          MOV      r0,#0x7fff            ;167
000014  6020              STR      r0,[r4,#0]            ;167
000016  8828              LDRH     r0,[r5,#0]            ;169  ; wIstr
000018  f000010f          AND      r1,r0,#0xf            ;169
00001c  eb070081          ADD      r0,r7,r1,LSL #2
000020  7031              STRB     r1,[r6,#0]            ;169
000022  f8d02c00          LDR      r2,[r0,#0xc00]
000026  b292              UXTH     r2,r2
;;;172        if ((wEPVal & EP_CTR_RX) != 0)
000028  0413              LSLS     r3,r2,#16
00002a  d508              BPL      |L1.62|
;;;173        {
;;;174          /* clear int flag */
;;;175          _ClearEP_CTR_RX(EPindex);
00002c  f8d02c00          LDR      r2,[r0,#0xc00]
000030  f640738f          MOV      r3,#0xf8f
000034  401a              ANDS     r2,r2,r3
000036  f8c02c00          STR      r2,[r0,#0xc00]
;;;176    
;;;177          /* call OUT service function */
;;;178          (*pEpInt_OUT[EPindex-1])();
00003a  480f              LDR      r0,|L1.120|
00003c  e009              B        |L1.82|
                  |L1.62|
;;;179    
;;;180        } /* if((wEPVal & EP_CTR_RX) */
;;;181        else if ((wEPVal & EP_CTR_TX) != 0)
00003e  0612              LSLS     r2,r2,#24
000040  d50c              BPL      |L1.92|
;;;182        {
;;;183          /* clear int flag */
;;;184          _ClearEP_CTR_TX(EPindex);
000042  f8d02c00          LDR      r2,[r0,#0xc00]
000046  f648730f          MOV      r3,#0x8f0f
00004a  401a              ANDS     r2,r2,r3
00004c  f8c02c00          STR      r2,[r0,#0xc00]
;;;185    
;;;186          /* call IN service function */
;;;187          (*pEpInt_IN[EPindex-1])();
000050  480a              LDR      r0,|L1.124|
                  |L1.82|
000052  eb000081          ADD      r0,r0,r1,LSL #2
000056  f8500c04          LDR      r0,[r0,#-4]
00005a  4780              BLX      r0
                  |L1.92|
00005c  6820              LDR      r0,[r4,#0]            ;165
00005e  8028              STRH     r0,[r5,#0]            ;165
000060  0400              LSLS     r0,r0,#16             ;165
000062  d4d5              BMI      |L1.16|
;;;188    
;;;189    
;;;190        } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;191    
;;;192      }/* while(...) */
;;;193    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;194    
                          ENDP

                  |L1.104|
                          DCD      EPindex
                  |L1.108|
                          DCD      0x40005000
                  |L1.112|
                          DCD      0x40005c44
                  |L1.116|
                          DCD      wIstr
                  |L1.120|
                          DCD      pEpInt_OUT
                  |L1.124|
                          DCD      pEpInt_IN

                          AREA ||i.CTR_LP||, CODE, READONLY, ALIGN=2

                  CTR_LP PROC
;;;52     *******************************************************************************/
;;;53     void CTR_LP(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;54     {
;;;55       __IO uint16_t wEPVal = 0;
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;56       /* stay in loop while pending interrupts */
;;;57       while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
00000a  f8dfa134          LDR      r10,|L2.320|
;;;58       {
;;;59         /* extract highest priority endpoint number */
;;;60         EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
;;;61         if (EPindex == 0)
;;;62         {
;;;63           /* Decode and service control endpoint interrupt */
;;;64           /* calling related service routine */
;;;65           /* (Setup0_Process, In0_Process, Out0_Process) */
;;;66     
;;;67           /* save RX & TX status */
;;;68           /* and set both to NAK */
;;;69           
;;;70     	    SaveRState = _GetENDPOINT(ENDP0);
;;;71     	    SaveTState = SaveRState & EPTX_STAT;
;;;72     	    SaveRState &=  EPRX_STAT;	
;;;73     
;;;74     	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
00000e  f64b76bf          MOV      r6,#0xbfbf
000012  f2480780          MOV      r7,#0x8080
000016  4d4a              LDR      r5,|L2.320|
000018  4c4a              LDR      r4,|L2.324|
;;;75     
;;;76           /* DIR bit = origin of the interrupt */
;;;77     
;;;78           if ((wIstr & ISTR_DIR) == 0)
;;;79           {
;;;80             /* DIR = 0 */
;;;81     
;;;82             /* DIR = 0      => IN  int */
;;;83             /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
;;;84     
;;;85             _ClearEP_CTR_TX(ENDP0);
;;;86             In0_Process();
;;;87     
;;;88                /* before terminate set Tx & Rx status */
;;;89     
;;;90                 _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;91     		  return;
;;;92           }
;;;93           else
;;;94           {
;;;95             /* DIR = 1 */
;;;96     
;;;97             /* DIR = 1 & CTR_RX       => SETUP or OUT int */
;;;98             /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
;;;99     
;;;100            wEPVal = _GetENDPOINT(ENDP0);
;;;101            
;;;102            if ((wEPVal &EP_SETUP) != 0)
;;;103            {
;;;104              _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
00001a  f640788f          MOV      r8,#0xf8f
00001e  f6487b0f          MOV      r11,#0x8f0f           ;85
000022  f8df9124          LDR      r9,|L2.328|
000026  f10a0a44          ADD      r10,r10,#0x44         ;57
00002a  e031              B        |L2.144|
                  |L2.44|
00002c  8808              LDRH     r0,[r1,#0]            ;60  ; wIstr
00002e  4a47              LDR      r2,|L2.332|
000030  f010000f          ANDS     r0,r0,#0xf            ;60
000034  7010              STRB     r0,[r2,#0]            ;60
000036  d034              BEQ      |L2.162|
;;;105              Setup0_Process();
;;;106              /* before terminate set Tx & Rx status */
;;;107    
;;;108    		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;109              return;
;;;110            }
;;;111    
;;;112            else if ((wEPVal & EP_CTR_RX) != 0)
;;;113            {
;;;114              _ClearEP_CTR_RX(ENDP0);
;;;115              Out0_Process();
;;;116              /* before terminate set Tx & Rx status */
;;;117         
;;;118    		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;119              return;
;;;120            }
;;;121          }
;;;122        }/* if(EPindex == 0) */
;;;123        else
;;;124        {
;;;125          /* Decode and service non control endpoints interrupt  */
;;;126    
;;;127          /* process related endpoint register */
;;;128          wEPVal = _GetENDPOINT(EPindex);
000038  4945              LDR      r1,|L2.336|
00003a  eb010180          ADD      r1,r1,r0,LSL #2
00003e  f8d12c00          LDR      r2,[r1,#0xc00]
000042  f8ad2000          STRH     r2,[sp,#0]
;;;129          if ((wEPVal & EP_CTR_RX) != 0)
000046  f8bd2000          LDRH     r2,[sp,#0]
00004a  0412              LSLS     r2,r2,#16
00004c  d50b              BPL      |L2.102|
;;;130          {
;;;131            /* clear int flag */
;;;132            _ClearEP_CTR_RX(EPindex);
00004e  f8d12c00          LDR      r2,[r1,#0xc00]
000052  ea020208          AND      r2,r2,r8
000056  f8c12c00          STR      r2,[r1,#0xc00]
;;;133    
;;;134            /* call OUT service function */
;;;135            (*pEpInt_OUT[EPindex-1])();
00005a  493e              LDR      r1,|L2.340|
00005c  eb010080          ADD      r0,r1,r0,LSL #2
000060  f8500c04          LDR      r0,[r0,#-4]
000064  4780              BLX      r0
                  |L2.102|
;;;136    
;;;137          } /* if((wEPVal & EP_CTR_RX) */
;;;138    
;;;139          if ((wEPVal & EP_CTR_TX) != 0)
000066  f8bd0000          LDRH     r0,[sp,#0]
00006a  0600              LSLS     r0,r0,#24
00006c  d510              BPL      |L2.144|
;;;140          {
;;;141            /* clear int flag */
;;;142            _ClearEP_CTR_TX(EPindex);
00006e  4837              LDR      r0,|L2.332|
000070  4937              LDR      r1,|L2.336|
000072  7800              LDRB     r0,[r0,#0]  ; EPindex
000074  eb010180          ADD      r1,r1,r0,LSL #2
000078  f8d12c00          LDR      r2,[r1,#0xc00]
00007c  ea02020b          AND      r2,r2,r11
000080  f8c12c00          STR      r2,[r1,#0xc00]
;;;143    
;;;144            /* call IN service function */
;;;145            (*pEpInt_IN[EPindex-1])();
000084  4934              LDR      r1,|L2.344|
000086  eb010080          ADD      r0,r1,r0,LSL #2
00008a  f8500c04          LDR      r0,[r0,#-4]
00008e  4780              BLX      r0
                  |L2.144|
000090  f8da0000          LDR      r0,[r10,#0]           ;57
000094  4649              MOV      r1,r9                 ;57
000096  f8a90000          STRH     r0,[r9,#0]            ;57
00009a  0400              LSLS     r0,r0,#16             ;57
00009c  d4c6              BMI      |L2.44|
                  |L2.158|
;;;146          } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;147    
;;;148        }/* if(EPindex == 0) else */
;;;149    
;;;150      }/* while(...) */
;;;151    }
00009e  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.162|
0000a2  6828              LDR      r0,[r5,#0]            ;70
0000a4  8020              STRH     r0,[r4,#0]            ;70
0000a6  8820              LDRH     r0,[r4,#0]            ;71  ; SaveRState
0000a8  f0000030          AND      r0,r0,#0x30           ;71
0000ac  8060              STRH     r0,[r4,#2]            ;71
0000ae  8820              LDRH     r0,[r4,#0]            ;72  ; SaveRState
0000b0  f4005040          AND      r0,r0,#0x3000         ;72
0000b4  8020              STRH     r0,[r4,#0]            ;72
0000b6  6828              LDR      r0,[r5,#0]            ;74
0000b8  4030              ANDS     r0,r0,r6              ;74
0000ba  f4805000          EOR      r0,r0,#0x2000         ;74
0000be  f0800020          EOR      r0,r0,#0x20           ;74
0000c2  4338              ORRS     r0,r0,r7              ;74
0000c4  6028              STR      r0,[r5,#0]            ;74
0000c6  8808              LDRH     r0,[r1,#0]            ;78  ; wIstr
0000c8  06c0              LSLS     r0,r0,#27             ;78
0000ca  6828              LDR      r0,[r5,#0]            ;100
0000cc  d415              BMI      |L2.250|
0000ce  ea00000b          AND      r0,r0,r11             ;85
0000d2  6028              STR      r0,[r5,#0]            ;85
0000d4  f7fffffe          BL       In0_Process
0000d8  e026              B        |L2.296|
                  |L2.218|
0000da  8821              LDRH     r1,[r4,#0]            ;90  ; SaveRState
0000dc  0489              LSLS     r1,r1,#18             ;90
0000de  d501              BPL      |L2.228|
0000e0  f4805000          EOR      r0,r0,#0x2000         ;90
                  |L2.228|
0000e4  8861              LDRH     r1,[r4,#2]            ;118  ; SaveTState
0000e6  06c9              LSLS     r1,r1,#27             ;118
0000e8  d426              BMI      |L2.312|
                  |L2.234|
0000ea  8861              LDRH     r1,[r4,#2]            ;90  ; SaveTState
0000ec  0689              LSLS     r1,r1,#26             ;90
0000ee  d501              BPL      |L2.244|
0000f0  f0800020          EOR      r0,r0,#0x20           ;90
                  |L2.244|
0000f4  4338              ORRS     r0,r0,r7              ;118
0000f6  6028              STR      r0,[r5,#0]            ;118
0000f8  e7d1              B        |L2.158|
                  |L2.250|
0000fa  f8ad0000          STRH     r0,[sp,#0]            ;100
0000fe  f8bd0000          LDRH     r0,[sp,#0]            ;102
000102  0500              LSLS     r0,r0,#20             ;102
000104  d506              BPL      |L2.276|
000106  6828              LDR      r0,[r5,#0]            ;104
000108  ea000008          AND      r0,r0,r8              ;104
00010c  6028              STR      r0,[r5,#0]            ;104
00010e  f7fffffe          BL       Setup0_Process
000112  e009              B        |L2.296|
                  |L2.276|
000114  f8bd0000          LDRH     r0,[sp,#0]            ;112
000118  0400              LSLS     r0,r0,#16             ;112
00011a  d5b9              BPL      |L2.144|
00011c  6828              LDR      r0,[r5,#0]            ;114
00011e  ea000008          AND      r0,r0,r8              ;114
000122  6028              STR      r0,[r5,#0]            ;114
000124  f7fffffe          BL       Out0_Process
                  |L2.296|
000128  6828              LDR      r0,[r5,#0]            ;118
00012a  8821              LDRH     r1,[r4,#0]            ;118  ; SaveRState
00012c  4030              ANDS     r0,r0,r6              ;118
00012e  04c9              LSLS     r1,r1,#19             ;118
000130  d5d3              BPL      |L2.218|
000132  f4805080          EOR      r0,r0,#0x1000         ;118
000136  e7d0              B        |L2.218|
                  |L2.312|
000138  f0800010          EOR      r0,r0,#0x10           ;118
00013c  e7d5              B        |L2.234|
;;;152    
                          ENDP

00013e  0000              DCW      0x0000
                  |L2.320|
                          DCD      0x40005c00
                  |L2.324|
                          DCD      ||.data||
                  |L2.328|
                          DCD      wIstr
                  |L2.332|
                          DCD      EPindex
                  |L2.336|
                          DCD      0x40005000
                  |L2.340|
                          DCD      pEpInt_OUT
                  |L2.344|
                          DCD      pEpInt_IN

                          AREA ||.data||, DATA, ALIGN=1

                  SaveRState
000000  0000              DCB      0x00,0x00
                  SaveTState
000002  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_int.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_int_c_CTR_LP____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____REVSH|
#line 153
|__asm___9_usb_int_c_CTR_LP____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_int_c_CTR_LP____RRX|
#line 328
|__asm___9_usb_int_c_CTR_LP____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
