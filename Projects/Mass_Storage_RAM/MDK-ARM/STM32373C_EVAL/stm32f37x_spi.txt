; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32f37x_spi.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32f37x_spi.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32f37x_spi.crf ..\..\..\Libraries\STM32F37x_StdPeriph_Driver\src\stm32f37x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;499      */
;;;500    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;501    {
;;;502      /* Check the parameters */
;;;503      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;504      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;505      if (NewState != DISABLE)
;;;506      {
;;;507        /* Enable the selected SPI peripheral in I2S mode */
;;;508        SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
;;;509      }
;;;510      else
;;;511      {
;;;512        /* Disable the selected SPI peripheral in I2S mode */
;;;513        SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
000002  8b81              LDRH     r1,[r0,#0x1c]
000004  d002              BEQ      |L1.12|
000006  f4416180          ORR      r1,r1,#0x400          ;508
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L1.16|
000010  8381              STRH     r1,[r0,#0x1c]         ;508
;;;514      }
;;;515    }
000012  4770              BX       lr
;;;516    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;339      */
;;;340    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;341    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;342      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000006  2002              MOVS     r0,#2
000008  2100              MOVS     r1,#0
;;;343      uint32_t tmp = 0;
;;;344      RCC_ClocksTypeDef RCC_Clocks;
;;;345      uint32_t sourceclock = 0;
;;;346    
;;;347      /* Check the I2S parameters */
;;;348      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;349      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;350      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;351      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;352      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;353      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;354      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;355    
;;;356    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;357      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;358      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00000a  8baa              LDRH     r2,[r5,#0x1c]
00000c  b08d              SUB      sp,sp,#0x34           ;341
00000e  2601              MOVS     r6,#1                 ;342
000010  f24f0340          MOV      r3,#0xf040
000014  401a              ANDS     r2,r2,r3
000016  83aa              STRH     r2,[r5,#0x1c]
;;;359      SPIx->I2SPR = 0x0002;
000018  8428              STRH     r0,[r5,#0x20]
;;;360    
;;;361      /* Get the I2SCFGR register value */
;;;362      tmpreg = SPIx->I2SCFGR;
00001a  8baf              LDRH     r7,[r5,#0x1c]
;;;363    
;;;364      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;365      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00001c  68a2              LDR      r2,[r4,#8]
00001e  2a02              CMP      r2,#2
000020  d027              BEQ      |L2.114|
;;;366      {
;;;367        i2sodd = (uint16_t)0;
;;;368        i2sdiv = (uint16_t)2;   
;;;369      }
;;;370      /* If the requested audio frequency is not the default, compute the prescaler */
;;;371      else
;;;372      {
;;;373        /* Check the frame length (For the Prescaler computing) */
;;;374        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000022  88a0              LDRH     r0,[r4,#4]
000024  b100              CBZ      r0,|L2.40|
;;;375        {
;;;376          /* Packet length is 16 bits */
;;;377          packetlength = 1;
;;;378        }
;;;379        else
;;;380        {
;;;381          /* Packet length is 32 bits */
;;;382          packetlength = 2;
000026  2602              MOVS     r6,#2
                  |L2.40|
;;;383        }
;;;384    
;;;385        /* I2S Clock source is System clock: Get System Clock frequency */
;;;386        RCC_GetClocksFreq(&RCC_Clocks);      
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       RCC_GetClocksFreq
;;;387    
;;;388        /* Get the source clock value: based on System Clock value */
;;;389        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
;;;390    
;;;391        /* Compute the Real divider depending on the MCLK output state with a floating point */
;;;392        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00002e  88e1              LDRH     r1,[r4,#6]
000030  9800              LDR      r0,[sp,#0]
000032  f5b17f00          CMP      r1,#0x200
000036  d02d              BEQ      |L2.148|
;;;393        {
;;;394          /* MCLK output is enabled */
;;;395          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;396        }
;;;397        else
;;;398        {
;;;399          /* MCLK output is disabled */
;;;400          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000038  0171              LSLS     r1,r6,#5
00003a  fbb0f0f1          UDIV     r0,r0,r1
00003e  bf00              NOP      
                  |L2.64|
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  68a1              LDR      r1,[r4,#8]
000046  0040              LSLS     r0,r0,#1
000048  fbb0f0f1          UDIV     r0,r0,r1
00004c  1d40              ADDS     r0,r0,#5
00004e  b280              UXTH     r0,r0
;;;401        }
;;;402        
;;;403        /* Remove the floating point */
;;;404        tmp = tmp / 10;
000050  210a              MOVS     r1,#0xa
000052  fbb0f0f1          UDIV     r0,r0,r1
;;;405    
;;;406        /* Check the parity of the divider */
;;;407        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000056  f0000101          AND      r1,r0,#1
;;;408    
;;;409        /* Compute the i2sdiv prescaler */
;;;410        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
00005a  1a40              SUBS     r0,r0,r1
;;;411    
;;;412        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;413        i2sodd = (uint16_t) (i2sodd << 8);
00005c  f64f72ff          MOV      r2,#0xffff
000060  f3c0004f          UBFX     r0,r0,#1,#16          ;410
000064  ea022101          AND      r1,r2,r1,LSL #8
;;;414      }
;;;415    
;;;416      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;417      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000068  1e82              SUBS     r2,r0,#2
00006a  2afe              CMP      r2,#0xfe
00006c  d301              BCC      |L2.114|
;;;418      {
;;;419        /* Set the default values */
;;;420        i2sdiv = 2;
00006e  2002              MOVS     r0,#2
;;;421        i2sodd = 0;
000070  2100              MOVS     r1,#0
                  |L2.114|
;;;422      }
;;;423    
;;;424      /* Write to SPIx I2SPR register the computed value */
;;;425      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
000072  88e2              LDRH     r2,[r4,#6]
000074  4308              ORRS     r0,r0,r1
000076  4302              ORRS     r2,r2,r0
000078  842a              STRH     r2,[r5,#0x20]
;;;426    
;;;427      /* Configure the I2S with the SPI_InitStruct values */
;;;428      tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
00007a  8820              LDRH     r0,[r4,#0]
00007c  8861              LDRH     r1,[r4,#2]
00007e  89a2              LDRH     r2,[r4,#0xc]
000080  4308              ORRS     r0,r0,r1
000082  88a1              LDRH     r1,[r4,#4]
000084  4311              ORRS     r1,r1,r2
000086  4308              ORRS     r0,r0,r1
000088  4338              ORRS     r0,r0,r7
00008a  f4406000          ORR      r0,r0,#0x800
;;;429                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;430                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;431    
;;;432      /* Write to SPIx I2SCFGR */
;;;433      SPIx->I2SCFGR = tmpreg;
00008e  83a8              STRH     r0,[r5,#0x1c]
;;;434    }
000090  b00d              ADD      sp,sp,#0x34
000092  bdf0              POP      {r4-r7,pc}
                  |L2.148|
000094  0a00              LSRS     r0,r0,#8              ;395
000096  e7d3              B        |L2.64|
;;;435    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;304      */
;;;305    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;306    {
;;;307    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;308      /* Initialize the I2S_Mode member */
;;;309      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;310    
;;;311      /* Initialize the I2S_Standard member */
;;;312      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;313    
;;;314      /* Initialize the I2S_DataFormat member */
;;;315      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;316    
;;;317      /* Initialize the I2S_MCLKOutput member */
;;;318      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;319    
;;;320      /* Initialize the I2S_AudioFreq member */
;;;321      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2202              MOVS     r2,#2
;;;322    
;;;323      /* Initialize the I2S_CPOL member */
;;;324      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000c  6082              STR      r2,[r0,#8]
00000e  8181              STRH     r1,[r0,#0xc]
;;;325    }
000010  4770              BX       lr
;;;326    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;585      */
;;;586    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;587    {
;;;588      /* Check the parameters */
;;;589      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;590      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;591      if (SPI_Direction == SPI_Direction_Tx)
;;;592      {
;;;593        /* Set the Tx only mode */
;;;594        SPIx->CR1 |= SPI_Direction_Tx;
;;;595      }
;;;596      else
;;;597      {
;;;598        /* Set the Rx only mode */
;;;599        SPIx->CR1 &= SPI_Direction_Rx;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L4.16|
000008  f4214180          BIC      r1,r1,#0x4000
                  |L4.12|
00000c  8001              STRH     r1,[r0,#0]            ;594
;;;600      }
;;;601    }
00000e  4770              BX       lr
                  |L4.16|
000010  f4414180          ORR      r1,r1,#0x4000         ;594
000014  e7fa              B        |L4.12|
;;;602    
                          ENDP


                          AREA ||i.SPI_CRCLengthConfig||, CODE, READONLY, ALIGN=1

                  SPI_CRCLengthConfig PROC
;;;851      */
;;;852    void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
000000  8802              LDRH     r2,[r0,#0]
;;;853    {
;;;854      /* Check the parameters */
;;;855      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;856      assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));
;;;857    
;;;858      /* Clear CRCL bit */
;;;859      SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
000002  f4226200          BIC      r2,r2,#0x800
000006  8002              STRH     r2,[r0,#0]
;;;860    
;;;861      /* Set new CRCL bit value */
;;;862      SPIx->CR1 |= SPI_CRCLength;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;863    }
00000e  4770              BX       lr
;;;864    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;873      */
;;;874    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;875    {
;;;876      /* Check the parameters */
;;;877      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;878      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;879    
;;;880      if (NewState != DISABLE)
;;;881      {
;;;882        /* Enable the selected SPI CRC calculation */
;;;883        SPIx->CR1 |= SPI_CR1_CRCEN;
;;;884      }
;;;885      else
;;;886      {
;;;887        /* Disable the selected SPI CRC calculation */
;;;888        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;883
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L6.16|
000010  8001              STRH     r1,[r0,#0]            ;883
;;;889      }
;;;890    }
000012  4770              BX       lr
;;;891    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;442      */
;;;443    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;444    {
;;;445      /* Check the parameters */
;;;446      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;447      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;448    
;;;449      if (NewState != DISABLE)
;;;450      {
;;;451        /* Enable the selected SPI peripheral */
;;;452        SPIx->CR1 |= SPI_CR1_SPE;
;;;453      }
;;;454      else
;;;455      {
;;;456        /* Disable the selected SPI peripheral */
;;;457        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L7.12|
000006  f0410140          ORR      r1,r1,#0x40           ;452
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210140          BIC      r1,r1,#0x40
                  |L7.16|
000010  8001              STRH     r1,[r0,#0]            ;452
;;;458      }
;;;459    }
000012  4770              BX       lr
;;;460    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;536      */
;;;537    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8882              LDRH     r2,[r0,#4]
;;;538    {
;;;539      uint16_t tmpreg = 0;
;;;540      
;;;541      /* Check the parameters */
;;;542      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;543      assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
;;;544      /* Read the CR2 register */
;;;545      tmpreg = SPIx->CR2;
;;;546      /* Clear DS[3:0] bits */
;;;547      tmpreg &= (uint16_t)~SPI_CR2_DS;
000002  f4226270          BIC      r2,r2,#0xf00
;;;548      /* Set new DS[3:0] bits value */
;;;549      tmpreg |= SPI_DataSize;
000006  430a              ORRS     r2,r2,r1
;;;550      SPIx->CR2 = tmpreg;
000008  8082              STRH     r2,[r0,#4]
;;;551    }
00000a  4770              BX       lr
;;;552    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;914      */
;;;915    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  2901              CMP      r1,#1
;;;916    {
000002  d001              BEQ      |L9.8|
;;;917      uint16_t crcreg = 0;
;;;918      /* Check the parameters */
;;;919      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;920      assert_param(IS_SPI_CRC(SPI_CRC));
;;;921    
;;;922      if (SPI_CRC != SPI_CRC_Rx)
;;;923      {
;;;924        /* Get the Tx CRC register */
;;;925        crcreg = SPIx->TXCRCR;
000004  8b00              LDRH     r0,[r0,#0x18]
;;;926      }
;;;927      else
;;;928      {
;;;929        /* Get the Rx CRC register */
;;;930        crcreg = SPIx->RXCRCR;
;;;931      }
;;;932      /* Return the selected CRC register */
;;;933      return crcreg;
;;;934    }
000006  4770              BX       lr
                  |L9.8|
000008  8a80              LDRH     r0,[r0,#0x14]         ;930
00000a  4770              BX       lr
;;;935    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;940      */
;;;941    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;942    {
;;;943      /* Check the parameters */
;;;944      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;945    
;;;946      /* Return the CRC polynomial register */
;;;947      return SPIx->CRCPR;
;;;948    }
000002  4770              BX       lr
;;;949    
                          ENDP


                          AREA ||i.SPI_GetReceptionFIFOStatus||, CODE, READONLY, ALIGN=1

                  SPI_GetReceptionFIFOStatus PROC
;;;1169     */
;;;1170   uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
000000  8900              LDRH     r0,[r0,#8]
;;;1171   {
;;;1172     /* Get the SPIx Reception FIFO level bits */
;;;1173     return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
000002  f40060c0          AND      r0,r0,#0x600
;;;1174   }
000006  4770              BX       lr
;;;1175   
                          ENDP


                          AREA ||i.SPI_GetTransmissionFIFOStatus||, CODE, READONLY, ALIGN=1

                  SPI_GetTransmissionFIFOStatus PROC
;;;1154     */
;;;1155   uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
000000  8900              LDRH     r0,[r0,#8]
;;;1156   {
;;;1157     /* Get the SPIx Transmission FIFO level bits */
;;;1158     return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
000002  f40050c0          AND      r0,r0,#0x1800
;;;1159   }
000006  4770              BX       lr
;;;1160   
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;1226     */
;;;1227   void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43c9              MVNS     r1,r1
;;;1228   {
;;;1229     /* Check the parameters */
;;;1230     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1231     assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));
;;;1232   
;;;1233     /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;1234     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8101              STRH     r1,[r0,#8]
;;;1235   }
000004  4770              BX       lr
;;;1236   
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;977      */
;;;978    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;979    {
;;;980      /* Check the parameters */
;;;981      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;982      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;983      assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));
;;;984    
;;;985      if (NewState != DISABLE)
;;;986      {
;;;987        /* Enable the selected SPI DMA requests */
;;;988        SPIx->CR2 |= SPI_I2S_DMAReq;
;;;989      }
;;;990      else
;;;991      {
;;;992        /* Disable the selected SPI DMA requests */
;;;993        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000002  8882              LDRH     r2,[r0,#4]
000004  d001              BEQ      |L14.10|
000006  430a              ORRS     r2,r2,r1              ;988
000008  e000              B        |L14.12|
                  |L14.10|
00000a  438a              BICS     r2,r2,r1
                  |L14.12|
00000c  8082              STRH     r2,[r0,#4]            ;988
;;;994      }
;;;995    }
00000e  4770              BX       lr
;;;996    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;167      */
;;;168    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  4911              LDR      r1,|L15.72|
;;;169    {
000002  b510              PUSH     {r4,lr}
;;;170      /* Check the parameters */
;;;171      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;172    
;;;173      if (SPIx == SPI1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L15.30|
;;;174      {
;;;175        /* Enable SPI1 reset state */
;;;176        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000008  1484              ASRS     r4,r0,#18
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;177        /* Release SPI1 from reset state */
;;;178        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L15.30|
;;;179      }
;;;180      else if (SPIx == SPI2)
00001e  490b              LDR      r1,|L15.76|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L15.42|
;;;181      {
;;;182        /* Enable SPI2 reset state */
;;;183        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000024  2101              MOVS     r1,#1
000026  1404              ASRS     r4,r0,#16
;;;184        /* Release SPI2 from reset state */
;;;185        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000028  e004              B        |L15.52|
                  |L15.42|
;;;186      }
;;;187      else
;;;188      {
;;;189        if (SPIx == SPI3)
00002a  4909              LDR      r1,|L15.80|
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L15.70|
;;;190        {
;;;191          /* Enable SPI3 reset state */
;;;192          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000030  2101              MOVS     r1,#1
000032  13c4              ASRS     r4,r0,#15
                  |L15.52|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;193          /* Release SPI3 from reset state */
;;;194          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00003a  4620              MOV      r0,r4
00003c  e8bd4010          POP      {r4,lr}
000040  2100              MOVS     r1,#0
000042  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L15.70|
;;;195        }
;;;196      }
;;;197    }
000046  bd10              POP      {r4,pc}
;;;198    
                          ENDP

                  |L15.72|
                          DCD      0x40013000
                  |L15.76|
                          DCD      0x40003800
                  |L15.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;1191     */
;;;1192   FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;1193   {
;;;1194     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1195     /* Check the parameters */
;;;1196     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1197     assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;1198   
;;;1199     /* Check the status of the specified SPI flag */
;;;1200     if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8912              LDRH     r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L16.12|
;;;1201     {
;;;1202       /* SPI_I2S_FLAG is set */
;;;1203       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L16.12|
;;;1204     }
;;;1205     else
;;;1206     {
;;;1207       /* SPI_I2S_FLAG is reset */
;;;1208       bitstatus = RESET;
;;;1209     }
;;;1210     /* Return the SPI_I2S_FLAG status */
;;;1211     return  bitstatus;
;;;1212   }
00000c  4770              BX       lr
;;;1213   
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;1249     */
;;;1250   ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;1251   {
;;;1252     ITStatus bitstatus = RESET;
;;;1253     uint16_t itpos = 0, itmask = 0, enablestatus = 0;
;;;1254   
;;;1255     /* Check the parameters */
;;;1256     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1257     assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;1258   
;;;1259     /* Get the SPI_I2S_IT index */
;;;1260     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000002  f001040f          AND      r4,r1,#0xf
000006  2201              MOVS     r2,#1
000008  4603              MOV      r3,r0                 ;1251
00000a  fa02f404          LSL      r4,r2,r4
00000e  2000              MOVS     r0,#0                 ;1252
;;;1261   
;;;1262     /* Get the SPI_I2S_IT IT mask */
;;;1263     itmask = SPI_I2S_IT >> 4;
000010  0909              LSRS     r1,r1,#4
;;;1264   
;;;1265     /* Set the IT mask */
;;;1266     itmask = 0x01 << itmask;
000012  408a              LSLS     r2,r2,r1
000014  b291              UXTH     r1,r2
;;;1267   
;;;1268     /* Get the SPI_I2S_IT enable bit status */
;;;1269     enablestatus = (SPIx->CR2 & itmask) ;
000016  889a              LDRH     r2,[r3,#4]
000018  b2a4              UXTH     r4,r4                 ;1260
00001a  400a              ANDS     r2,r2,r1
;;;1270   
;;;1271     /* Check the status of the specified SPI interrupt */
;;;1272     if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
00001c  8919              LDRH     r1,[r3,#8]
00001e  4221              TST      r1,r4
000020  d002              BEQ      |L17.40|
000022  2a00              CMP      r2,#0
000024  d000              BEQ      |L17.40|
;;;1273     {
;;;1274       /* SPI_I2S_IT is set */
;;;1275       bitstatus = SET;
000026  2001              MOVS     r0,#1
                  |L17.40|
;;;1276     }
;;;1277     else
;;;1278     {
;;;1279       /* SPI_I2S_IT is reset */
;;;1280       bitstatus = RESET;
;;;1281     }
;;;1282     /* Return the SPI_I2S_IT status */
;;;1283     return bitstatus;
;;;1284   }
000028  bd10              POP      {r4,pc}
;;;1285   
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;1118     */
;;;1119   void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  0909              LSRS     r1,r1,#4
;;;1120   {
;;;1121     uint16_t itpos = 0, itmask = 0 ;
;;;1122   
;;;1123     /* Check the parameters */
;;;1124     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1125     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1126     assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;1127   
;;;1128     /* Get the SPI IT index */
;;;1129     itpos = SPI_I2S_IT >> 4;
;;;1130   
;;;1131     /* Set the IT mask */
;;;1132     itmask = (uint16_t)1 << (uint16_t)itpos;
000002  2301              MOVS     r3,#1
000004  408b              LSLS     r3,r3,r1
;;;1133   
;;;1134     if (NewState != DISABLE)
000006  2a00              CMP      r2,#0
;;;1135     {
;;;1136       /* Enable the selected SPI interrupt */
;;;1137       SPIx->CR2 |= itmask;
;;;1138     }
;;;1139     else
;;;1140     {
;;;1141       /* Disable the selected SPI interrupt */
;;;1142       SPIx->CR2 &= (uint16_t)~itmask;
000008  8882              LDRH     r2,[r0,#4]
00000a  b299              UXTH     r1,r3                 ;1132
00000c  d001              BEQ      |L18.18|
00000e  430a              ORRS     r2,r2,r1              ;1137
000010  e000              B        |L18.20|
                  |L18.18|
000012  438a              BICS     r2,r2,r1
                  |L18.20|
000014  8082              STRH     r2,[r0,#4]            ;1137
;;;1143     }
;;;1144   }
000016  4770              BX       lr
;;;1145   
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData16||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData16 PROC
;;;770      */
;;;771    uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
000000  8980              LDRH     r0,[r0,#0xc]
;;;772    {
;;;773      return SPIx->DR;
;;;774    }
000002  4770              BX       lr
;;;775    /**
                          ENDP


                          AREA ||i.SPI_I2S_SendData16||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData16 PROC
;;;742      */
;;;743    void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;744    {
;;;745      /* Check the parameters */
;;;746      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;747      
;;;748      SPIx->DR = (uint16_t)Data;
;;;749    }
000002  4770              BX       lr
;;;750    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;234      */
;;;235    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;236    {
;;;237      uint16_t tmpreg = 0;
;;;238      
;;;239      /* check the parameters */
;;;240      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;241      
;;;242      /* Check the SPI parameters */
;;;243      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;244      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;245      assert_param(IS_SPI_DATA_SIZE(SPI_InitStruct->SPI_DataSize));
;;;246      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;247      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;248      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;249      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;250      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;251      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;252      
;;;253      /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;254      /* Get the SPIx CR1 value */
;;;255      tmpreg = SPIx->CR1;
000002  8802              LDRH     r2,[r0,#0]
;;;256      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
;;;257      tmpreg &= CR1_CLEAR_MASK;
;;;258      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;259      master/slave mode, CPOL and CPHA */
;;;260      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;261      /* Set SSM, SSI bit according to SPI_NSS values */
;;;262      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;263      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;264      /* Set CPOL bit according to SPI_CPOL value */
;;;265      /* Set CPHA bit according to SPI_CPHA value */
;;;266      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
000004  880b              LDRH     r3,[r1,#0]
000006  89cc              LDRH     r4,[r1,#0xe]
000008  890d              LDRH     r5,[r1,#8]
00000a  4323              ORRS     r3,r3,r4
00000c  88cc              LDRH     r4,[r1,#6]
00000e  f4025241          AND      r2,r2,#0x3040         ;257
000012  432c              ORRS     r4,r4,r5
000014  4323              ORRS     r3,r3,r4
000016  894c              LDRH     r4,[r1,#0xa]
000018  4323              ORRS     r3,r3,r4
00001a  898c              LDRH     r4,[r1,#0xc]
00001c  4323              ORRS     r3,r3,r4
00001e  4313              ORRS     r3,r3,r2
;;;267                          SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
;;;268                          SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
;;;269      /* Write to SPIx CR1 */
;;;270      SPIx->CR1 = tmpreg;
000020  8003              STRH     r3,[r0,#0]
;;;271      /*-------------------------Data Size Configuration -----------------------*/
;;;272      /* Get the SPIx CR2 value */
;;;273      tmpreg = SPIx->CR2;
000022  8882              LDRH     r2,[r0,#4]
;;;274      /* Clear DS[3:0] bits */
;;;275      tmpreg &=(uint16_t)~SPI_CR2_DS;
000024  f4226370          BIC      r3,r2,#0xf00
;;;276      /* Configure SPIx: Data Size */
;;;277      tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
000028  888a              LDRH     r2,[r1,#4]
00002a  431a              ORRS     r2,r2,r3
;;;278      /* Write to SPIx CR2 */
;;;279      SPIx->CR2 = tmpreg;
00002c  8082              STRH     r2,[r0,#4]
;;;280      
;;;281      /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;282      /* Write to SPIx CRCPOLY */
;;;283      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
00002e  8a0a              LDRH     r2,[r1,#0x10]
000030  8202              STRH     r2,[r0,#0x10]
;;;284      
;;;285      /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;286      /* Get the SPIx CR1 value */
;;;287      tmpreg = SPIx->CR1;
000032  8802              LDRH     r2,[r0,#0]
;;;288      /* Clear MSTR bit */
;;;289      tmpreg &= CR1_CLEAR_MASK2;
;;;290      /* Configure SPIx: master/slave mode */  
;;;291      /* Set MSTR bit according to SPI_Mode */
;;;292      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
000034  8849              LDRH     r1,[r1,#2]
000036  f0220204          BIC      r2,r2,#4              ;289
00003a  4311              ORRS     r1,r1,r2
;;;293      /* Write to SPIx CR1 */
;;;294      SPIx->CR1 = tmpreg;  
00003c  8001              STRH     r1,[r0,#0]
;;;295      
;;;296      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;297      SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
00003e  8b81              LDRH     r1,[r0,#0x1c]
000040  f4216100          BIC      r1,r1,#0x800
000044  8381              STRH     r1,[r0,#0x1c]
;;;298    }
000046  bd30              POP      {r4,r5,pc}
;;;299    
                          ENDP


                          AREA ||i.SPI_LastDMATransferCmd||, CODE, READONLY, ALIGN=1

                  SPI_LastDMATransferCmd PROC
;;;1014     */
;;;1015   void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
000000  8882              LDRH     r2,[r0,#4]
;;;1016   {
;;;1017     /* Check the parameters */
;;;1018     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1019     assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));
;;;1020   
;;;1021     /* Clear LDMA_TX and LDMA_RX bits */
;;;1022     SPIx->CR2 &= CR2_LDMA_MASK;
000002  f42242c0          BIC      r2,r2,#0x6000
000006  8082              STRH     r2,[r0,#4]
;;;1023   
;;;1024     /* Set new LDMA_TX and LDMA_RX bits value */
;;;1025     SPIx->CR2 |= SPI_LastDMATransfer; 
000008  8882              LDRH     r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  8082              STRH     r2,[r0,#4]
;;;1026   }
00000e  4770              BX       lr
;;;1027   
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;613      */
;;;614    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;615    {
;;;616      /* Check the parameters */
;;;617      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;618      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;619    
;;;620      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
;;;621      {
;;;622        /* Set NSS pin internally by software */
;;;623        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
;;;624      }
;;;625      else
;;;626      {
;;;627        /* Reset NSS pin internally by software */
;;;628        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000004  8801              LDRH     r1,[r0,#0]
000006  3aff              SUBS     r2,r2,#0xff           ;620
000008  d002              BEQ      |L23.16|
00000a  f4417180          ORR      r1,r1,#0x100          ;623
00000e  e001              B        |L23.20|
                  |L23.16|
000010  f4217180          BIC      r1,r1,#0x100
                  |L23.20|
000014  8001              STRH     r1,[r0,#0]            ;623
;;;629      }
;;;630    }
000016  4770              BX       lr
;;;631    
                          ENDP


                          AREA ||i.SPI_NSSPulseModeCmd||, CODE, READONLY, ALIGN=1

                  SPI_NSSPulseModeCmd PROC
;;;669      */
;;;670    void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;671    {
;;;672      /* Check the parameters */
;;;673      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;674      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;675    
;;;676      if (NewState != DISABLE)
;;;677      {
;;;678        /* Enable the NSS pulse management mode */
;;;679        SPIx->CR2 |= SPI_CR2_NSSP;
;;;680      }
;;;681      else
;;;682      {
;;;683        /* Disable the NSS pulse management mode */
;;;684        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L24.12|
000006  f0410108          ORR      r1,r1,#8              ;679
00000a  e001              B        |L24.16|
                  |L24.12|
00000c  f0210108          BIC      r1,r1,#8
                  |L24.16|
000010  8081              STRH     r1,[r0,#4]            ;679
;;;685      }
;;;686    }
000012  4770              BX       lr
;;;687    
                          ENDP


                          AREA ||i.SPI_ReceiveData8||, CODE, READONLY, ALIGN=1

                  SPI_ReceiveData8 PROC
;;;755      */
;;;756    uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
000000  7b00              LDRB     r0,[r0,#0xc]
;;;757    {
;;;758      uint32_t spixbase = 0x00;
;;;759      
;;;760      spixbase = (uint32_t)SPIx; 
;;;761      spixbase += 0x0C;
;;;762      
;;;763      return *(__IO uint8_t *) spixbase;
;;;764    }
000002  4770              BX       lr
;;;765    
                          ENDP


                          AREA ||i.SPI_RxFIFOThresholdConfig||, CODE, READONLY, ALIGN=1

                  SPI_RxFIFOThresholdConfig PROC
;;;563      */
;;;564    void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
000000  8882              LDRH     r2,[r0,#4]
;;;565    {
;;;566      /* Check the parameters */
;;;567      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;568      assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));
;;;569    
;;;570      /* Clear FRXTH bit */
;;;571      SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
000002  f4225280          BIC      r2,r2,#0x1000
000006  8082              STRH     r2,[r0,#4]
;;;572    
;;;573      /* Set new FRXTH bit value */
;;;574      SPIx->CR2 |= SPI_RxFIFOThreshold;
000008  8882              LDRH     r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  8082              STRH     r2,[r0,#4]
;;;575    }
00000e  4770              BX       lr
;;;576    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;640      */
;;;641    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;642    {
;;;643      /* Check the parameters */
;;;644      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;645      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;646      if (NewState != DISABLE)
;;;647      {
;;;648        /* Enable the selected SPI SS output */
;;;649        SPIx->CR2 |= SPI_CR2_SSOE;
;;;650      }
;;;651      else
;;;652      {
;;;653        /* Disable the selected SPI SS output */
;;;654        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L27.12|
000006  f0410104          ORR      r1,r1,#4              ;649
00000a  e001              B        |L27.16|
                  |L27.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L27.16|
000010  8081              STRH     r1,[r0,#4]            ;649
;;;655      }
;;;656    }
000012  4770              BX       lr
;;;657    
                          ENDP


                          AREA ||i.SPI_SendData8||, CODE, READONLY, ALIGN=1

                  SPI_SendData8 PROC
;;;723      */
;;;724    void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
000000  7301              STRB     r1,[r0,#0xc]
;;;725    {
;;;726      uint32_t spixbase = 0x00;
;;;727    
;;;728      /* Check the parameters */
;;;729      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;730    
;;;731      spixbase = (uint32_t)SPIx; 
;;;732      spixbase += 0x0C;
;;;733      
;;;734      *(__IO uint8_t *) spixbase = Data;
;;;735    }
000002  4770              BX       lr
;;;736    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;203      */
;;;204    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;205    {
;;;206    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;207      /* Initialize the SPI_Direction member */
;;;208      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;209      /* Initialize the SPI_Mode member */
;;;210      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;211      /* Initialize the SPI_DataSize member */
;;;212      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  f44f62e0          MOV      r2,#0x700
00000a  8082              STRH     r2,[r0,#4]
;;;213      /* Initialize the SPI_CPOL member */
;;;214      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
00000c  80c1              STRH     r1,[r0,#6]
;;;215      /* Initialize the SPI_CPHA member */
;;;216      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000e  8101              STRH     r1,[r0,#8]
;;;217      /* Initialize the SPI_NSS member */
;;;218      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
000010  8141              STRH     r1,[r0,#0xa]
;;;219      /* Initialize the SPI_BaudRatePrescaler member */
;;;220      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
000012  8181              STRH     r1,[r0,#0xc]
;;;221      /* Initialize the SPI_FirstBit member */
;;;222      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000014  81c1              STRH     r1,[r0,#0xe]
;;;223      /* Initialize the SPI_CRCPolynomial member */
;;;224      SPI_InitStruct->SPI_CRCPolynomial = 7;
000016  2107              MOVS     r1,#7
000018  8201              STRH     r1,[r0,#0x10]
;;;225    }
00001a  4770              BX       lr
;;;226    
                          ENDP


                          AREA ||i.SPI_TIModeCmd||, CODE, READONLY, ALIGN=1

                  SPI_TIModeCmd PROC
;;;474      */
;;;475    void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;476    {
;;;477      /* Check the parameters */
;;;478      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;479      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;480    
;;;481      if (NewState != DISABLE)
;;;482      {
;;;483        /* Enable the TI mode for the selected SPI peripheral */
;;;484        SPIx->CR2 |= SPI_CR2_FRF;
;;;485      }
;;;486      else
;;;487      {
;;;488        /* Disable the TI mode for the selected SPI peripheral */
;;;489        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L30.12|
000006  f0410110          ORR      r1,r1,#0x10           ;484
00000a  e001              B        |L30.16|
                  |L30.12|
00000c  f0210110          BIC      r1,r1,#0x10
                  |L30.16|
000010  8081              STRH     r1,[r0,#4]            ;484
;;;490      }
;;;491    }
000012  4770              BX       lr
;;;492    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;896      */
;;;897    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;898    {
;;;899      /* Check the parameters */
;;;900      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;901    
;;;902      /* Enable the selected SPI CRC transmission */
;;;903      SPIx->CR1 |= SPI_CR1_CRCNEXT;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;904    }
000008  4770              BX       lr
;;;905    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F37x_StdPeriph_Driver\\src\\stm32f37x_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_spi_c_2b928927____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f37x_spi_c_2b928927____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_spi_c_2b928927____REVSH|
#line 153
|__asm___15_stm32f37x_spi_c_2b928927____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_spi_c_2b928927____RRX|
#line 328
|__asm___15_stm32f37x_spi_c_2b928927____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
