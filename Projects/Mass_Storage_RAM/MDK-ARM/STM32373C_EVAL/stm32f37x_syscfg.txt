; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32f37x_syscfg.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32f37x_syscfg.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32f37x_syscfg.crf ..\..\..\Libraries\STM32F37x_StdPeriph_Driver\src\stm32f37x_syscfg.c]
                          THUMB

                          AREA ||i.SYSCFG_BreakConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_BreakConfig PROC
;;;309      */
;;;310    void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
000000  4902              LDR      r1,|L1.12|
;;;311    {
;;;312      /* Check the parameter */
;;;313      assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));
;;;314    
;;;315      SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
000002  698a              LDR      r2,[r1,#0x18]
000004  4302              ORRS     r2,r2,r0
000006  618a              STR      r2,[r1,#0x18]
;;;316    }
000008  4770              BX       lr
;;;317    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_ClearFlag||, CODE, READONLY, ALIGN=2

                  SYSCFG_ClearFlag PROC
;;;353      */
;;;354    void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
000000  4902              LDR      r1,|L2.12|
;;;355    {
;;;356      /* Check the parameter */
;;;357      assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));
;;;358    
;;;359      SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
000002  698a              LDR      r2,[r1,#0x18]
000004  4302              ORRS     r2,r2,r0
000006  618a              STR      r2,[r1,#0x18]
;;;360    }
000008  4770              BX       lr
;;;361    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_DMAChannelRemapConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_DMAChannelRemapConfig PROC
;;;161      */
;;;162    void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState)
000000  4a04              LDR      r2,|L3.20|
;;;163    {
;;;164      /* Check the parameters */
;;;165      assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
;;;166      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;167    
;;;168      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;169      {
;;;170        /* Remap the DMA channel */
;;;171        SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
;;;172      }
;;;173      else
;;;174      {
;;;175        /* use the default DMA channel mapping */
;;;176        SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L3.12|
000008  4301              ORRS     r1,r1,r0              ;171
00000a  e000              B        |L3.14|
                  |L3.12|
00000c  4381              BICS     r1,r1,r0
                  |L3.14|
00000e  6011              STR      r1,[r2,#0]            ;171
;;;177      }
;;;178    }
000010  4770              BX       lr
;;;179    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_DeInit||, CODE, READONLY, ALIGN=2

                  SYSCFG_DeInit PROC
;;;94       */
;;;95     void SYSCFG_DeInit(void)
000000  4807              LDR      r0,|L4.32|
;;;96     {
;;;97       /* Set SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
;;;98       SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
000002  6801              LDR      r1,[r0,#0]
000004  f0010103          AND      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;99     
;;;100      /* Set FPU Interrupt Enable bits to default value */
;;;101      SYSCFG->CFGR1 |= 0x7C000000;
00000a  6801              LDR      r1,[r0,#0]
00000c  f04141f8          ORR      r1,r1,#0x7c000000
000010  6001              STR      r1,[r0,#0]
;;;102    
;;;103      /* Set EXTICRx registers to reset value */
;;;104      SYSCFG->EXTICR[0] = 0;
000012  2100              MOVS     r1,#0
000014  6081              STR      r1,[r0,#8]
;;;105      SYSCFG->EXTICR[1] = 0;
000016  60c1              STR      r1,[r0,#0xc]
;;;106      SYSCFG->EXTICR[2] = 0;
000018  6101              STR      r1,[r0,#0x10]
;;;107      SYSCFG->EXTICR[3] = 0;
00001a  6141              STR      r1,[r0,#0x14]
;;;108    
;;;109      /* Set CFGR2 register to reset value */
;;;110      SYSCFG->CFGR2 = 0;
00001c  6181              STR      r1,[r0,#0x18]
;;;111    }
00001e  4770              BX       lr
;;;112    
                          ENDP

                  |L4.32|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_EXTILineConfig PROC
;;;285      */
;;;286    void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
000000  b510              PUSH     {r4,lr}
;;;287    {
;;;288      uint32_t tmp = 0x00;
;;;289    
;;;290      /* Check the parameters */
;;;291      assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
;;;292      assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
;;;293      
;;;294      tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
000002  078a              LSLS     r2,r1,#30
;;;295      SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
000004  f0210403          BIC      r4,r1,#3
000008  4906              LDR      r1,|L5.36|
00000a  0f13              LSRS     r3,r2,#28             ;294
00000c  4421              ADD      r1,r1,r4
00000e  220f              MOVS     r2,#0xf               ;294
000010  688c              LDR      r4,[r1,#8]
000012  409a              LSLS     r2,r2,r3              ;294
000014  4394              BICS     r4,r4,r2
000016  608c              STR      r4,[r1,#8]
;;;296      SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
000018  688a              LDR      r2,[r1,#8]
00001a  4098              LSLS     r0,r0,r3
00001c  4302              ORRS     r2,r2,r0
00001e  608a              STR      r2,[r1,#8]
;;;297    }
000020  bd10              POP      {r4,pc}
;;;298    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SYSCFG_GetFlagStatus PROC
;;;324      */
;;;325    FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag)
000000  4903              LDR      r1,|L6.16|
;;;326    {
;;;327      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;328    
;;;329      /* Check the parameter */
;;;330      assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));
;;;331    
;;;332      /* Check the status of the specified SPI flag */
;;;333      if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
000004  6989              LDR      r1,[r1,#0x18]
000006  05c9              LSLS     r1,r1,#23
000008  d500              BPL      |L6.12|
;;;334      {
;;;335        /* SYSCFG_Flag is set */
;;;336        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;337      }
;;;338      else
;;;339      {
;;;340        /* SYSCFG_Flag is reset */
;;;341        bitstatus = RESET;
;;;342      }
;;;343      /* Return the SYSCFG_Flag status */
;;;344      return  bitstatus;
;;;345    }
00000c  4770              BX       lr
;;;346    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_I2CFastModePlusConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_I2CFastModePlusConfig PROC
;;;202      */
;;;203    void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
000000  4a04              LDR      r2,|L7.20|
;;;204    {
;;;205      /* Check the parameters */
;;;206      assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
;;;207      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;208    
;;;209      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;210      {
;;;211        /* Enable fast mode plus driving capability for selected I2C pin */
;;;212        SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
;;;213      }
;;;214      else
;;;215      {
;;;216        /* Disable fast mode plus driving capability for selected I2C pin */
;;;217        SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L7.12|
000008  4301              ORRS     r1,r1,r0              ;212
00000a  e000              B        |L7.14|
                  |L7.12|
00000c  4381              BICS     r1,r1,r0
                  |L7.14|
00000e  6011              STR      r1,[r2,#0]            ;212
;;;218      }
;;;219    }
000010  4770              BX       lr
;;;220    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_ITConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_ITConfig PROC
;;;259      */
;;;260    void SYSCFG_ITConfig(uint32_t SYSCFG_IT, FunctionalState NewState)  
000000  4a04              LDR      r2,|L8.20|
;;;261    {
;;;262      /* Check the parameters */
;;;263      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;264      assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 
;;;265    
;;;266      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;267      {
;;;268        /* Enable the selected SYSCFG interrupts */
;;;269        SYSCFG->CFGR1 |= SYSCFG_IT;
;;;270      }
;;;271      else
;;;272      {
;;;273        /* Disable the selected SYSCFG interrupts */
;;;274        SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_IT);
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L8.12|
000008  4301              ORRS     r1,r1,r0              ;269
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  4381              BICS     r1,r1,r0
                  |L8.14|
00000e  6011              STR      r1,[r2,#0]            ;269
;;;275      }
;;;276    }
000010  4770              BX       lr
;;;277    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_MemoryRemapConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_MemoryRemapConfig PROC
;;;121      */
;;;122    void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap)
000000  4a03              LDR      r2,|L9.16|
;;;123    {
;;;124      uint32_t tmpctrl = 0;
;;;125    
;;;126      /* Check the parameter */
;;;127      assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));
;;;128    
;;;129      /* Get CFGR1 register value */
;;;130      tmpctrl = SYSCFG->CFGR1;
000002  6811              LDR      r1,[r2,#0]
;;;131    
;;;132      /* Clear MEM_MODE bits */
;;;133      tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
000004  f0210103          BIC      r1,r1,#3
;;;134    
;;;135      /* Set the new MEM_MODE bits value */
;;;136      tmpctrl |= (uint32_t) SYSCFG_MemoryRemap;
000008  4301              ORRS     r1,r1,r0
;;;137    
;;;138      /* Set CFGR1 register with the new memory remap configuration */
;;;139      SYSCFG->CFGR1 = tmpctrl;
00000a  6011              STR      r1,[r2,#0]
;;;140    }
00000c  4770              BX       lr
;;;141    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40010000

                          AREA ||i.SYSCFG_VBATMonitoringCmd||, CODE, READONLY, ALIGN=2

                  SYSCFG_VBATMonitoringCmd PROC
;;;228      */
;;;229    void SYSCFG_VBATMonitoringCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L10.24|
;;;230    {
;;;231      /* Check the parameters */
;;;232      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;233    
;;;234      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;235      {
;;;236        /* Enable VBAT monitoring */
;;;237        SYSCFG->CFGR1 |= SYSCFG_CFGR1_VBAT;
;;;238      }
;;;239      else
;;;240      {
;;;241        /* Disable VBAT monitoring */
;;;242        SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_CFGR1_VBAT);
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L10.14|
000008  f0407080          ORR      r0,r0,#0x1000000      ;237
00000c  e001              B        |L10.18|
                  |L10.14|
00000e  f0207080          BIC      r0,r0,#0x1000000
                  |L10.18|
000012  6008              STR      r0,[r1,#0]            ;237
;;;243      }
;;;244    }
000014  4770              BX       lr
;;;245    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F37x_StdPeriph_Driver\\src\\stm32f37x_syscfg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f37x_syscfg_c_57637610____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_stm32f37x_syscfg_c_57637610____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f37x_syscfg_c_57637610____REVSH|
#line 153
|__asm___18_stm32f37x_syscfg_c_57637610____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f37x_syscfg_c_57637610____RRX|
#line 328
|__asm___18_stm32f37x_syscfg_c_57637610____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
