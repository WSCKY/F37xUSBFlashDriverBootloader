; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32f37x_pwr.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32f37x_pwr.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32f37x_pwr.crf ..\..\..\Libraries\STM32F37x_StdPeriph_Driver\src\stm32f37x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;114      */
;;;115    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;116    {
;;;117      /* Check the parameters */
;;;118      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;119      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;120    }
000004  4770              BX       lr
;;;121    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;564      */
;;;565    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4902              LDR      r1,|L2.12|
;;;566    {
;;;567      /* Check the parameters */
;;;568      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;569             
;;;570      PWR->CR |=  PWR_FLAG << 2;
000002  680a              LDR      r2,[r1,#0]
000004  ea420080          ORR      r0,r2,r0,LSL #2
000008  6008              STR      r0,[r1,#0]
;;;571    }
00000a  4770              BX       lr
;;;572    
                          ENDP

                  |L2.12|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;100      */
;;;101    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;102    {
;;;103      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  070c              LSLS     r4,r1,#28
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;105    }
;;;106    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;488      */
;;;489    void PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L4.32|
;;;490    {
;;;491      /* Clear Wakeup flag */
;;;492      PWR->CR |= PWR_CR_CWUF;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;493      
;;;494      /* Select STANDBY mode */
;;;495      PWR->CR |= PWR_CR_PDDS;
00000a  6801              LDR      r1,[r0,#0]
00000c  f0410102          ORR      r1,r1,#2
000010  6001              STR      r1,[r0,#0]
;;;496      
;;;497      /* Set SLEEPDEEP bit of Cortex-M4 System Control Register */
;;;498      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000012  4804              LDR      r0,|L4.36|
000014  6801              LDR      r1,[r0,#0]
000016  f0410104          ORR      r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;499      
;;;500    /* This option is used to ensure that store operations are completed */
;;;501    #if defined ( __CC_ARM   )
;;;502      __force_stores();
;;;503    #endif
;;;504      /* Request Wait For Interrupt */
;;;505      __WFI();
00001c  bf30              WFI      
;;;506    }
00001e  4770              BX       lr
;;;507    
                          ENDP

                  |L4.32|
                          DCD      0x40007000
                  |L4.36|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;441      */
;;;442    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  4b0a              LDR      r3,|L5.44|
;;;443    {
;;;444      uint32_t tmpreg = 0;
;;;445      
;;;446      /* Check the parameters */
;;;447      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;448      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;449      
;;;450      /* Select the regulator state in STOP mode ---------------------------------*/
;;;451      tmpreg = PWR->CR;
000002  681a              LDR      r2,[r3,#0]
;;;452      /* Clear PDDS and LPDSR bits */
;;;453      tmpreg &= CR_DS_MASK;
000004  f0220203          BIC      r2,r2,#3
;;;454      
;;;455      /* Set LPDSR bit according to PWR_Regulator value */
;;;456      tmpreg |= PWR_Regulator;
000008  4302              ORRS     r2,r2,r0
;;;457      
;;;458      /* Store the new value */
;;;459      PWR->CR = tmpreg;
00000a  601a              STR      r2,[r3,#0]
;;;460      
;;;461      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;462      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
00000c  4808              LDR      r0,|L5.48|
00000e  6802              LDR      r2,[r0,#0]
000010  f0420204          ORR      r2,r2,#4
000014  6002              STR      r2,[r0,#0]
;;;463      
;;;464      /* Select STOP mode entry --------------------------------------------------*/
;;;465      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000016  2901              CMP      r1,#1
000018  d005              BEQ      |L5.38|
;;;466      {   
;;;467        /* Request Wait For Interrupt */
;;;468        __WFI();
;;;469      }
;;;470      else
;;;471      {
;;;472        /* Request Wait For Event */
;;;473        __WFE();
00001a  bf20              WFE      
                  |L5.28|
;;;474      }
;;;475      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;476      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
00001c  6801              LDR      r1,[r0,#0]
00001e  f0210104          BIC      r1,r1,#4
000022  6001              STR      r1,[r0,#0]
;;;477    }
000024  4770              BX       lr
                  |L5.38|
000026  bf30              WFI                            ;468
000028  e7f8              B        |L5.28|
;;;478    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40007000
                  |L5.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSleepMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSleepMode PROC
;;;401      */
;;;402    void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
000000  4905              LDR      r1,|L6.24|
;;;403    {
;;;404      /* Check the parameters */
;;;405      assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));
;;;406      
;;;407      /* Clear SLEEPDEEP bit of Cortex-M4 System Control Register */
;;;408      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000002  680a              LDR      r2,[r1,#0]
000004  f0220204          BIC      r2,r2,#4
000008  600a              STR      r2,[r1,#0]
;;;409      
;;;410      /* Select SLEEP mode entry -------------------------------------------------*/
;;;411      if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
00000a  2801              CMP      r0,#1
00000c  d001              BEQ      |L6.18|
;;;412      {   
;;;413        /* Request Wait For Interrupt */
;;;414        __WFI();
;;;415      }
;;;416      else
;;;417      {
;;;418        /* Request Wait For Event */
;;;419        __WFE();
00000e  bf20              WFE      
;;;420      }
;;;421    }
000010  4770              BX       lr
                  |L6.18|
000012  bf30              WFI                            ;414
000014  4770              BX       lr
;;;422    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;538      */
;;;539    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4a03              LDR      r2,|L7.16|
;;;540    {
000002  4601              MOV      r1,r0
;;;541      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;542      /* Check the parameters */
;;;543      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;544      
;;;545      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000006  6852              LDR      r2,[r2,#4]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L7.14|
;;;546      {
;;;547        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;548      }
;;;549      else
;;;550      {
;;;551        bitstatus = RESET;
;;;552      }
;;;553      /* Return the flag status */
;;;554      return bitstatus;
;;;555    }
00000e  4770              BX       lr
;;;556    
                          ENDP

                  |L7.16|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;186      */
;;;187    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;188    {
;;;189      /* Check the parameters */
;;;190      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;191      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;192    }
000004  4770              BX       lr
;;;193    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;161      */
;;;162    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4a03              LDR      r2,|L9.16|
;;;163    {
;;;164      uint32_t tmpreg = 0;
;;;165      
;;;166      /* Check the parameters */
;;;167      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;168      
;;;169      tmpreg = PWR->CR;
000002  6811              LDR      r1,[r2,#0]
;;;170      
;;;171      /* Clear PLS[7:5] bits */
;;;172      tmpreg &= CR_PLS_MASK;
000004  f02101e0          BIC      r1,r1,#0xe0
;;;173      
;;;174      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;175      tmpreg |= PWR_PVDLevel;
000008  4301              ORRS     r1,r1,r0
;;;176      
;;;177      /* Store the new value */
;;;178      PWR->CR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;179    }
00000c  4770              BX       lr
;;;180    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40007000

                          AREA ||i.PWR_SDADCAnalogCmd||, CODE, READONLY, ALIGN=2

                  PWR_SDADCAnalogCmd PROC
;;;269      */
;;;270    void PWR_SDADCAnalogCmd(uint32_t PWR_SDADCAnalog, FunctionalState NewState)
000000  4a04              LDR      r2,|L10.20|
;;;271    {  
;;;272      /* Check the parameters */
;;;273      assert_param(IS_PWR_SDADC_ANALOG(PWR_SDADCAnalog));  
;;;274      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;275    
;;;276      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;277      {
;;;278        /* Enable the SDADCx analog */
;;;279        PWR->CR |= PWR_SDADCAnalog;
;;;280      }
;;;281      else
;;;282      {
;;;283        /* Disable the SDADCx analog */
;;;284        PWR->CR &= ~PWR_SDADCAnalog;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L10.12|
000008  4301              ORRS     r1,r1,r0              ;279
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4381              BICS     r1,r1,r0
                  |L10.14|
00000e  6011              STR      r1,[r2,#0]            ;279
;;;285      }   
;;;286    }
000010  4770              BX       lr
;;;287    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;222      */
;;;223    void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
000000  4a04              LDR      r2,|L11.20|
;;;224    {  
;;;225      /* Check the parameters */
;;;226      assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));  
;;;227      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;228    
;;;229      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;230      {
;;;231        /* Enable the EWUPx pin */
;;;232        PWR->CSR |= PWR_WakeUpPin;
;;;233      }
;;;234      else
;;;235      {
;;;236        /* Disable the EWUPx pin */
;;;237        PWR->CSR &= ~PWR_WakeUpPin;
000004  6851              LDR      r1,[r2,#4]
000006  d001              BEQ      |L11.12|
000008  4301              ORRS     r1,r1,r0              ;232
00000a  e000              B        |L11.14|
                  |L11.12|
00000c  4381              BICS     r1,r1,r0
                  |L11.14|
00000e  6051              STR      r1,[r2,#4]            ;232
;;;238      }
;;;239    }
000010  4770              BX       lr
;;;240    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40007000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F37x_StdPeriph_Driver\\src\\stm32f37x_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_pwr_c_0c2a8b75____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f37x_pwr_c_0c2a8b75____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_pwr_c_0c2a8b75____REVSH|
#line 153
|__asm___15_stm32f37x_pwr_c_0c2a8b75____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_pwr_c_0c2a8b75____RRX|
#line 328
|__asm___15_stm32f37x_pwr_c_0c2a8b75____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
