; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\usb_istr.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\usb_istr.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\usb_istr.crf ..\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;78     *******************************************************************************/
;;;79     void USB_Istr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
;;;81       wIstr = _GetISTR();
000002  4e29              LDR      r6,|L1.168|
000004  6830              LDR      r0,[r6,#0]
000006  4c29              LDR      r4,|L1.172|
000008  8060              STRH     r0,[r4,#2]
;;;82     
;;;83     #if (IMR_MSK & ISTR_CTR)
;;;84       if (wIstr & ISTR_CTR & wInterrupt_Mask)
00000a  8860              LDRH     r0,[r4,#2]  ; wIstr
00000c  4d28              LDR      r5,|L1.176|
00000e  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
000010  4008              ANDS     r0,r0,r1
000012  0400              LSLS     r0,r0,#16
000014  d501              BPL      |L1.26|
;;;85       {
;;;86         /* servicing of the endpoint correct transfer interrupt */
;;;87         /* clear of the CTR flag into the sub */
;;;88         CTR_LP();
000016  f7fffffe          BL       CTR_LP
                  |L1.26|
;;;89     #ifdef CTR_CALLBACK
;;;90         CTR_Callback();
;;;91     #endif
;;;92       }
;;;93     #endif  
;;;94       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;95     #if (IMR_MSK & ISTR_RESET)
;;;96       if (wIstr & ISTR_RESET & wInterrupt_Mask)
00001a  8860              LDRH     r0,[r4,#2]  ; wIstr
00001c  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
00001e  4008              ANDS     r0,r0,r1
000020  0540              LSLS     r0,r0,#21
000022  d505              BPL      |L1.48|
;;;97       {
;;;98         _SetISTR((uint16_t)CLR_RESET);
000024  f64f30ff          MOV      r0,#0xfbff
000028  6030              STR      r0,[r6,#0]
;;;99         Device_Property.Reset();
00002a  4822              LDR      r0,|L1.180|
00002c  6840              LDR      r0,[r0,#4]  ; Device_Property
00002e  4780              BLX      r0
                  |L1.48|
;;;100    #ifdef RESET_CALLBACK
;;;101        RESET_Callback();
;;;102    #endif
;;;103      }
;;;104    #endif
;;;105      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;106    #if (IMR_MSK & ISTR_DOVR)
;;;107      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;108      {
;;;109        _SetISTR((uint16_t)CLR_DOVR);
;;;110    #ifdef DOVR_CALLBACK
;;;111        DOVR_Callback();
;;;112    #endif
;;;113      }
;;;114    #endif
;;;115      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;116    #if (IMR_MSK & ISTR_ERR)
;;;117      if (wIstr & ISTR_ERR & wInterrupt_Mask)
000030  8861              LDRH     r1,[r4,#2]  ; wIstr
000032  8828              LDRH     r0,[r5,#0]  ; wInterrupt_Mask
000034  4001              ANDS     r1,r1,r0
000036  0489              LSLS     r1,r1,#18
000038  d502              BPL      |L1.64|
;;;118      {
;;;119        _SetISTR((uint16_t)CLR_ERR);
00003a  f64d71ff          MOV      r1,#0xdfff
00003e  6031              STR      r1,[r6,#0]
                  |L1.64|
;;;120    #ifdef ERR_CALLBACK
;;;121        ERR_Callback();
;;;122    #endif
;;;123      }
;;;124    #endif
;;;125      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;126    #if (IMR_MSK & ISTR_WKUP)
;;;127      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
000040  8861              LDRH     r1,[r4,#2]  ; wIstr
000042  4001              ANDS     r1,r1,r0
000044  04c8              LSLS     r0,r1,#19
000046  d505              BPL      |L1.84|
;;;128      {
;;;129        _SetISTR((uint16_t)CLR_WKUP);
000048  f64e70ff          MOV      r0,#0xefff
00004c  6030              STR      r0,[r6,#0]
;;;130        Resume(RESUME_EXTERNAL);
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       Resume
                  |L1.84|
;;;131    #ifdef WKUP_CALLBACK
;;;132        WKUP_Callback();
;;;133    #endif
;;;134      }
;;;135    #endif
;;;136      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;137    #if (IMR_MSK & ISTR_SUSP)
;;;138      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
000054  8860              LDRH     r0,[r4,#2]  ; wIstr
000056  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
000058  4008              ANDS     r0,r0,r1
00005a  0500              LSLS     r0,r0,#20
00005c  d50b              BPL      |L1.118|
;;;139      {
;;;140    
;;;141        /* check if SUSPEND is possible */
;;;142        if (fSuspendEnabled)
00005e  4816              LDR      r0,|L1.184|
000060  7800              LDRB     r0,[r0,#0]  ; fSuspendEnabled
000062  b110              CBZ      r0,|L1.106|
;;;143        {
;;;144          Suspend();
000064  f7fffffe          BL       Suspend
000068  e002              B        |L1.112|
                  |L1.106|
;;;145        }
;;;146        else
;;;147        {
;;;148          /* if not possible then resume after xx ms */
;;;149          Resume(RESUME_LATER);
00006a  2002              MOVS     r0,#2
00006c  f7fffffe          BL       Resume
                  |L1.112|
;;;150        }
;;;151        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;152        _SetISTR((uint16_t)CLR_SUSP);
000070  f24f70ff          MOV      r0,#0xf7ff
000074  6030              STR      r0,[r6,#0]
                  |L1.118|
;;;153    #ifdef SUSP_CALLBACK
;;;154        SUSP_Callback();
;;;155    #endif
;;;156      }
;;;157    #endif
;;;158      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;159    #if (IMR_MSK & ISTR_SOF)
;;;160      if (wIstr & ISTR_SOF & wInterrupt_Mask)
000076  8861              LDRH     r1,[r4,#2]  ; wIstr
000078  8828              LDRH     r0,[r5,#0]  ; wInterrupt_Mask
00007a  4001              ANDS     r1,r1,r0
00007c  0589              LSLS     r1,r1,#22
00007e  d505              BPL      |L1.140|
;;;161      {
;;;162        _SetISTR((uint16_t)CLR_SOF);
000080  f64f51ff          MOV      r1,#0xfdff
000084  6031              STR      r1,[r6,#0]
;;;163        bIntPackSOF++;
000086  7821              LDRB     r1,[r4,#0]  ; bIntPackSOF
000088  1c49              ADDS     r1,r1,#1
00008a  7021              STRB     r1,[r4,#0]
                  |L1.140|
;;;164    
;;;165    #ifdef SOF_CALLBACK
;;;166        SOF_Callback();
;;;167    #endif
;;;168      }
;;;169    #endif
;;;170      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;171    #if (IMR_MSK & ISTR_ESOF)
;;;172      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
00008c  8861              LDRH     r1,[r4,#2]  ; wIstr
00008e  4001              ANDS     r1,r1,r0
000090  05c8              LSLS     r0,r1,#23
000092  d507              BPL      |L1.164|
;;;173      {
;;;174        _SetISTR((uint16_t)CLR_ESOF);
000094  f64f60ff          MOV      r0,#0xfeff
000098  6030              STR      r0,[r6,#0]
;;;175        /* resume handling timing is made with ESOFs */
;;;176        Resume(RESUME_ESOF); /* request without change of the machine state */
00009a  e8bd4070          POP      {r4-r6,lr}
00009e  2007              MOVS     r0,#7
0000a0  f7ffbffe          B.W      Resume
                  |L1.164|
;;;177    
;;;178    #ifdef ESOF_CALLBACK
;;;179        ESOF_Callback();
;;;180    #endif
;;;181      }
;;;182    #endif
;;;183    } /* USB_Istr */
0000a4  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      0x40005c44
                  |L1.172|
                          DCD      ||.data||
                  |L1.176|
                          DCD      wInterrupt_Mask
                  |L1.180|
                          DCD      Device_Property
                  |L1.184|
                          DCD      fSuspendEnabled

                          AREA ||.data||, DATA, ALIGN=1

                  bIntPackSOF
000000  0000              DCB      0x00,0x00
                  wIstr
000002  0000              DCB      0x00,0x00

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      EP2_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_istr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_istr_c_e9471872____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REVSH|
#line 153
|__asm___10_usb_istr_c_e9471872____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____RRX|
#line 328
|__asm___10_usb_istr_c_e9471872____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
