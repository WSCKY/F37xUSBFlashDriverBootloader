; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\usb_bot.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\usb_bot.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\usb_bot.crf ..\src\usb_bot.c]
                          THUMB

                          AREA ||i.Bot_Abort||, CODE, READONLY, ALIGN=1

                  Bot_Abort PROC
;;;323    *******************************************************************************/
;;;324    void Bot_Abort(uint8_t Direction)
000000  b510              PUSH     {r4,lr}
;;;325    {
000002  b178              CBZ      r0,|L1.36|
;;;326      switch (Direction)
;;;327      {
;;;328        case DIR_IN :
;;;329          SetEPTxStatus(ENDP1, EP_TX_STALL);
;;;330          break;
;;;331        case DIR_OUT :
;;;332          SetEPRxStatus(ENDP2, EP_RX_STALL);
000004  f44f5480          MOV      r4,#0x1000
000008  2801              CMP      r0,#1                 ;326
00000a  d005              BEQ      |L1.24|
00000c  2802              CMP      r0,#2                 ;326
00000e  d10f              BNE      |L1.48|
;;;333          break;
;;;334        case BOTH_DIR :
;;;335          SetEPTxStatus(ENDP1, EP_TX_STALL);
000010  2110              MOVS     r1,#0x10
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       SetEPTxStatus
                  |L1.24|
000018  4621              MOV      r1,r4                 ;332
00001a  e8bd4010          POP      {r4,lr}               ;332
00001e  2002              MOVS     r0,#2                 ;332
000020  f7ffbffe          B.W      SetEPRxStatus
                  |L1.36|
000024  2110              MOVS     r1,#0x10              ;329
000026  e8bd4010          POP      {r4,lr}               ;329
00002a  2001              MOVS     r0,#1                 ;329
00002c  f7ffbffe          B.W      SetEPTxStatus
                  |L1.48|
;;;336          SetEPRxStatus(ENDP2, EP_RX_STALL);
;;;337          break;
;;;338        default:
;;;339          break;
;;;340      }
;;;341    }
000030  bd10              POP      {r4,pc}
;;;342    
                          ENDP


                          AREA ||i.CBW_Decode||, CODE, READONLY, ALIGN=2

                  CBW_Decode PROC
;;;137    *******************************************************************************/
;;;138    void CBW_Decode(void)
000000  b570              PUSH     {r4-r6,lr}
;;;139    {
;;;140      uint32_t Counter;
;;;141    
;;;142      for (Counter = 0; Counter < Data_Len; Counter++)
000002  4b61              LDR      r3,|L2.392|
;;;143      {
;;;144        *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
000004  4c61              LDR      r4,|L2.396|
000006  2000              MOVS     r0,#0                 ;142
000008  8859              LDRH     r1,[r3,#2]            ;142  ; Data_Len
00000a  f1a40240          SUB      r2,r4,#0x40
00000e  e002              B        |L2.22|
                  |L2.16|
000010  5c15              LDRB     r5,[r2,r0]
000012  5425              STRB     r5,[r4,r0]
000014  1c40              ADDS     r0,r0,#1
                  |L2.22|
000016  460d              MOV      r5,r1
000018  4288              CMP      r0,r1                 ;142
00001a  d3f9              BCC      |L2.16|
;;;145      }
;;;146      CSW.dTag = CBW.dTag;
00001c  485b              LDR      r0,|L2.396|
00001e  6862              LDR      r2,[r4,#4]  ; CBW
000020  3020              ADDS     r0,r0,#0x20
;;;147      CSW.dDataResidue = CBW.dDataLength;
;;;148      if (Data_Len != BOT_CBW_PACKET_LENGTH)
000022  2d1f              CMP      r5,#0x1f
000024  6042              STR      r2,[r0,#4]            ;147  ; CSW
000026  68a2              LDR      r2,[r4,#8]            ;147  ; CBW
000028  6082              STR      r2,[r0,#8]  ; CSW
00002a  d007              BEQ      |L2.60|
;;;149      {
;;;150        Bot_Abort(BOTH_DIR);
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       Bot_Abort
;;;151        /* reset the CBW.dSignature to disable the clear feature until receiving a Mass storage reset*/
;;;152        CBW.dSignature = 0;
000032  2000              MOVS     r0,#0
;;;153        Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, PARAMETER_LIST_LENGTH_ERROR);
000034  6020              STR      r0,[r4,#0]  ; CBW
000036  7b60              LDRB     r0,[r4,#0xd]  ; CBW
000038  221a              MOVS     r2,#0x1a
;;;154        Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;155        return;
00003a  e021              B        |L2.128|
                  |L2.60|
;;;156      }
;;;157    
;;;158      if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
00003c  7be1              LDRB     r1,[r4,#0xf]  ; CBW
00003e  2928              CMP      r1,#0x28
000040  d001              BEQ      |L2.70|
000042  292a              CMP      r1,#0x2a
000044  d10a              BNE      |L2.92|
                  |L2.70|
;;;159      {
;;;160        /* Calculate Logical Block Address */
;;;161        SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
000046  f8d40011          LDR      r0,[r4,#0x11]  ; CBW
00004a  7d22              LDRB     r2,[r4,#0x14]  ; CBW
00004c  ba00              REV      r0,r0
00004e  f02000ff          BIC      r0,r0,#0xff
000052  4310              ORRS     r0,r0,r2
;;;162        /* Calculate the Number of Blocks to transfer */
;;;163        SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
000054  6058              STR      r0,[r3,#4]  ; SCSI_LBA
000056  8ae0              LDRH     r0,[r4,#0x16]  ; CBW
000058  ba40              REV16    r0,r0
00005a  6098              STR      r0,[r3,#8]  ; SCSI_BlkLen
                  |L2.92|
;;;164      }
;;;165    
;;;166      if (CBW.dSignature == BOT_CBW_SIGNATURE)
00005c  4a4c              LDR      r2,|L2.400|
00005e  6820              LDR      r0,[r4,#0]  ; CBW
000060  4290              CMP      r0,r2
000062  d152              BNE      |L2.266|
;;;167      {
;;;168        /* Valid CBW */
;;;169        if ((CBW.bLUN > Max_Lun) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
000064  4a4b              LDR      r2,|L2.404|
000066  7b60              LDRB     r0,[r4,#0xd]  ; CBW
000068  6812              LDR      r2,[r2,#0]  ; Max_Lun
00006a  4290              CMP      r0,r2
00006c  d803              BHI      |L2.118|
00006e  7ba2              LDRB     r2,[r4,#0xe]  ; CBW
000070  b10a              CBZ      r2,|L2.118|
000072  2a10              CMP      r2,#0x10
000074  d90d              BLS      |L2.146|
                  |L2.118|
;;;170        {
;;;171          Bot_Abort(BOTH_DIR);
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       Bot_Abort
;;;172          Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
00007c  7b60              LDRB     r0,[r4,#0xd]  ; CBW
00007e  2224              MOVS     r2,#0x24
                  |L2.128|
;;;173          Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;174        }
;;;175        else
;;;176        {
;;;177          switch (CBW.CB[0])
;;;178          {
;;;179            case SCSI_REQUEST_SENSE:
;;;180              SCSI_RequestSense_Cmd (CBW.bLUN);
;;;181              break;
;;;182            case SCSI_INQUIRY:
;;;183              SCSI_Inquiry_Cmd(CBW.bLUN);
;;;184              break;
;;;185            case SCSI_START_STOP_UNIT:
;;;186              SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
;;;187              break;
;;;188            case SCSI_ALLOW_MEDIUM_REMOVAL:
;;;189              SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
;;;190              break;
;;;191            case SCSI_MODE_SENSE6:
;;;192              SCSI_ModeSense6_Cmd (CBW.bLUN);
;;;193              break;
;;;194            case SCSI_MODE_SENSE10:
;;;195              SCSI_ModeSense10_Cmd (CBW.bLUN);
;;;196              break;
;;;197            case SCSI_READ_FORMAT_CAPACITIES:
;;;198              SCSI_ReadFormatCapacity_Cmd(CBW.bLUN);
;;;199              break;
;;;200            case SCSI_READ_CAPACITY10:
;;;201              SCSI_ReadCapacity10_Cmd(CBW.bLUN);
;;;202              break;
;;;203            case SCSI_TEST_UNIT_READY:
;;;204              SCSI_TestUnitReady_Cmd(CBW.bLUN);
;;;205              break;
;;;206            case SCSI_READ10:
;;;207              SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
;;;208              break;
;;;209            case SCSI_WRITE10:
;;;210              SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
;;;211              break;
;;;212            case SCSI_VERIFY10:
;;;213              SCSI_Verify10_Cmd(CBW.bLUN);
;;;214              break;
;;;215            case SCSI_FORMAT_UNIT:
;;;216              SCSI_Format_Cmd(CBW.bLUN);
;;;217              break;
;;;218              /*Unsupported command*/
;;;219            case SCSI_MODE_SELECT10:
;;;220              SCSI_Mode_Select10_Cmd(CBW.bLUN);
;;;221              break;
;;;222            case SCSI_MODE_SELECT6:
;;;223              SCSI_Mode_Select6_Cmd(CBW.bLUN);
;;;224              break;
;;;225    
;;;226            case SCSI_SEND_DIAGNOSTIC:
;;;227              SCSI_Send_Diagnostic_Cmd(CBW.bLUN);
;;;228              break;
;;;229            case SCSI_READ6:
;;;230              SCSI_Read6_Cmd(CBW.bLUN);
;;;231              break;
;;;232            case SCSI_READ12:
;;;233              SCSI_Read12_Cmd(CBW.bLUN);
;;;234              break;
;;;235            case SCSI_READ16:
;;;236              SCSI_Read16_Cmd(CBW.bLUN);
;;;237              break;
;;;238            case SCSI_READ_CAPACITY16:
;;;239              SCSI_READ_CAPACITY16_Cmd(CBW.bLUN);
;;;240              break;
;;;241            case SCSI_WRITE6:
;;;242              SCSI_Write6_Cmd(CBW.bLUN);
;;;243              break;
;;;244            case SCSI_WRITE12:
;;;245              SCSI_Write12_Cmd(CBW.bLUN);
;;;246              break;
;;;247            case SCSI_WRITE16:
;;;248              SCSI_Write16_Cmd(CBW.bLUN);
;;;249              break;
;;;250            case SCSI_VERIFY12:
;;;251              SCSI_Verify12_Cmd(CBW.bLUN);
;;;252              break;
;;;253            case SCSI_VERIFY16:
;;;254              SCSI_Verify16_Cmd(CBW.bLUN);
;;;255              break;
;;;256    
;;;257            default:
;;;258            {
;;;259              Bot_Abort(BOTH_DIR);
;;;260              Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
;;;261              Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;262            }
;;;263          }
;;;264        }
;;;265      }
;;;266      else
;;;267      {
;;;268        /* Invalid CBW */
;;;269        Bot_Abort(BOTH_DIR);
;;;270        Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
000080  2105              MOVS     r1,#5
000082  f7fffffe          BL       Set_Scsi_Sense_Data
;;;271        Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
000086  e8bd4070          POP      {r4-r6,lr}
00008a  2100              MOVS     r1,#0
00008c  2001              MOVS     r0,#1
00008e  f7ffbffe          B.W      Set_CSW
                  |L2.146|
000092  2925              CMP      r1,#0x25              ;177
000094  d058              BEQ      |L2.328|
000096  dc1a              BGT      |L2.206|
000098  2915              CMP      r1,#0x15              ;177
00009a  d071              BEQ      |L2.384|
00009c  dc0d              BGT      |L2.186|
00009e  2908              CMP      r1,#8                 ;177
0000a0  d06e              BEQ      |L2.384|
0000a2  dc05              BGT      |L2.176|
0000a4  b3b9              CBZ      r1,|L2.278|
0000a6  2903              CMP      r1,#3                 ;177
0000a8  d036              BEQ      |L2.280|
0000aa  2904              CMP      r1,#4                 ;177
0000ac  d12d              BNE      |L2.266|
0000ae  e063              B        |L2.376|
                  |L2.176|
0000b0  290a              CMP      r1,#0xa               ;177
0000b2  d065              BEQ      |L2.384|
0000b4  2912              CMP      r1,#0x12              ;177
0000b6  d128              BNE      |L2.266|
0000b8  e032              B        |L2.288|
                  |L2.186|
0000ba  391a              SUBS     r1,r1,#0x1a           ;177
0000bc  290a              CMP      r1,#0xa               ;177
0000be  d224              BCS      |L2.266|
0000c0  e8dff001          TBB      [pc,r1]               ;177
0000c4  3632235e          DCB      0x36,0x32,0x23,0x5e
0000c8  32232323          DCB      0x32,0x23,0x23,0x23
0000cc  233e              DCB      0x23,0x3e
                  |L2.206|
0000ce  298a              CMP      r1,#0x8a              ;177
0000d0  d056              BEQ      |L2.384|
0000d2  dc0e              BGT      |L2.242|
0000d4  2955              CMP      r1,#0x55              ;177
0000d6  d053              BEQ      |L2.384|
0000d8  dc06              BGT      |L2.232|
0000da  2928              CMP      r1,#0x28              ;177
0000dc  d03c              BEQ      |L2.344|
0000de  292a              CMP      r1,#0x2a              ;177
0000e0  d040              BEQ      |L2.356|
0000e2  292f              CMP      r1,#0x2f              ;177
0000e4  d111              BNE      |L2.266|
0000e6  e043              B        |L2.368|
                  |L2.232|
0000e8  295a              CMP      r1,#0x5a              ;177
0000ea  d025              BEQ      |L2.312|
0000ec  2988              CMP      r1,#0x88              ;177
0000ee  d10c              BNE      |L2.266|
0000f0  e046              B        |L2.384|
                  |L2.242|
0000f2  29a8              CMP      r1,#0xa8              ;177
0000f4  d044              BEQ      |L2.384|
0000f6  dc04              BGT      |L2.258|
0000f8  298f              CMP      r1,#0x8f              ;177
0000fa  d041              BEQ      |L2.384|
0000fc  299e              CMP      r1,#0x9e              ;177
0000fe  d104              BNE      |L2.266|
000100  e03e              B        |L2.384|
                  |L2.258|
000102  29aa              CMP      r1,#0xaa              ;177
000104  d03c              BEQ      |L2.384|
000106  29af              CMP      r1,#0xaf              ;177
000108  d03a              BEQ      |L2.384|
                  |L2.266|
00010a  2002              MOVS     r0,#2                 ;269
00010c  f7fffffe          BL       Bot_Abort
000110  7b60              LDRB     r0,[r4,#0xd]          ;270  ; CBW
000112  2220              MOVS     r2,#0x20              ;270
000114  e7b4              B        |L2.128|
                  |L2.278|
000116  e01b              B        |L2.336|
                  |L2.280|
000118  e8bd4070          POP      {r4-r6,lr}            ;180
00011c  f7ffbffe          B.W      SCSI_RequestSense_Cmd
                  |L2.288|
000120  e8bd4070          POP      {r4-r6,lr}            ;183
000124  f7ffbffe          B.W      SCSI_Inquiry_Cmd
000128  e8bd4070          POP      {r4-r6,lr}            ;189
00012c  f7ffbffe          B.W      SCSI_Start_Stop_Unit_Cmd
000130  e8bd4070          POP      {r4-r6,lr}            ;192
000134  f7ffbffe          B.W      SCSI_ModeSense6_Cmd
                  |L2.312|
000138  e8bd4070          POP      {r4-r6,lr}            ;195
00013c  f7ffbffe          B.W      SCSI_ModeSense10_Cmd
000140  e8bd4070          POP      {r4-r6,lr}            ;198
000144  f7ffbffe          B.W      SCSI_ReadFormatCapacity_Cmd
                  |L2.328|
000148  e8bd4070          POP      {r4-r6,lr}            ;201
00014c  f7ffbffe          B.W      SCSI_ReadCapacity10_Cmd
                  |L2.336|
000150  e8bd4070          POP      {r4-r6,lr}            ;204
000154  f7ffbffe          B.W      SCSI_TestUnitReady_Cmd
                  |L2.344|
000158  e9d31201          LDRD     r1,r2,[r3,#4]         ;204
00015c  e8bd4070          POP      {r4-r6,lr}            ;207
000160  f7ffbffe          B.W      SCSI_Read10_Cmd
                  |L2.356|
000164  e9d31201          LDRD     r1,r2,[r3,#4]         ;207
000168  e8bd4070          POP      {r4-r6,lr}            ;210
00016c  f7ffbffe          B.W      SCSI_Write10_Cmd
                  |L2.368|
000170  e8bd4070          POP      {r4-r6,lr}            ;213
000174  f7ffbffe          B.W      SCSI_Verify10_Cmd
                  |L2.376|
000178  e8bd4070          POP      {r4-r6,lr}            ;216
00017c  f7ffbffe          B.W      SCSI_Format_Cmd
                  |L2.384|
000180  e8bd4070          POP      {r4-r6,lr}            ;254
000184  f7ffbffe          B.W      SCSI_Invalid_Cmd
;;;272      }
;;;273    }
;;;274    
                          ENDP

                  |L2.392|
                          DCD      ||.data||
                  |L2.396|
                          DCD      ||.bss||+0x40
                  |L2.400|
                          DCD      0x43425355
                  |L2.404|
                          DCD      Max_Lun

                          AREA ||i.Mass_Storage_In||, CODE, READONLY, ALIGN=2

                  Mass_Storage_In PROC
;;;61     *******************************************************************************/
;;;62     void Mass_Storage_In (void)
000000  4b17              LDR      r3,|L3.96|
;;;63     {
000002  b510              PUSH     {r4,lr}
;;;64       switch (Bot_State)
000004  7818              LDRB     r0,[r3,#0]  ; Bot_State
000006  2802              CMP      r0,#2
000008  d019              BEQ      |L3.62|
;;;65       {
;;;66         case BOT_CSW_Send:
;;;67         case BOT_ERROR:
;;;68           Bot_State = BOT_IDLE;
;;;69           SetEPRxStatus(ENDP2, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
00000a  f44f5440          MOV      r4,#0x3000
00000e  2803              CMP      r0,#3                 ;64
000010  d020              BEQ      |L3.84|
000012  2804              CMP      r0,#4                 ;64
000014  d001              BEQ      |L3.26|
000016  2805              CMP      r0,#5                 ;64
000018  d121              BNE      |L3.94|
                  |L3.26|
00001a  2000              MOVS     r0,#0                 ;68
00001c  7018              STRB     r0,[r3,#0]            ;68
00001e  4621              MOV      r1,r4
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       SetEPRxStatus
;;;70           if (GetEPRxStatus(EP2_OUT) == EP_RX_STALL)
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       GetEPRxStatus
00002c  f5b05f80          CMP      r0,#0x1000
000030  d115              BNE      |L3.94|
                  |L3.50|
;;;71           {
;;;72             SetEPRxStatus(EP2_OUT, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
000032  4621              MOV      r1,r4
000034  e8bd4010          POP      {r4,lr}
000038  2002              MOVS     r0,#2
00003a  f7ffbffe          B.W      SetEPRxStatus
                  |L3.62|
;;;73           }
;;;74           break;
;;;75         case BOT_DATA_IN:
;;;76           switch (CBW.CB[0])
00003e  4809              LDR      r0,|L3.100|
000040  7bc1              LDRB     r1,[r0,#0xf]  ; CBW
000042  2928              CMP      r1,#0x28
000044  d10b              BNE      |L3.94|
;;;77           {
;;;78             case SCSI_READ10:
;;;79               SCSI_Read10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
000046  e9d31201          LDRD     r1,r2,[r3,#4]
00004a  7b40              LDRB     r0,[r0,#0xd]  ; CBW
00004c  e8bd4010          POP      {r4,lr}
000050  f7ffbffe          B.W      SCSI_Read10_Cmd
                  |L3.84|
;;;80               break;
;;;81           }
;;;82           break;
;;;83         case BOT_DATA_IN_LAST:
;;;84           Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
000054  2101              MOVS     r1,#1
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       Set_CSW
;;;85     
;;;86           SetEPRxStatus(ENDP2, EP_RX_VALID);
;;;87           break;
00005c  e7e9              B        |L3.50|
                  |L3.94|
;;;88         default:
;;;89           break;
;;;90       }
;;;91     }
00005e  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  |L3.96|
                          DCD      ||.data||
                  |L3.100|
                          DCD      ||.bss||+0x40

                          AREA ||i.Mass_Storage_Out||, CODE, READONLY, ALIGN=2

                  Mass_Storage_Out PROC
;;;99     *******************************************************************************/
;;;100    void Mass_Storage_Out (void)
000000  b570              PUSH     {r4-r6,lr}
;;;101    {
;;;102      uint8_t CMD;
;;;103      CMD = CBW.CB[0];
000002  4c15              LDR      r4,|L4.88|
;;;104    
;;;105      Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);
000004  2002              MOVS     r0,#2
000006  f1a40140          SUB      r1,r4,#0x40
00000a  7be5              LDRB     r5,[r4,#0xf]          ;103  ; CBW
00000c  f7fffffe          BL       USB_SIL_Read
000010  4912              LDR      r1,|L4.92|
000012  8048              STRH     r0,[r1,#2]
;;;106    
;;;107      switch (Bot_State)
000014  7808              LDRB     r0,[r1,#0]  ; Bot_State
000016  b118              CBZ      r0,|L4.32|
000018  2801              CMP      r0,#1
00001a  d005              BEQ      |L4.40|
;;;108      {
;;;109        case BOT_IDLE:
;;;110          CBW_Decode();
;;;111          break;
;;;112        case BOT_DATA_OUT:
;;;113          if (CMD == SCSI_WRITE10)
;;;114          {
;;;115            SCSI_Write10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
;;;116            break;
;;;117          }
;;;118          Bot_Abort(DIR_OUT);
;;;119          Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
;;;120          Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
;;;121          break;
;;;122        default:
;;;123          Bot_Abort(BOTH_DIR);
00001c  2002              MOVS     r0,#2
;;;124          Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
;;;125          Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
;;;126          break;
00001e  e006              B        |L4.46|
                  |L4.32|
000020  e8bd4070          POP      {r4-r6,lr}            ;110
000024  f7ffbffe          B.W      CBW_Decode
                  |L4.40|
000028  2d2a              CMP      r5,#0x2a              ;113
00002a  d00d              BEQ      |L4.72|
00002c  2001              MOVS     r0,#1                 ;118
                  |L4.46|
00002e  f7fffffe          BL       Bot_Abort
000032  7b60              LDRB     r0,[r4,#0xd]          ;124  ; CBW
000034  2224              MOVS     r2,#0x24              ;124
000036  2105              MOVS     r1,#5                 ;124
000038  f7fffffe          BL       Set_Scsi_Sense_Data
00003c  e8bd4070          POP      {r4-r6,lr}            ;125
000040  2100              MOVS     r1,#0                 ;125
000042  2002              MOVS     r0,#2                 ;125
000044  f7ffbffe          B.W      Set_CSW
                  |L4.72|
000048  688a              LDR      r2,[r1,#8]            ;115  ; SCSI_BlkLen
00004a  7b60              LDRB     r0,[r4,#0xd]          ;115  ; CBW
00004c  6849              LDR      r1,[r1,#4]            ;115  ; SCSI_LBA
00004e  e8bd4070          POP      {r4-r6,lr}            ;115
000052  f7ffbffe          B.W      SCSI_Write10_Cmd
;;;127      }
;;;128    }
;;;129    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      ||.bss||+0x40
                  |L4.92|
                          DCD      ||.data||

                          AREA ||i.Set_CSW||, CODE, READONLY, ALIGN=2

                  Set_CSW PROC
;;;301    *******************************************************************************/
;;;302    void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
000000  b510              PUSH     {r4,lr}
;;;303    {
000002  460c              MOV      r4,r1
;;;304      CSW.dSignature = BOT_CSW_SIGNATURE;
000004  490b              LDR      r1,|L5.52|
000006  4a0a              LDR      r2,|L5.48|
;;;305      CSW.bStatus = CSW_Status;
000008  600a              STR      r2,[r1,#0]  ; CSW
00000a  7308              STRB     r0,[r1,#0xc]
;;;306    
;;;307      USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
00000c  220d              MOVS     r2,#0xd
00000e  2081              MOVS     r0,#0x81
000010  f7fffffe          BL       USB_SIL_Write
;;;308    
;;;309      Bot_State = BOT_ERROR;
000014  4808              LDR      r0,|L5.56|
000016  2105              MOVS     r1,#5
;;;310      if (Send_Permission)
000018  2c00              CMP      r4,#0
00001a  7001              STRB     r1,[r0,#0]            ;309
00001c  d007              BEQ      |L5.46|
;;;311      {
;;;312        Bot_State = BOT_CSW_Send;
00001e  2104              MOVS     r1,#4
000020  7001              STRB     r1,[r0,#0]
;;;313        SetEPTxStatus(ENDP1, EP_TX_VALID);
000022  2130              MOVS     r1,#0x30
000024  e8bd4010          POP      {r4,lr}
000028  2001              MOVS     r0,#1
00002a  f7ffbffe          B.W      SetEPTxStatus
                  |L5.46|
;;;314      }
;;;315    }
00002e  bd10              POP      {r4,pc}
;;;316    
                          ENDP

                  |L5.48|
                          DCD      0x53425355
                  |L5.52|
                          DCD      ||.bss||+0x60
                  |L5.56|
                          DCD      ||.data||

                          AREA ||i.Transfer_Data_Request||, CODE, READONLY, ALIGN=2

                  Transfer_Data_Request PROC
;;;282    *******************************************************************************/
;;;283    void Transfer_Data_Request(uint8_t* Data_Pointer, uint16_t Data_Len)
000000  b510              PUSH     {r4,lr}
;;;284    {
000002  460c              MOV      r4,r1
;;;285      USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  2081              MOVS     r0,#0x81
00000a  f7fffffe          BL       USB_SIL_Write
;;;286    
;;;287        SetEPTxStatus(ENDP1, EP_TX_VALID);
00000e  2130              MOVS     r1,#0x30
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       SetEPTxStatus
;;;288        
;;;289      Bot_State = BOT_DATA_IN_LAST;
000016  4905              LDR      r1,|L6.44|
000018  2003              MOVS     r0,#3
00001a  7008              STRB     r0,[r1,#0]
;;;290      CSW.dDataResidue -= Data_Len;
00001c  4804              LDR      r0,|L6.48|
00001e  6881              LDR      r1,[r0,#8]  ; CSW
000020  1b09              SUBS     r1,r1,r4
;;;291      CSW.bStatus = CSW_CMD_PASSED;
000022  6081              STR      r1,[r0,#8]  ; CSW
000024  2100              MOVS     r1,#0
000026  7301              STRB     r1,[r0,#0xc]
;;;292    }
000028  bd10              POP      {r4,pc}
;;;293    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      ||.data||
                  |L6.48|
                          DCD      ||.bss||+0x60

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Bulk_Data_Buff
                          %        64
                  ||CBW||
                          %        32
                  ||CSW||
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Bot_State
000000  0000              DCB      0x00,0x00
                  Data_Len
000002  0000              DCB      0x00,0x00
                  SCSI_LBA
                          DCD      0x00000000
                  SCSI_BlkLen
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_bot.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_bot_c_ca1b73ef____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_bot_c_ca1b73ef____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_bot_c_ca1b73ef____REVSH|
#line 153
|__asm___9_usb_bot_c_ca1b73ef____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_bot_c_ca1b73ef____RRX|
#line 328
|__asm___9_usb_bot_c_ca1b73ef____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
