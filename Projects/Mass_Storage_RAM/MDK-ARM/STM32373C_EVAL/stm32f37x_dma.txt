; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32f37x_dma.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32f37x_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32f37x_dma.crf ..\..\..\Libraries\STM32F37x_StdPeriph_Driver\src\stm32f37x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;650      */
;;;651    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  00c1              LSLS     r1,r0,#3
;;;652    {
000002  d502              BPL      |L1.10|
;;;653      /* Check the parameters */
;;;654      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;655    
;;;656    /* Calculate the used DMAy */
;;;657      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;658      {
;;;659        /* Clear the selected DMAy flags */
;;;660        DMA2->IFCR = DMAy_FLAG;
000004  4902              LDR      r1,|L1.16|
000006  6008              STR      r0,[r1,#0]
;;;661      }
;;;662      else
;;;663      {
;;;664        /* Clear the selected DMAy flags */
;;;665        DMA1->IFCR = DMAy_FLAG;
;;;666      }
;;;667    }
000008  4770              BX       lr
                  |L1.10|
00000a  4902              LDR      r1,|L1.20|
00000c  6048              STR      r0,[r1,#4]            ;665
00000e  4770              BX       lr
;;;668    
                          ENDP

                  |L1.16|
                          DCD      0x40020404
                  |L1.20|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;823      */
;;;824    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  00c1              LSLS     r1,r0,#3
;;;825    {
000002  d502              BPL      |L2.10|
;;;826      /* Check the parameters */
;;;827      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;828    
;;;829      /* Calculate the used DMAy */
;;;830      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;831      {
;;;832        /* Clear the selected DMAy interrupt pending bits */
;;;833        DMA2->IFCR = DMAy_IT;
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;834      }
;;;835      else
;;;836      {
;;;837        /* Clear the selected DMAy interrupt pending bits */
;;;838        DMA1->IFCR = DMAy_IT;
;;;839      }
;;;840    }
000008  4770              BX       lr
                  |L2.10|
00000a  4902              LDR      r1,|L2.20|
00000c  6048              STR      r0,[r1,#4]            ;838
00000e  4770              BX       lr
;;;841    
                          ENDP

                  |L2.16|
                          DCD      0x40020404
                  |L2.20|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;324      */
;;;325    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;326    {
;;;327      /* Check the parameters */
;;;328      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;329      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;330    
;;;331      if (NewState != DISABLE)
;;;332      {
;;;333        /* Enable the selected DMAy Channelx */
;;;334        DMAy_Channelx->CCR |= DMA_CCR_EN;
;;;335      }
;;;336      else
;;;337      {
;;;338        /* Disable the selected DMAy Channelx */
;;;339        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;334
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  f64f72fe          MOV      r2,#0xfffe
000010  4011              ANDS     r1,r1,r2
                  |L3.18|
000012  6001              STR      r1,[r0,#0]            ;334
;;;340      }
;;;341    }
000014  4770              BX       lr
;;;342    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;137      */
;;;138    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;139    {
;;;140      /* Check the parameters */
;;;141      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;142    
;;;143      /* Disable the selected DMAy Channelx */
;;;144      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;145    
;;;146      /* Reset DMAy Channelx control register */
;;;147      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;148    
;;;149      /* Reset DMAy Channelx remaining bytes register */
;;;150      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;151    
;;;152      /* Reset DMAy Channelx peripheral address register */
;;;153      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;154    
;;;155      /* Reset DMAy Channelx memory address register */
;;;156      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;157    
;;;158      if (DMAy_Channelx == DMA1_Channel1)
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;161        DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
000014  4931              LDR      r1,|L4.220|
000016  4a31              LDR      r2,|L4.220|
000018  3908              SUBS     r1,r1,#8
00001a  4290              CMP      r0,r2                 ;158
00001c  d103              BNE      |L4.38|
00001e  6848              LDR      r0,[r1,#4]
000020  f040000f          ORR      r0,r0,#0xf
000024  e006              B        |L4.52|
                  |L4.38|
;;;162      }
;;;163      else if (DMAy_Channelx == DMA1_Channel2)
000026  4a2d              LDR      r2,|L4.220|
000028  3214              ADDS     r2,r2,#0x14
00002a  4290              CMP      r0,r2
00002c  d104              BNE      |L4.56|
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;166        DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
00002e  6848              LDR      r0,[r1,#4]
000030  f04000f0          ORR      r0,r0,#0xf0
                  |L4.52|
000034  6048              STR      r0,[r1,#4]            ;161
;;;167      }
;;;168      else if (DMAy_Channelx == DMA1_Channel3)
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;171        DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
;;;172      }
;;;173      else if (DMAy_Channelx == DMA1_Channel4)
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;176        DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
;;;177      }
;;;178      else if (DMAy_Channelx == DMA1_Channel5)
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;181        DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
;;;182      }
;;;183      else if (DMAy_Channelx == DMA1_Channel6)
;;;184      {
;;;185        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;186        DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
;;;187      }
;;;188      else if (DMAy_Channelx == DMA1_Channel7)
;;;189      {
;;;190        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;191        DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
;;;192      }
;;;193      else if (DMAy_Channelx == DMA2_Channel1)
;;;194      {
;;;195        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;196        DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
;;;197      }
;;;198      else if (DMAy_Channelx == DMA2_Channel2)
;;;199      {
;;;200        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;201        DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
;;;202      }
;;;203      else if (DMAy_Channelx == DMA2_Channel3)
;;;204      {
;;;205        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;206        DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
;;;207      }
;;;208      else if (DMAy_Channelx == DMA2_Channel4)
;;;209      {
;;;210        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;211        DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
;;;212      }
;;;213      else
;;;214      { 
;;;215        if (DMAy_Channelx == DMA2_Channel5)
;;;216        {
;;;217          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;218          DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
;;;219        }
;;;220      }
;;;221    }
000036  4770              BX       lr
                  |L4.56|
000038  4a28              LDR      r2,|L4.220|
00003a  3228              ADDS     r2,r2,#0x28           ;168
00003c  4290              CMP      r0,r2                 ;168
00003e  d103              BNE      |L4.72|
000040  6848              LDR      r0,[r1,#4]            ;171
000042  f4406070          ORR      r0,r0,#0xf00          ;171
000046  e7f5              B        |L4.52|
                  |L4.72|
000048  4a24              LDR      r2,|L4.220|
00004a  323c              ADDS     r2,r2,#0x3c           ;173
00004c  4290              CMP      r0,r2                 ;173
00004e  d103              BNE      |L4.88|
000050  6848              LDR      r0,[r1,#4]            ;176
000052  f4404070          ORR      r0,r0,#0xf000         ;176
000056  e7ed              B        |L4.52|
                  |L4.88|
000058  4a20              LDR      r2,|L4.220|
00005a  3250              ADDS     r2,r2,#0x50           ;178
00005c  4290              CMP      r0,r2                 ;178
00005e  d103              BNE      |L4.104|
000060  6848              LDR      r0,[r1,#4]            ;181
000062  f4402070          ORR      r0,r0,#0xf0000        ;181
000066  e7e5              B        |L4.52|
                  |L4.104|
000068  4a1c              LDR      r2,|L4.220|
00006a  3264              ADDS     r2,r2,#0x64           ;183
00006c  4290              CMP      r0,r2                 ;183
00006e  d103              BNE      |L4.120|
000070  6848              LDR      r0,[r1,#4]            ;186
000072  f4400070          ORR      r0,r0,#0xf00000       ;186
000076  e7dd              B        |L4.52|
                  |L4.120|
000078  4a18              LDR      r2,|L4.220|
00007a  3278              ADDS     r2,r2,#0x78           ;188
00007c  4290              CMP      r0,r2                 ;188
00007e  d103              BNE      |L4.136|
000080  6848              LDR      r0,[r1,#4]            ;191
000082  f0406070          ORR      r0,r0,#0xf000000      ;191
000086  e7d5              B        |L4.52|
                  |L4.136|
000088  4a15              LDR      r2,|L4.224|
00008a  1f11              SUBS     r1,r2,#4              ;196
00008c  4290              CMP      r0,r2                 ;193
00008e  d103              BNE      |L4.152|
000090  6808              LDR      r0,[r1,#0]            ;196
000092  f040000f          ORR      r0,r0,#0xf            ;196
000096  e006              B        |L4.166|
                  |L4.152|
000098  4a11              LDR      r2,|L4.224|
00009a  3214              ADDS     r2,r2,#0x14           ;198
00009c  4290              CMP      r0,r2                 ;198
00009e  d104              BNE      |L4.170|
0000a0  6808              LDR      r0,[r1,#0]            ;201
0000a2  f04000f0          ORR      r0,r0,#0xf0           ;201
                  |L4.166|
0000a6  6008              STR      r0,[r1,#0]            ;196
                  |L4.168|
0000a8  4770              BX       lr
                  |L4.170|
0000aa  4a0d              LDR      r2,|L4.224|
0000ac  3228              ADDS     r2,r2,#0x28           ;203
0000ae  4290              CMP      r0,r2                 ;203
0000b0  d103              BNE      |L4.186|
0000b2  6808              LDR      r0,[r1,#0]            ;206
0000b4  f4406070          ORR      r0,r0,#0xf00          ;206
0000b8  e7f5              B        |L4.166|
                  |L4.186|
0000ba  4a09              LDR      r2,|L4.224|
0000bc  323c              ADDS     r2,r2,#0x3c           ;208
0000be  4290              CMP      r0,r2                 ;208
0000c0  d103              BNE      |L4.202|
0000c2  6808              LDR      r0,[r1,#0]            ;211
0000c4  f4404070          ORR      r0,r0,#0xf000         ;211
0000c8  e7ed              B        |L4.166|
                  |L4.202|
0000ca  4a05              LDR      r2,|L4.224|
0000cc  3250              ADDS     r2,r2,#0x50           ;215
0000ce  4290              CMP      r0,r2                 ;215
0000d0  d1ea              BNE      |L4.168|
0000d2  6808              LDR      r0,[r1,#0]            ;218
0000d4  f4402070          ORR      r0,r0,#0xf0000        ;218
0000d8  e7e5              B        |L4.166|
;;;222    
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x40020008
                  |L4.224|
                          DCD      0x40020408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;401      */
;;;402    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;403    {
;;;404      /* Check the parameters */
;;;405      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;406      /* Return the number of remaining data units for DMAy Channelx */
;;;407      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;408    }
000004  4770              BX       lr
;;;409    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;555      */
;;;556    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  4601              MOV      r1,r0
;;;557    {
;;;558      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L6.12|
;;;559      uint32_t tmpreg = 0;
;;;560    
;;;561      /* Check the parameters */
;;;562      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;563    
;;;564      /* Calculate the used DMAy */
;;;565      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;566      {
;;;567        /* Get DMA2 ISR register value */
;;;568        tmpreg = DMA2->ISR ;
000008  4a03              LDR      r2,|L6.24|
00000a  e000              B        |L6.14|
                  |L6.12|
;;;569      }
;;;570      else
;;;571      {
;;;572        /* Get DMA1 ISR register value */
;;;573        tmpreg = DMA1->ISR ;
00000c  4a03              LDR      r2,|L6.28|
                  |L6.14|
00000e  6812              LDR      r2,[r2,#0]
;;;574      }
;;;575    
;;;576      /* Check the status of the specified DMAy flag */
;;;577      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L6.22|
;;;578      {
;;;579        /* DMAy_FLAG is set */
;;;580        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;581      }
;;;582      else
;;;583      {
;;;584        /* DMAy_FLAG is reset */
;;;585        bitstatus = RESET;
;;;586      }
;;;587      
;;;588      /* Return the DMAy_FLAG status */
;;;589      return  bitstatus;
;;;590    }
000016  4770              BX       lr
;;;591    
                          ENDP

                  |L6.24|
                          DCD      0x40020400
                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;728      */
;;;729    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  4601              MOV      r1,r0
;;;730    {
;;;731      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L7.12|
;;;732      uint32_t tmpreg = 0;
;;;733    
;;;734      /* Check the parameters */
;;;735      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;736    
;;;737      /* Calculate the used DMA */
;;;738      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;739      {
;;;740        /* Get DMA2 ISR register value */
;;;741        tmpreg = DMA2->ISR;
000008  4a03              LDR      r2,|L7.24|
00000a  e000              B        |L7.14|
                  |L7.12|
;;;742      }
;;;743      else
;;;744      {
;;;745        /* Get DMA1 ISR register value */
;;;746        tmpreg = DMA1->ISR;
00000c  4a03              LDR      r2,|L7.28|
                  |L7.14|
00000e  6812              LDR      r2,[r2,#0]
;;;747      }
;;;748    
;;;749      /* Check the status of the specified DMAy interrupt */
;;;750      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L7.22|
;;;751      {
;;;752        /* DMAy_IT is set */
;;;753        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L7.22|
;;;754      }
;;;755      else
;;;756      {
;;;757        /* DMAy_IT is reset */
;;;758        bitstatus = RESET;
;;;759      }
;;;760      /* Return the DMAy_IT status */
;;;761      return  bitstatus;
;;;762    }
000016  4770              BX       lr
;;;763    
                          ENDP

                  |L7.24|
                          DCD      0x40020400
                  |L7.28|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;476      */
;;;477    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;478    {
;;;479      /* Check the parameters */
;;;480      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;481      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;482      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;483    
;;;484      if (NewState != DISABLE)
;;;485      {
;;;486        /* Enable the selected DMA interrupts */
;;;487        DMAy_Channelx->CCR |= DMA_IT;
;;;488      }
;;;489      else
;;;490      {
;;;491        /* Disable the selected DMA interrupts */
;;;492        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L8.10|
000006  430a              ORRS     r2,r2,r1              ;487
000008  e000              B        |L8.12|
                  |L8.10|
00000a  438a              BICS     r2,r2,r1
                  |L8.12|
00000c  6002              STR      r2,[r0,#0]            ;487
;;;493      }
;;;494    }
00000e  4770              BX       lr
;;;495    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;231      */
;;;232    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;233    {
;;;234      uint32_t tmpreg = 0;
;;;235    
;;;236      /* Check the parameters */
;;;237      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;238      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;239      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;240      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
;;;241      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;242      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;243      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;244      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;245      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;246    
;;;247    /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
;;;248      /* Get the DMAy_Channelx CCR value */
;;;249      tmpreg = DMAy_Channelx->CCR;
000002  6803              LDR      r3,[r0,#0]
;;;250    
;;;251      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;252      tmpreg &= CCR_CLEAR_MASK;
000004  f64772f0          MOV      r2,#0x7ff0
000008  4393              BICS     r3,r3,r2
;;;253    
;;;254      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;255      /* Set DIR bit according to DMA_DIR value */
;;;256      /* Set CIRC bit according to DMA_Mode value */
;;;257      /* Set PINC bit according to DMA_PeripheralInc value */
;;;258      /* Set MINC bit according to DMA_MemoryInc value */
;;;259      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;260      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;261      /* Set PL bits according to DMA_Priority value */
;;;262      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;263      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  6a0c              LDR      r4,[r1,#0x20]
00000c  688a              LDR      r2,[r1,#8]
00000e  4322              ORRS     r2,r2,r4
000010  e9d14504          LDRD     r4,r5,[r1,#0x10]
000014  432c              ORRS     r4,r4,r5
000016  4322              ORRS     r2,r2,r4
000018  698c              LDR      r4,[r1,#0x18]
00001a  4322              ORRS     r2,r2,r4
00001c  69cc              LDR      r4,[r1,#0x1c]
00001e  4322              ORRS     r2,r2,r4
000020  6a4c              LDR      r4,[r1,#0x24]
000022  4322              ORRS     r2,r2,r4
000024  6a8c              LDR      r4,[r1,#0x28]
000026  4322              ORRS     r2,r2,r4
000028  431a              ORRS     r2,r2,r3
;;;264                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;265                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;266                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;267    
;;;268      /* Write to DMAy Channelx CCR */
;;;269      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;270    
;;;271    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;272      /* Write to DMAy Channelx CNDTR */
;;;273      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  898a              LDRH     r2,[r1,#0xc]
00002e  6042              STR      r2,[r0,#4]
;;;274    
;;;275    /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
;;;276      /* Write to DMAy Channelx CPAR */
;;;277      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680a              LDR      r2,[r1,#0]
000032  6082              STR      r2,[r0,#8]
;;;278    
;;;279    /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
;;;280      /* Write to DMAy Channelx CMAR */
;;;281      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  6849              LDR      r1,[r1,#4]
000036  60c1              STR      r1,[r0,#0xc]
;;;282    }
000038  bd30              POP      {r4,r5,pc}
;;;283    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;383      */
;;;384    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;385    {
;;;386      /* Check the parameters */
;;;387      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;388    
;;;389    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;390      /* Write to DMAy Channelx CNDTR */
;;;391      DMAy_Channelx->CNDTR = DataNumber;
;;;392    }
000002  4770              BX       lr
;;;393    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;289      */
;;;290    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;291    {
;;;292    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;293      /* Initialize the DMA_PeripheralBaseAddr member */
;;;294      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;295      /* Initialize the DMA_MemoryBaseAddr member */
;;;296      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;297      /* Initialize the DMA_DIR member */
;;;298      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;299      /* Initialize the DMA_BufferSize member */
;;;300      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
000008  8181              STRH     r1,[r0,#0xc]
;;;301      /* Initialize the DMA_PeripheralInc member */
;;;302      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;303      /* Initialize the DMA_MemoryInc member */
;;;304      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;305      /* Initialize the DMA_PeripheralDataSize member */
;;;306      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;307      /* Initialize the DMA_MemoryDataSize member */
;;;308      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;309      /* Initialize the DMA_Mode member */
;;;310      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;311      /* Initialize the DMA_Priority member */
;;;312      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;313      /* Initialize the DMA_M2M member */
;;;314      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;315    }
000018  4770              BX       lr
;;;316    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F37x_StdPeriph_Driver\\src\\stm32f37x_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_dma_c_e9b554c0____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f37x_dma_c_e9b554c0____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_dma_c_e9b554c0____REVSH|
#line 153
|__asm___15_stm32f37x_dma_c_e9b554c0____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f37x_dma_c_e9b554c0____RRX|
#line 328
|__asm___15_stm32f37x_dma_c_e9b554c0____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
