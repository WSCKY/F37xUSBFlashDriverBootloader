; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\memory.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\memory.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\memory.crf ..\src\memory.c]
                          THUMB

                          AREA ||i.Read_Memory||, CODE, READONLY, ALIGN=2

                  Read_Memory PROC
;;;70     *******************************************************************************/
;;;71     void Read_Memory(uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  b570              PUSH     {r4-r6,lr}
;;;72     {
;;;73       static uint32_t Offset, Length;
;;;74     
;;;75       if (TransferState == TXFR_IDLE )
000002  4c2a              LDR      r4,|L1.172|
000004  4606              MOV      r6,r0                 ;72
;;;76       {
;;;77         Offset = Memory_Offset * Mass_Block_Size[lun];
000006  4d2a              LDR      r5,|L1.176|
000008  7820              LDRB     r0,[r4,#0]            ;75  ; TransferState
00000a  b110              CBZ      r0,|L1.18|
;;;78         Length = Transfer_Length * Mass_Block_Size[lun];
;;;79         TransferState = TXFR_ONGOING;
;;;80       }
;;;81     
;;;82       if (TransferState == TXFR_ONGOING )
00000c  2801              CMP      r0,#1
00000e  d008              BEQ      |L1.34|
000010  e02a              B        |L1.104|
                  |L1.18|
000012  f8550026          LDR      r0,[r5,r6,LSL #2]     ;77
000016  4341              MULS     r1,r0,r1              ;77
000018  4350              MULS     r0,r2,r0              ;78
00001a  e9c41003          STRD     r1,r0,[r4,#0xc]       ;78
00001e  2001              MOVS     r0,#1                 ;79
000020  7020              STRB     r0,[r4,#0]            ;79
                  |L1.34|
;;;83       {
;;;84         if (!Block_Read_count)
000022  6860              LDR      r0,[r4,#4]  ; Block_Read_count
000024  b370              CBZ      r0,|L1.132|
;;;85         {
;;;86           MAL_Read(lun ,
;;;87                    Offset ,
;;;88                    Data_Buffer,
;;;89                    Mass_Block_Size[lun]);
;;;90     
;;;91           USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);
;;;92     
;;;93           Block_Read_count = Mass_Block_Size[lun] - BULK_MAX_PACKET_SIZE;
;;;94           Block_offset = BULK_MAX_PACKET_SIZE;
;;;95         }
;;;96         else
;;;97         {
;;;98           USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
000026  4823              LDR      r0,|L1.180|
000028  69e1              LDR      r1,[r4,#0x1c]  ; Block_offset
00002a  2240              MOVS     r2,#0x40
00002c  4401              ADD      r1,r1,r0
00002e  2081              MOVS     r0,#0x81
000030  f7fffffe          BL       USB_SIL_Write
;;;99     
;;;100          Block_Read_count -= BULK_MAX_PACKET_SIZE;
000034  6860              LDR      r0,[r4,#4]  ; Block_Read_count
000036  3840              SUBS     r0,r0,#0x40
000038  6060              STR      r0,[r4,#4]  ; Block_Read_count
;;;101          Block_offset += BULK_MAX_PACKET_SIZE;
00003a  69e0              LDR      r0,[r4,#0x1c]  ; Block_offset
00003c  3040              ADDS     r0,r0,#0x40
                  |L1.62|
00003e  61e0              STR      r0,[r4,#0x1c]  ; Block_offset
;;;102        }
;;;103    
;;;104        SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
000040  2140              MOVS     r1,#0x40
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       SetEPTxCount
;;;105        SetEPTxStatus(ENDP1, EP_TX_VALID);  
000048  2130              MOVS     r1,#0x30
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       SetEPTxStatus
;;;106        Offset += BULK_MAX_PACKET_SIZE;
000050  68e0              LDR      r0,[r4,#0xc]  ; Offset
000052  3040              ADDS     r0,r0,#0x40
;;;107        Length -= BULK_MAX_PACKET_SIZE;
000054  60e0              STR      r0,[r4,#0xc]  ; Offset
000056  6920              LDR      r0,[r4,#0x10]  ; Length
000058  3840              SUBS     r0,r0,#0x40
;;;108    
;;;109        CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
00005a  6120              STR      r0,[r4,#0x10]  ; Length
00005c  4816              LDR      r0,|L1.184|
00005e  6881              LDR      r1,[r0,#8]  ; CSW
000060  3940              SUBS     r1,r1,#0x40
;;;110        Led_RW_ON();
000062  6081              STR      r1,[r0,#8]  ; CSW
000064  f7fffffe          BL       Led_RW_ON
                  |L1.104|
;;;111      }
;;;112      if (Length == 0)
000068  6920              LDR      r0,[r4,#0x10]  ; Length
00006a  2800              CMP      r0,#0
00006c  d11d              BNE      |L1.170|
;;;113      {
;;;114        Block_Read_count = 0;
00006e  6060              STR      r0,[r4,#4]  ; Block_Read_count
;;;115        Block_offset = 0;
000070  61e0              STR      r0,[r4,#0x1c]  ; Block_offset
;;;116        Offset = 0;
;;;117        Bot_State = BOT_DATA_IN_LAST;
000072  4a12              LDR      r2,|L1.188|
000074  2103              MOVS     r1,#3
000076  60e0              STR      r0,[r4,#0xc]  ; Offset
000078  7011              STRB     r1,[r2,#0]
;;;118        TransferState = TXFR_IDLE;
00007a  7020              STRB     r0,[r4,#0]
;;;119        Led_RW_OFF();
00007c  e8bd4070          POP      {r4-r6,lr}
000080  f7ffbffe          B.W      Led_RW_OFF
                  |L1.132|
000084  f8350026          LDRH     r0,[r5,r6,LSL #2]     ;86
000088  4a0a              LDR      r2,|L1.180|
00008a  b283              UXTH     r3,r0                 ;86
00008c  4630              MOV      r0,r6                 ;86
00008e  68e1              LDR      r1,[r4,#0xc]          ;86  ; Offset
000090  f7fffffe          BL       MAL_Read
000094  2240              MOVS     r2,#0x40              ;91
000096  4907              LDR      r1,|L1.180|
000098  2081              MOVS     r0,#0x81              ;91
00009a  f7fffffe          BL       USB_SIL_Write
00009e  f8550026          LDR      r0,[r5,r6,LSL #2]     ;93
0000a2  3840              SUBS     r0,r0,#0x40           ;93
0000a4  6060              STR      r0,[r4,#4]            ;93  ; Block_Read_count
0000a6  2040              MOVS     r0,#0x40              ;94
0000a8  e7c9              B        |L1.62|
                  |L1.170|
;;;120      }
;;;121    }
0000aa  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

                  |L1.172|
                          DCD      ||.data||
                  |L1.176|
                          DCD      Mass_Block_Size
                  |L1.180|
                          DCD      ||.bss||
                  |L1.184|
                          DCD      ||CSW||
                  |L1.188|
                          DCD      Bot_State

                          AREA ||i.Write_Memory||, CODE, READONLY, ALIGN=2

                  Write_Memory PROC
;;;129    *******************************************************************************/
;;;130    void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;131    {
;;;132    
;;;133      static uint32_t W_Offset, W_Length;
;;;134    
;;;135      uint32_t temp =  Counter + 64;
000004  4c2d              LDR      r4,|L2.188|
000006  68a3              LDR      r3,[r4,#8]  ; Counter
;;;136    
;;;137      if (TransferState == TXFR_IDLE )
000008  7826              LDRB     r6,[r4,#0]  ; TransferState
;;;138      {
;;;139        W_Offset = Memory_Offset * Mass_Block_Size[lun];
00000a  f8dfc0b4          LDR      r12,|L2.192|
00000e  2500              MOVS     r5,#0
000010  3340              ADDS     r3,r3,#0x40
000012  b116              CBZ      r6,|L2.26|
;;;140        W_Length = Transfer_Length * Mass_Block_Size[lun];
;;;141        TransferState = TXFR_ONGOING;
;;;142      }
;;;143    
;;;144      if (TransferState == TXFR_ONGOING )
000014  2e01              CMP      r6,#1
000016  d008              BEQ      |L2.42|
000018  e03e              B        |L2.152|
                  |L2.26|
00001a  f85c6020          LDR      r6,[r12,r0,LSL #2]    ;139
00001e  4371              MULS     r1,r6,r1              ;139
000020  4356              MULS     r6,r2,r6              ;140
000022  e9c41605          STRD     r1,r6,[r4,#0x14]      ;140
000026  2101              MOVS     r1,#1                 ;141
000028  7021              STRB     r1,[r4,#0]            ;141
                  |L2.42|
;;;145      {
;;;146    
;;;147        for (Idx = 0 ; Counter < temp; Counter++)
00002a  4621              MOV      r1,r4
;;;148        {
;;;149          *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
00002c  462a              MOV      r2,r5
00002e  f8df9094          LDR      r9,|L2.196|
000032  f8dfa094          LDR      r10,|L2.200|
000036  6225              STR      r5,[r4,#0x20]         ;147  ; Idx
000038  e009              B        |L2.78|
00003a  bf00              NOP      
                  |L2.60|
00003c  f8198002          LDRB     r8,[r9,r2]
000040  688f              LDR      r7,[r1,#8]  ; Counter
000042  f80a8007          STRB     r8,[r10,r7]
000046  688e              LDR      r6,[r1,#8]            ;147  ; Counter
000048  1c76              ADDS     r6,r6,#1              ;147
00004a  608e              STR      r6,[r1,#8]            ;147  ; Counter
00004c  1c52              ADDS     r2,r2,#1              ;147
                  |L2.78|
00004e  688e              LDR      r6,[r1,#8]            ;147  ; Counter
000050  429e              CMP      r6,r3                 ;147
000052  d3f3              BCC      |L2.60|
;;;150        }
;;;151    
;;;152        W_Offset += Data_Len;
000054  4e1d              LDR      r6,|L2.204|
000056  620a              STR      r2,[r1,#0x20]  ; Idx
000058  694b              LDR      r3,[r1,#0x14]  ; W_Offset
00005a  8832              LDRH     r2,[r6,#0]  ; Data_Len
00005c  189f              ADDS     r7,r3,r2
;;;153        W_Length -= Data_Len;
00005e  614f              STR      r7,[r1,#0x14]  ; W_Offset
000060  698b              LDR      r3,[r1,#0x18]  ; W_Length
000062  1a9b              SUBS     r3,r3,r2
;;;154    
;;;155        if (!(W_Length % Mass_Block_Size[lun]))
000064  618b              STR      r3,[r1,#0x18]  ; W_Length
000066  f85c2020          LDR      r2,[r12,r0,LSL #2]
00006a  fbb3fcf2          UDIV     r12,r3,r2
00006e  fb02331c          MLS      r3,r2,r12,r3
000072  b92b              CBNZ     r3,|L2.128|
;;;156        {
;;;157          Counter = 0;
000074  608d              STR      r5,[r1,#8]  ; Counter
;;;158          MAL_Write(lun ,
000076  b293              UXTH     r3,r2
000078  1ab9              SUBS     r1,r7,r2
00007a  4a13              LDR      r2,|L2.200|
00007c  f7fffffe          BL       MAL_Write
                  |L2.128|
;;;159                    W_Offset - Mass_Block_Size[lun],
;;;160                    Data_Buffer,
;;;161                    Mass_Block_Size[lun]);
;;;162        }
;;;163    
;;;164        CSW.dDataResidue -= Data_Len;
000080  4813              LDR      r0,|L2.208|
000082  8832              LDRH     r2,[r6,#0]  ; Data_Len
000084  6881              LDR      r1,[r0,#8]  ; CSW
000086  1a89              SUBS     r1,r1,r2
;;;165        SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
000088  6081              STR      r1,[r0,#8]  ; CSW
00008a  f44f5140          MOV      r1,#0x3000
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       SetEPRxStatus
;;;166        Led_RW_ON();
000094  f7fffffe          BL       Led_RW_ON
                  |L2.152|
;;;167      }
;;;168    
;;;169      if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
000098  69a0              LDR      r0,[r4,#0x18]  ; W_Length
00009a  b118              CBZ      r0,|L2.164|
00009c  480d              LDR      r0,|L2.212|
00009e  7800              LDRB     r0,[r0,#0]  ; Bot_State
0000a0  2804              CMP      r0,#4
0000a2  d109              BNE      |L2.184|
                  |L2.164|
;;;170      {
;;;171        Counter = 0;
0000a4  60a5              STR      r5,[r4,#8]  ; Counter
;;;172        Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  2000              MOVS     r0,#0
0000aa  f7fffffe          BL       Set_CSW
;;;173        TransferState = TXFR_IDLE;
0000ae  7025              STRB     r5,[r4,#0]
;;;174        Led_RW_OFF();
0000b0  e8bd47f0          POP      {r4-r10,lr}
0000b4  f7ffbffe          B.W      Led_RW_OFF
                  |L2.184|
;;;175      }
;;;176    }
0000b8  e8bd87f0          POP      {r4-r10,pc}
;;;177    /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
                          ENDP

                  |L2.188|
                          DCD      ||.data||
                  |L2.192|
                          DCD      Mass_Block_Size
                  |L2.196|
                          DCD      Bulk_Data_Buff
                  |L2.200|
                          DCD      ||.bss||
                  |L2.204|
                          DCD      Data_Len
                  |L2.208|
                          DCD      ||CSW||
                  |L2.212|
                          DCD      Bot_State

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Data_Buffer
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  TransferState
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  Block_Read_count
                          DCD      0x00000000
                  Counter
                          DCD      0x00000000
                  Offset
                          DCD      0x00000000
                  Length
                          DCD      0x00000000
                  W_Offset
                          DCD      0x00000000
                  W_Length
                          DCD      0x00000000
                  Block_offset
                          DCD      0x00000000
                  Idx
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\memory.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_memory_c_efd64b70____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____REVSH|
#line 153
|__asm___8_memory_c_efd64b70____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____RRX|
#line 328
|__asm___8_memory_c_efd64b70____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
