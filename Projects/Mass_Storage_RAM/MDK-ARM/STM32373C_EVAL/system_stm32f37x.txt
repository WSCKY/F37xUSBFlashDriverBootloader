; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\system_stm32f37x.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\system_stm32f37x.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_RAM\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\system_stm32f37x.crf ..\src\system_stm32f37x.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;297      */
;;;298    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;299    {
;;;300      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;301    
;;;302    /******************************************************************************/
;;;303    /*            PLL (clocked by HSE) used as System clock source                */
;;;304    /******************************************************************************/
;;;305    
;;;306      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
;;;307      /* Enable HSE */
;;;308      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4821              LDR      r0,|L1.140|
000006  9101              STR      r1,[sp,#4]            ;300
000008  9100              STR      r1,[sp,#0]
00000a  6802              LDR      r2,[r0,#0]
00000c  f4423280          ORR      r2,r2,#0x10000
000010  6002              STR      r2,[r0,#0]
;;;309     
;;;310      /* Wait till HSE is ready and if Time out is reached exit */
;;;311      do
;;;312      {
;;;313        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;314        StartUpCounter++;
;;;315      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f63a0          MOV      r3,#0x500
                  |L1.22|
000016  6802              LDR      r2,[r0,#0]            ;313
000018  f4023200          AND      r2,r2,#0x20000        ;313
00001c  9200              STR      r2,[sp,#0]            ;314
00001e  9a01              LDR      r2,[sp,#4]            ;314
000020  1c52              ADDS     r2,r2,#1              ;314
000022  9201              STR      r2,[sp,#4]
000024  9a00              LDR      r2,[sp,#0]
000026  b912              CBNZ     r2,|L1.46|
000028  9a01              LDR      r2,[sp,#4]
00002a  429a              CMP      r2,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;316    
;;;317      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6802              LDR      r2,[r0,#0]
000030  0392              LSLS     r2,r2,#14
000032  d529              BPL      |L1.136|
;;;318      {
;;;319        HSEStatus = (uint32_t)0x01;
000034  2101              MOVS     r1,#1
;;;320      }
;;;321      else
;;;322      {
;;;323        HSEStatus = (uint32_t)0x00;
;;;324      }
;;;325    
;;;326      if (HSEStatus == (uint32_t)0x01)
;;;327      {
;;;328        /* Enable Prefetch Buffer and set Flash Latency */
;;;329        FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
000036  4a16              LDR      r2,|L1.144|
000038  9100              STR      r1,[sp,#0]
00003a  2112              MOVS     r1,#0x12
00003c  6011              STR      r1,[r2,#0]
;;;330     
;;;331         /* HCLK = SYSCLK / 1 */
;;;332         RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00003e  6841              LDR      r1,[r0,#4]
000040  6041              STR      r1,[r0,#4]
;;;333           
;;;334         /* PCLK2 = HCLK / 1 */
;;;335         RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000042  6841              LDR      r1,[r0,#4]
000044  6041              STR      r1,[r0,#4]
;;;336         
;;;337         /* PCLK1 = HCLK / 2 */
;;;338         RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000046  6841              LDR      r1,[r0,#4]
000048  f4416180          ORR      r1,r1,#0x400
00004c  6041              STR      r1,[r0,#4]
;;;339    
;;;340        /* PLL configuration */
;;;341        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
00004e  6841              LDR      r1,[r0,#4]
000050  f421117c          BIC      r1,r1,#0x3f0000
000054  6041              STR      r1,[r0,#4]
;;;342        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL9);
000056  6841              LDR      r1,[r0,#4]
000058  f44111f8          ORR      r1,r1,#0x1f0000
00005c  6041              STR      r1,[r0,#4]
;;;343    
;;;344        /* Enable PLL */
;;;345        RCC->CR |= RCC_CR_PLLON;
00005e  6801              LDR      r1,[r0,#0]
000060  f0417180          ORR      r1,r1,#0x1000000
000064  6001              STR      r1,[r0,#0]
                  |L1.102|
;;;346    
;;;347        /* Wait till PLL is ready */
;;;348        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000066  6801              LDR      r1,[r0,#0]
000068  0189              LSLS     r1,r1,#6
00006a  d5fc              BPL      |L1.102|
;;;349        {
;;;350        }
;;;351        
;;;352        /* Select PLL as system clock source */
;;;353        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00006c  6841              LDR      r1,[r0,#4]
00006e  f0210103          BIC      r1,r1,#3
000072  6041              STR      r1,[r0,#4]
;;;354        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
000074  6841              LDR      r1,[r0,#4]
000076  f0410102          ORR      r1,r1,#2
00007a  6041              STR      r1,[r0,#4]
                  |L1.124|
;;;355    
;;;356        /* Wait till PLL is used as system clock source */
;;;357        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
00007c  6841              LDR      r1,[r0,#4]
00007e  f3c10181          UBFX     r1,r1,#2,#2
000082  2902              CMP      r1,#2
000084  d1fa              BNE      |L1.124|
;;;358        {
;;;359        }
;;;360      }
;;;361      else
;;;362      { /* If HSE fails to start-up, the application will have wrong clock
;;;363             configuration. User can add here some code to deal with this error */
;;;364      }
;;;365    }
000086  bd0c              POP      {r2,r3,pc}
                  |L1.136|
000088  9100              STR      r1,[sp,#0]            ;323
00008a  bd0c              POP      {r2,r3,pc}
;;;366    
                          ENDP

                  |L1.140|
                          DCD      0x40021000
                  |L1.144|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;245      */
;;;246    void SystemCoreClockUpdate (void)
000000  b530              PUSH     {r4,r5,lr}
;;;247    {
;;;248      uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
;;;249    
;;;250      /* Get SYSCLK source -------------------------------------------------------*/
;;;251      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4918              LDR      r1,|L2.100|
000004  6848              LDR      r0,[r1,#4]
;;;252      
;;;253      switch (tmp)
;;;254      {
;;;255        case 0x00:  /* HSI used as system clock */
;;;256          SystemCoreClock = HSI_VALUE;
000006  4b18              LDR      r3,|L2.104|
000008  f010020c          ANDS     r2,r0,#0xc            ;251
00000c  4817              LDR      r0,|L2.108|
00000e  d004              BEQ      |L2.26|
;;;257          break;
;;;258        case 0x04:  /* HSE used as system clock */
;;;259          SystemCoreClock = HSE_VALUE;
000010  005c              LSLS     r4,r3,#1
000012  2a04              CMP      r2,#4                 ;253
000014  d003              BEQ      |L2.30|
000016  2a08              CMP      r2,#8                 ;253
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  6003              STR      r3,[r0,#0]            ;257  ; SystemCoreClock
00001c  e017              B        |L2.78|
                  |L2.30|
;;;260          break;
00001e  6004              STR      r4,[r0,#0]  ; SystemCoreClock
000020  e015              B        |L2.78|
                  |L2.34|
;;;261        case 0x08:  /* PLL used as system clock */
;;;262          /* Get PLL clock source and multiplication factor ----------------------*/
;;;263          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
000022  684a              LDR      r2,[r1,#4]
;;;264          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000024  684b              LDR      r3,[r1,#4]
000026  f4021270          AND      r2,r2,#0x3c0000       ;263
;;;265          pllmull = ( pllmull >> 18) + 2;
00002a  f04f0502          MOV      r5,#2
00002e  f4133f80          TST      r3,#0x10000           ;264
000032  eb054292          ADD      r2,r5,r2,LSR #18
;;;266          
;;;267          if (pllsource == 0x00)
000036  d007              BEQ      |L2.72|
;;;268          {
;;;269            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;270            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;271          }
;;;272          else
;;;273          {
;;;274            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
000038  6acb              LDR      r3,[r1,#0x2c]
00003a  f003030f          AND      r3,r3,#0xf
00003e  1c5b              ADDS     r3,r3,#1
;;;275            /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;276            SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
000040  fbb4f3f3          UDIV     r3,r4,r3
000044  4353              MULS     r3,r2,r3
000046  e7e8              B        |L2.26|
                  |L2.72|
000048  4b09              LDR      r3,|L2.112|
00004a  435a              MULS     r2,r3,r2              ;270
00004c  6002              STR      r2,[r0,#0]            ;270  ; SystemCoreClock
                  |L2.78|
;;;277          }      
;;;278          break;
;;;279        default: /* HSI used as system clock */
;;;280          SystemCoreClock = HSI_VALUE;
;;;281          break;
;;;282      }
;;;283      /* Compute HCLK clock frequency ----------------*/
;;;284      /* Get HCLK prescaler */
;;;285      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00004e  6849              LDR      r1,[r1,#4]
000050  4a06              LDR      r2,|L2.108|
000052  f3c11103          UBFX     r1,r1,#4,#4
000056  1d12              ADDS     r2,r2,#4
000058  5c51              LDRB     r1,[r2,r1]
;;;286      /* HCLK clock frequency */
;;;287      SystemCoreClock >>= tmp;  
00005a  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
00005c  40ca              LSRS     r2,r2,r1
00005e  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;288    }
000060  bd30              POP      {r4,r5,pc}
;;;289    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      0x40021000
                  |L2.104|
                          DCD      0x007a1200
                  |L2.108|
                          DCD      ||.data||
                  |L2.112|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;168      */
;;;169    void SystemInit (void)
000000  4816              LDR      r0,|L3.92|
;;;170    { 
000002  b510              PUSH     {r4,lr}
;;;171      /* FPU settings ------------------------------------------------------------*/
;;;172      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;173        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;174      #endif
;;;175       
;;;176      /* Set HSION bit */
;;;177      RCC->CR |= (uint32_t)0x00000001;
00000c  4814              LDR      r0,|L3.96|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;178    
;;;179      /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, SDADCPRE and MCOSEL[2:0] bits */
;;;180      RCC->CFGR &= (uint32_t)0x00FF0000;
000016  6841              LDR      r1,[r0,#4]
000018  f401017f          AND      r1,r1,#0xff0000
00001c  6041              STR      r1,[r0,#4]
;;;181      
;;;182      /* Reset HSEON, CSSON and PLLON bits */
;;;183      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6801              LDR      r1,[r0,#0]
000020  4a10              LDR      r2,|L3.100|
000022  4011              ANDS     r1,r1,r2
000024  6001              STR      r1,[r0,#0]
;;;184    
;;;185      /* Reset HSEBYP bit */
;;;186      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  6801              LDR      r1,[r0,#0]
000028  f4212180          BIC      r1,r1,#0x40000
00002c  6001              STR      r1,[r0,#0]
;;;187    
;;;188      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
;;;189      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  6841              LDR      r1,[r0,#4]
000030  f42101fe          BIC      r1,r1,#0x7f0000
000034  6041              STR      r1,[r0,#4]
;;;190    
;;;191      /* Reset PREDIV1[3:0] bits */
;;;192      RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
000036  6ac1              LDR      r1,[r0,#0x2c]
000038  f021010f          BIC      r1,r1,#0xf
00003c  62c1              STR      r1,[r0,#0x2c]
;;;193    
;;;194      /* Reset USARTSW[1:0], I2CSW and CECSW bits */
;;;195      RCC->CFGR3 &= (uint32_t)0xFFF0F8C;
00003e  6b01              LDR      r1,[r0,#0x30]
000040  4a09              LDR      r2,|L3.104|
000042  4011              ANDS     r1,r1,r2
000044  6301              STR      r1,[r0,#0x30]
;;;196      
;;;197      /* Disable all interrupts */
;;;198      RCC->CIR = 0x00000000;
000046  2100              MOVS     r1,#0
000048  6081              STR      r1,[r0,#8]
;;;199      
;;;200    /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
;;;201      SetSysClock();
00004a  f7fffffe          BL       SetSysClock
;;;202    
;;;203      
;;;204    #ifdef VECT_TAB_SRAM
;;;205      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;206    #else
;;;207      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00004e  4903              LDR      r1,|L3.92|
000050  f04f6000          MOV      r0,#0x8000000
000054  3980              SUBS     r1,r1,#0x80
000056  6008              STR      r0,[r1,#0]
;;;208    #endif
;;;209    }
000058  bd10              POP      {r4,pc}
;;;210    
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      0xe000ed88
                  |L3.96|
                          DCD      0x40021000
                  |L3.100|
                          DCD      0xfef6ffff
                  |L3.104|
                          DCD      0x0fff0f8c

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f37x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f37x_c_5d646a67____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f37x_c_5d646a67____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f37x_c_5d646a67____REVSH|
#line 153
|__asm___18_system_stm32f37x_c_5d646a67____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f37x_c_5d646a67____RRX|
#line 328
|__asm___18_system_stm32f37x_c_5d646a67____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
