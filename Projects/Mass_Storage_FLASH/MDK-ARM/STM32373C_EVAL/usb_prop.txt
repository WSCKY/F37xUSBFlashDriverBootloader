; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\usb_prop.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\usb_prop.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_FLASH\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\usb_prop.crf ..\src\usb_prop.c]
                          THUMB

                          AREA ||i.Get_Max_Lun||, CODE, READONLY, ALIGN=2

                  Get_Max_Lun PROC
;;;393    *******************************************************************************/
;;;394    uint8_t *Get_Max_Lun(uint16_t Length)
000000  b108              CBZ      r0,|L1.6|
;;;395    {
;;;396      if (Length == 0)
;;;397      {
;;;398        pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
;;;399        return 0;
;;;400      }
;;;401      else
;;;402      {
;;;403        return((uint8_t*)(&Max_Lun));
000002  4804              LDR      r0,|L1.20|
;;;404      }
;;;405    }
000004  4770              BX       lr
                  |L1.6|
000006  4904              LDR      r1,|L1.24|
000008  2001              MOVS     r0,#1                 ;398
00000a  6809              LDR      r1,[r1,#0]            ;398  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]         ;398
00000e  2000              MOVS     r0,#0                 ;399
000010  4770              BX       lr
;;;406    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||
                  |L1.24|
                          DCD      pInformation

                          AREA ||i.MASS_Data_Setup||, CODE, READONLY, ALIGN=2

                  MASS_Data_Setup PROC
;;;263    *******************************************************************************/
;;;264    RESULT MASS_Data_Setup(uint8_t RequestNo)
000000  490d              LDR      r1,|L2.56|
;;;265    {
000002  b500              PUSH     {lr}
;;;266      uint8_t    *(*CopyRoutine)(uint16_t);
;;;267    
;;;268      CopyRoutine = NULL;
;;;269      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000004  6809              LDR      r1,[r1,#0]  ; pInformation
000006  780a              LDRB     r2,[r1,#0]
000008  f002027f          AND      r2,r2,#0x7f
00000c  2a21              CMP      r2,#0x21
00000e  d108              BNE      |L2.34|
;;;270          && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
000010  28fe              CMP      r0,#0xfe
000012  d106              BNE      |L2.34|
000014  8848              LDRH     r0,[r1,#2]
000016  b920              CBNZ     r0,|L2.34|
;;;271          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
000018  8888              LDRH     r0,[r1,#4]
00001a  b910              CBNZ     r0,|L2.34|
00001c  88c8              LDRH     r0,[r1,#6]
00001e  2801              CMP      r0,#1
000020  d001              BEQ      |L2.38|
                  |L2.34|
;;;272      {
;;;273        CopyRoutine = Get_Max_Lun;
;;;274      }
;;;275      else
;;;276      {
;;;277        return USB_UNSUPPORT;
000022  2002              MOVS     r0,#2
;;;278      }
;;;279    
;;;280      if (CopyRoutine == NULL)
;;;281      {
;;;282        return USB_UNSUPPORT;
;;;283      }
;;;284    
;;;285      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;286      pInformation->Ctrl_Info.Usb_wOffset = 0;
;;;287      (*CopyRoutine)(0);
;;;288    
;;;289      return USB_SUCCESS;
;;;290    
;;;291    }
000024  bd00              POP      {pc}
                  |L2.38|
000026  4805              LDR      r0,|L2.60|
000028  6188              STR      r0,[r1,#0x18]         ;286
00002a  2000              MOVS     r0,#0                 ;286
00002c  8248              STRH     r0,[r1,#0x12]         ;286
00002e  f7fffffe          BL       Get_Max_Lun
000032  2000              MOVS     r0,#0                 ;289
000034  bd00              POP      {pc}
;;;292    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      pInformation
                  |L2.60|
                          DCD      Get_Max_Lun

                          AREA ||i.MASS_GetConfigDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetConfigDescriptor PROC
;;;360    *******************************************************************************/
;;;361    uint8_t *MASS_GetConfigDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L3.8|
;;;362    {
;;;363      return Standard_GetDescriptorData(Length, &Config_Descriptor );
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;364    }
;;;365    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||+0xc

                          AREA ||i.MASS_GetDeviceDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetDeviceDescriptor PROC
;;;348    *******************************************************************************/
;;;349    uint8_t *MASS_GetDeviceDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L4.8|
;;;350    {
;;;351      return Standard_GetDescriptorData(Length, &Device_Descriptor );
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;352    }
;;;353    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||+0x4

                          AREA ||i.MASS_GetStringDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetStringDescriptor PROC
;;;372    *******************************************************************************/
;;;373    uint8_t *MASS_GetStringDescriptor(uint16_t Length)
000000  4905              LDR      r1,|L5.24|
;;;374    {
;;;375      uint8_t wValue0 = pInformation->USBwValue0;
000002  6809              LDR      r1,[r1,#0]  ; pInformation
000004  78c9              LDRB     r1,[r1,#3]
;;;376    
;;;377      if (wValue0 > 5)
000006  2905              CMP      r1,#5
000008  d901              BLS      |L5.14|
;;;378      {
;;;379        return NULL;
00000a  2000              MOVS     r0,#0
;;;380      }
;;;381      else
;;;382      {
;;;383        return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
;;;384      }
;;;385    }
00000c  4770              BX       lr
                  |L5.14|
00000e  4a03              LDR      r2,|L5.28|
000010  eb0201c1          ADD      r1,r2,r1,LSL #3       ;383
000014  f7ffbffe          B.W      Standard_GetDescriptorData
;;;386    
                          ENDP

                  |L5.24|
                          DCD      pInformation
                  |L5.28|
                          DCD      ||.data||+0x44

                          AREA ||i.MASS_Get_Interface_Setting||, CODE, READONLY, ALIGN=1

                  MASS_Get_Interface_Setting PROC
;;;328    *******************************************************************************/
;;;329    RESULT MASS_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
000000  b909              CBNZ     r1,|L6.6|
;;;330    {
;;;331      if (AlternateSetting > 0)
;;;332      {
;;;333        return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
;;;334      }
;;;335      else if (Interface > 0)
000002  2800              CMP      r0,#0
000004  d000              BEQ      |L6.8|
                  |L6.6|
;;;336      {
;;;337        return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
000006  2002              MOVS     r0,#2
                  |L6.8|
;;;338      }
;;;339      return USB_SUCCESS;
;;;340    }
000008  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||i.MASS_NoData_Setup||, CODE, READONLY, ALIGN=2

                  MASS_NoData_Setup PROC
;;;299    *******************************************************************************/
;;;300    RESULT MASS_NoData_Setup(uint8_t RequestNo)
000000  490f              LDR      r1,|L7.64|
;;;301    {
000002  b510              PUSH     {r4,lr}
;;;302      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000004  6809              LDR      r1,[r1,#0]  ; pInformation
000006  780a              LDRB     r2,[r1,#0]
000008  f002027f          AND      r2,r2,#0x7f
00000c  2a21              CMP      r2,#0x21
00000e  d107              BNE      |L7.32|
;;;303          && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
000010  28ff              CMP      r0,#0xff
000012  d105              BNE      |L7.32|
000014  8848              LDRH     r0,[r1,#2]
000016  b918              CBNZ     r0,|L7.32|
;;;304          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
000018  8888              LDRH     r0,[r1,#4]
00001a  b908              CBNZ     r0,|L7.32|
00001c  88c8              LDRH     r0,[r1,#6]
00001e  b108              CBZ      r0,|L7.36|
                  |L7.32|
;;;305      {
;;;306        /* Initialize Endpoint 1 */
;;;307        ClearDTOG_TX(ENDP1);
;;;308    
;;;309        /* Initialize Endpoint 2 */
;;;310        ClearDTOG_RX(ENDP2);
;;;311    
;;;312        /*initialize the CBW signature to enable the clear feature*/
;;;313        CBW.dSignature = BOT_CBW_SIGNATURE;
;;;314        Bot_State = BOT_IDLE;
;;;315    
;;;316        return USB_SUCCESS;
;;;317      }
;;;318      return USB_UNSUPPORT;
000020  2002              MOVS     r0,#2
;;;319    }
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  2001              MOVS     r0,#1                 ;307
000026  f7fffffe          BL       ClearDTOG_TX
00002a  2002              MOVS     r0,#2                 ;310
00002c  f7fffffe          BL       ClearDTOG_RX
000030  4905              LDR      r1,|L7.72|
000032  4804              LDR      r0,|L7.68|
000034  6008              STR      r0,[r1,#0]            ;314  ; CBW
000036  4905              LDR      r1,|L7.76|
000038  2000              MOVS     r0,#0                 ;314
00003a  7008              STRB     r0,[r1,#0]            ;314
00003c  bd10              POP      {r4,pc}
;;;320    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      pInformation
                  |L7.68|
                          DCD      0x43425355
                  |L7.72|
                          DCD      ||CBW||
                  |L7.76|
                          DCD      Bot_State

                          AREA ||i.MASS_Reset||, CODE, READONLY, ALIGN=2

                  MASS_Reset PROC
;;;138    *******************************************************************************/
;;;139    void MASS_Reset()
000000  b570              PUSH     {r4-r6,lr}
;;;140    {
;;;141      /* Set the device as not configured */
;;;142      Device_Info.Current_Configuration = 0;
000002  4831              LDR      r0,|L8.200|
000004  2500              MOVS     r5,#0
;;;143    
;;;144      /* Current Feature initialization */
;;;145      pInformation->Current_Feature = MASS_ConfigDescriptor[7];
000006  4932              LDR      r1,|L8.208|
000008  7285              STRB     r5,[r0,#0xa]          ;142
00000a  4830              LDR      r0,|L8.204|
00000c  6809              LDR      r1,[r1,#0]  ; pInformation
00000e  79c0              LDRB     r0,[r0,#7]  ; MASS_ConfigDescriptor
000010  7248              STRB     r0,[r1,#9]
;;;146    
;;;147      SetBTABLE(BTABLE_ADDRESS);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       SetBTABLE
;;;148    
;;;149      /* Initialize Endpoint 0 */
;;;150      SetEPType(ENDP0, EP_CONTROL);
000018  f44f7100          MOV      r1,#0x200
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SetEPType
;;;151      SetEPTxStatus(ENDP0, EP_TX_NAK);
000022  2120              MOVS     r1,#0x20
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       SetEPTxStatus
;;;152      SetEPRxAddr(ENDP0, ENDP0_RXADDR);
00002a  2118              MOVS     r1,#0x18
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       SetEPRxAddr
;;;153      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000032  4c28              LDR      r4,|L8.212|
000034  2000              MOVS     r0,#0
000036  f8141f2c          LDRB     r1,[r4,#0x2c]!  ; Device_Property
00003a  f7fffffe          BL       SetEPRxCount
;;;154      SetEPTxAddr(ENDP0, ENDP0_TXADDR);
00003e  2158              MOVS     r1,#0x58
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SetEPTxAddr
;;;155      Clear_Status_Out(ENDP0);
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       Clear_Status_Out
;;;156      SetEPRxValid(ENDP0);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       SetEPRxValid
;;;157    
;;;158      /* Initialize Endpoint 1 */
;;;159      SetEPType(ENDP1, EP_BULK);
000052  2100              MOVS     r1,#0
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       SetEPType
;;;160      SetEPTxAddr(ENDP1, ENDP1_TXADDR);
00005a  2198              MOVS     r1,#0x98
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       SetEPTxAddr
;;;161      SetEPTxStatus(ENDP1, EP_TX_NAK);
000062  2120              MOVS     r1,#0x20
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       SetEPTxStatus
;;;162      SetEPRxStatus(ENDP1, EP_RX_DIS);
00006a  2100              MOVS     r1,#0
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       SetEPRxStatus
;;;163    
;;;164      /* Initialize Endpoint 2 */
;;;165      SetEPType(ENDP2, EP_BULK);
000072  2100              MOVS     r1,#0
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       SetEPType
;;;166      SetEPRxAddr(ENDP2, ENDP2_RXADDR);
00007a  21d8              MOVS     r1,#0xd8
00007c  2002              MOVS     r0,#2
00007e  f7fffffe          BL       SetEPRxAddr
;;;167      SetEPRxCount(ENDP2, Device_Property.MaxPacketSize);
000082  7821              LDRB     r1,[r4,#0]  ; Device_Property
000084  2002              MOVS     r0,#2
000086  f7fffffe          BL       SetEPRxCount
;;;168      SetEPRxStatus(ENDP2, EP_RX_VALID);
00008a  f44f5140          MOV      r1,#0x3000
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       SetEPRxStatus
;;;169      SetEPTxStatus(ENDP2, EP_TX_DIS);
000094  2100              MOVS     r1,#0
000096  2002              MOVS     r0,#2
000098  f7fffffe          BL       SetEPTxStatus
;;;170    
;;;171    
;;;172      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
00009c  7821              LDRB     r1,[r4,#0]  ; Device_Property
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       SetEPRxCount
;;;173      SetEPRxValid(ENDP0);
0000a4  2000              MOVS     r0,#0
0000a6  f7fffffe          BL       SetEPRxValid
;;;174    
;;;175      /* Set the device to response on default address */
;;;176      SetDeviceAddress(0);
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       SetDeviceAddress
;;;177    
;;;178      bDeviceState = ATTACHED;
0000b0  4909              LDR      r1,|L8.216|
0000b2  2001              MOVS     r0,#1
0000b4  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;179    
;;;180      CBW.dSignature = BOT_CBW_SIGNATURE;
0000b6  490a              LDR      r1,|L8.224|
0000b8  4808              LDR      r0,|L8.220|
;;;181      Bot_State = BOT_IDLE;
0000ba  6008              STR      r0,[r1,#0]  ; CBW
0000bc  4809              LDR      r0,|L8.228|
0000be  7005              STRB     r5,[r0,#0]
;;;182    
;;;183      USB_NotConfigured_LED();
0000c0  e8bd4070          POP      {r4-r6,lr}
0000c4  f7ffbffe          B.W      USB_NotConfigured_LED
;;;184    }
;;;185    
                          ENDP

                  |L8.200|
                          DCD      Device_Info
                  |L8.204|
                          DCD      MASS_ConfigDescriptor
                  |L8.208|
                          DCD      pInformation
                  |L8.212|
                          DCD      ||.data||+0x14
                  |L8.216|
                          DCD      bDeviceState
                  |L8.220|
                          DCD      0x43425355
                  |L8.224|
                          DCD      ||CBW||
                  |L8.228|
                          DCD      Bot_State

                          AREA ||i.MASS_Status_In||, CODE, READONLY, ALIGN=1

                  MASS_Status_In PROC
;;;239    *******************************************************************************/
;;;240    void MASS_Status_In(void)
000000  4770              BX       lr
;;;241    {
;;;242      return;
;;;243    }
;;;244    
                          ENDP


                          AREA ||i.MASS_Status_Out||, CODE, READONLY, ALIGN=1

                  MASS_Status_Out PROC
;;;251    *******************************************************************************/
;;;252    void MASS_Status_Out(void)
000000  4770              BX       lr
;;;253    {
;;;254      return;
;;;255    }
;;;256    
                          ENDP


                          AREA ||i.MASS_init||, CODE, READONLY, ALIGN=2

                  MASS_init PROC
;;;114    *******************************************************************************/
;;;115    void MASS_init()
000000  b510              PUSH     {r4,lr}
;;;116    {
;;;117      /* Update the serial number string descriptor with the data from the unique
;;;118      ID*/
;;;119      Get_SerialNum();
000002  f7fffffe          BL       Get_SerialNum
;;;120    
;;;121      pInformation->Current_Configuration = 0;
000006  4805              LDR      r0,|L11.28|
000008  2400              MOVS     r4,#0
00000a  6800              LDR      r0,[r0,#0]  ; pInformation
00000c  7284              STRB     r4,[r0,#0xa]
;;;122    
;;;123      /* Connect the device */
;;;124      PowerOn();
00000e  f7fffffe          BL       PowerOn
;;;125    
;;;126      /* Perform basic device initialization operations */
;;;127      USB_SIL_Init();
000012  f7fffffe          BL       USB_SIL_Init
;;;128    
;;;129      bDeviceState = UNCONNECTED;
000016  4802              LDR      r0,|L11.32|
000018  6004              STR      r4,[r0,#0]  ; bDeviceState
;;;130    }
00001a  bd10              POP      {r4,pc}
;;;131    
                          ENDP

                  |L11.28|
                          DCD      pInformation
                  |L11.32|
                          DCD      bDeviceState

                          AREA ||i.Mass_Storage_ClearFeature||, CODE, READONLY, ALIGN=2

                  Mass_Storage_ClearFeature PROC
;;;213    *******************************************************************************/
;;;214    void Mass_Storage_ClearFeature(void)
000000  4804              LDR      r0,|L12.20|
;;;215    {
;;;216      /* when the host send a CBW with invalid signature or invalid length the two
;;;217         Endpoints (IN & OUT) shall stall until receiving a Mass Storage Reset     */
;;;218      if (CBW.dSignature != BOT_CBW_SIGNATURE)
000002  4905              LDR      r1,|L12.24|
000004  6800              LDR      r0,[r0,#0]  ; CBW
000006  4288              CMP      r0,r1
000008  d002              BEQ      |L12.16|
;;;219        Bot_Abort(BOTH_DIR);
00000a  2002              MOVS     r0,#2
00000c  f7ffbffe          B.W      Bot_Abort
                  |L12.16|
;;;220    }
000010  4770              BX       lr
;;;221    
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      ||CBW||
                  |L12.24|
                          DCD      0x43425355

                          AREA ||i.Mass_Storage_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Mass_Storage_SetConfiguration PROC
;;;192    *******************************************************************************/
;;;193    void Mass_Storage_SetConfiguration(void)
000000  4809              LDR      r0,|L13.40|
;;;194    {
000002  b510              PUSH     {r4,lr}
;;;195      if (pInformation->Current_Configuration != 0)
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a80              LDRB     r0,[r0,#0xa]
000008  2800              CMP      r0,#0                 ;194
00000a  d00b              BEQ      |L13.36|
;;;196      {
;;;197        /* Device configured */
;;;198        bDeviceState = CONFIGURED;
00000c  4907              LDR      r1,|L13.44|
00000e  2005              MOVS     r0,#5
000010  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;199       
;;;200        ClearDTOG_TX(ENDP1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       ClearDTOG_TX
;;;201        ClearDTOG_RX(ENDP2);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       ClearDTOG_RX
;;;202    
;;;203        Bot_State = BOT_IDLE; /* set the Bot state machine to the IDLE state */
00001e  4904              LDR      r1,|L13.48|
000020  2000              MOVS     r0,#0
000022  7008              STRB     r0,[r1,#0]
                  |L13.36|
;;;204      }
;;;205    }
000024  bd10              POP      {r4,pc}
;;;206    
                          ENDP

000026  0000              DCW      0x0000
                  |L13.40|
                          DCD      pInformation
                  |L13.44|
                          DCD      bDeviceState
                  |L13.48|
                          DCD      Bot_State

                          AREA ||i.Mass_Storage_SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  Mass_Storage_SetDeviceAddress PROC
;;;228    *******************************************************************************/
;;;229    void Mass_Storage_SetDeviceAddress (void)
000000  4901              LDR      r1,|L14.8|
;;;230    {
;;;231      bDeviceState = ADDRESSED;
000002  2004              MOVS     r0,#4
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;232    }
000006  4770              BX       lr
;;;233    /*******************************************************************************
                          ENDP

                  |L14.8|
                          DCD      bDeviceState

                          AREA ||.data||, DATA, ALIGN=2

                  Max_Lun
                          DCD      0x00000000
                  Device_Descriptor
                          DCD      MASS_DeviceDescriptor
000008  0012              DCW      0x0012
00000a  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      MASS_ConfigDescriptor
000010  0020              DCW      0x0020
000012  0000              DCB      0x00,0x00
                  Device_Property
                          DCD      MASS_init
                          DCD      MASS_Reset
                          DCD      MASS_Status_In
                          DCD      MASS_Status_Out
                          DCD      MASS_Data_Setup
                          DCD      MASS_NoData_Setup
                          DCD      MASS_Get_Interface_Setting
                          DCD      MASS_GetDeviceDescriptor
                          DCD      MASS_GetConfigDescriptor
                          DCD      MASS_GetStringDescriptor
                          DCD      0x00000000
000040  40000000          DCB      0x40,0x00,0x00,0x00
                  String_Descriptor
                          DCD      MASS_StringLangID
000048  0004              DCW      0x0004
00004a  0000              DCB      0x00,0x00
                          DCD      MASS_StringVendor
000050  0026              DCW      0x0026
000052  0000              DCB      0x00,0x00
                          DCD      MASS_StringProduct
000058  0026              DCW      0x0026
00005a  0000              DCB      0x00,0x00
                          DCD      MASS_StringSerial
000060  001a              DCW      0x001a
000062  0000              DCB      0x00,0x00
                          DCD      MASS_StringInterface
000068  0010              DCW      0x0010
00006a  0000              DCB      0x00,0x00

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  Device_Table
000000  0301              DCB      0x03,0x01

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_ClearFeature
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetDeviceAddress

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_prop.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_Max_Lun____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_prop_c_Max_Lun____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_Max_Lun____REVSH|
#line 153
|__asm___10_usb_prop_c_Max_Lun____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_Max_Lun____RRX|
#line 328
|__asm___10_usb_prop_c_Max_Lun____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
