; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\mass_mal.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\mass_mal.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_FLASH\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\mass_mal.crf ..\src\mass_mal.c]
                          THUMB

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=1

                  MAL_GetStatus PROC
;;;266    *******************************************************************************/
;;;267    uint16_t MAL_GetStatus (uint8_t lun)
000000  2800              CMP      r0,#0
;;;268    {
000002  d000              BEQ      |L1.6|
;;;269    	if (lun == 0)
;;;270    	{
;;;271    		return MAL_OK;
;;;272    	}
;;;273    	return MAL_FAIL;
000004  2001              MOVS     r0,#1
                  |L1.6|
;;;274    }
000006  4770              BX       lr
;;;275    
                          ENDP


                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=2

                  MAL_Init PROC
;;;69     *******************************************************************************/
;;;70     uint16_t MAL_Init(uint8_t lun)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {
000004  b110              CBZ      r0,|L2.12|
;;;72     	uint16_t Index = 0, EraseCounter;
;;;73     	uint32_t Data = 0, Address = 0;
;;;74     
;;;75     	if(lun == 0)
;;;76     	{
;;;77     		Mass_Block_Count[0] = 240 * 1024 / SECTOR_SIZE;
;;;78     		Mass_Block_Size[0] = SECTOR_SIZE;
;;;79     		Mass_Memory_Size[0] = 240 * 1024;
;;;80     		Data = *(__IO uint16_t *)(FAT_TABLE_ADDR + 0x1FE);
;;;81     		if(Data != 0xAA55)//No FAT
;;;82     		{
;;;83     			FLASH_Unlock();
;;;84     			/* Clear pending flags (if any) */  
;;;85     			FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
;;;86     			
;;;87     			for(EraseCounter = 0; EraseCounter < 3; EraseCounter ++)//6K = 3 Pages = 12 sectors
;;;88     			{
;;;89     				FLASH_ErasePage(FAT_TABLE_ADDR + (FLASH_PAGE_SIZE * EraseCounter));
;;;90     			}
;;;91     			while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;92     /* boot sector */
;;;93     			Address = FAT_TABLE_ADDR;
;;;94     			for(Index = 0; Index < sizeof(FAT_DBR_TABLE); Index += 4)//write BPB Table
;;;95     			{
;;;96     				Data = FAT_DBR_TABLE[Index + 3]; Data <<= 8;
;;;97     				Data |= FAT_DBR_TABLE[Index + 2]; Data <<= 8;
;;;98     				Data |= FAT_DBR_TABLE[Index + 1]; Data <<= 8;
;;;99     				Data |= FAT_DBR_TABLE[Index];
;;;100    
;;;101    				FLASH_ProgramWord((Address + Index), Data);
;;;102    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;103    			}
;;;104    			FLASH_ProgramHalfWord((FAT_TABLE_ADDR + 0x1FE), 0xAA55);//write endian
;;;105    			while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;106    			Data = 0; Address = FAT_TABLE_ADDR + sizeof(FAT_DBR_TABLE);
;;;107    			for(Index = 0; Index < SECTOR_SIZE - sizeof(FAT_DBR_TABLE) - 2; Index += 2)// clear boot sector
;;;108    			{
;;;109    				FLASH_ProgramHalfWord((Address + Index), Data);
;;;110    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;111    			}
;;;112    /* FAT1 & FAT2 sector */
;;;113    			//FAT1
;;;114    			Address = FAT_TABLE_ADDR + FAT1_Offset;
;;;115    			for(Index = 0; Index < sizeof(FAT_Tab); Index += 4)
;;;116    			{
;;;117    				Data = FAT_Tab[Index + 3]; Data <<= 8;
;;;118    				Data |= FAT_Tab[Index + 2]; Data <<= 8;
;;;119    				Data |= FAT_Tab[Index + 1]; Data <<= 8;
;;;120    				Data |= FAT_Tab[Index];
;;;121    
;;;122    				FLASH_ProgramWord((Address + Index), Data);
;;;123    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;124    			}
;;;125    			Data = 0; Address = FAT_TABLE_ADDR + FAT1_Offset + sizeof(FAT_Tab);
;;;126    			for(Index = 0; Index < FAT_TAB_SIZE - sizeof(FAT_Tab); Index += 4)//flush sectors for FAT1             
;;;127    			{
;;;128    				FLASH_ProgramWord((Address + Index), Data);
;;;129    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;130    			}
;;;131                //FAT2
;;;132    			Address = FAT_TABLE_ADDR + FAT2_Offset;
;;;133    			for(Index = 0; Index < sizeof(FAT_Tab); Index += 4)
;;;134    			{
;;;135    				Data = FAT_Tab[Index + 3]; Data <<= 8;
;;;136    				Data |= FAT_Tab[Index + 2]; Data <<= 8;
;;;137    				Data |= FAT_Tab[Index + 1]; Data <<= 8;
;;;138    				Data |= FAT_Tab[Index];
;;;139    
;;;140    				FLASH_ProgramWord((Address + Index), Data);
;;;141    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;142    			}
;;;143    			Data = 0; Address = FAT_TABLE_ADDR + FAT2_Offset + sizeof(FAT_Tab);
;;;144    			for(Index = 0; Index < FAT_TAB_SIZE - sizeof(FAT_Tab); Index += 4)//flush sectors for FAT2     
;;;145    			{
;;;146    				FLASH_ProgramWord((Address + Index), Data);
;;;147    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;148    			}
;;;149    /* root directory */
;;;150                Address = FAT_TABLE_ADDR + FileTab_Offset;
;;;151    			for(Index = 0; Index < sizeof(FileTAB); Index += 4)//write file prop data
;;;152    			{
;;;153    				Data = FileTAB[Index + 3]; Data <<= 8;
;;;154    				Data |= FileTAB[Index + 2]; Data <<= 8;
;;;155    				Data |= FileTAB[Index + 1]; Data <<= 8;
;;;156    				Data |= FileTAB[Index];
;;;157    
;;;158    				FLASH_ProgramWord((Address + Index), Data);
;;;159    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;160    			}
;;;161    			Data = 0; Address = FAT_TABLE_ADDR + FileTab_Offset + sizeof(FileTAB);
;;;162    			for(Index = 0; Index < SECTOR_SIZE * 2 - sizeof(FileTAB); Index += 4)//flush 2 sectors for root directory   
;;;163    			{
;;;164    				FLASH_ProgramWord((Address + Index), Data);
;;;165    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;166    			}
;;;167    /* file data area */
;;;168    			Address = FAT_TABLE_ADDR + FileData_Offset;
;;;169    			for(Index = 0; Index < sizeof(FileData); Index += 4)//write file data
;;;170    			{
;;;171    				Data = FileData[Index + 3]; Data <<= 8;
;;;172    				Data |= FileData[Index + 2]; Data <<= 8;
;;;173    				Data |= FileData[Index + 1]; Data <<= 8;
;;;174    				Data |= FileData[Index];
;;;175    
;;;176    				FLASH_ProgramWord((Address + Index), Data);
;;;177    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;178    			}
;;;179    			Data = 0; Address = FAT_TABLE_ADDR + FileData_Offset + FileData_Size;
;;;180    			for(Index = 0; Index < SECTOR_SIZE - FileData_Size % SECTOR_SIZE; Index += 4)//flush end of sector
;;;181    			{
;;;182    				FLASH_ProgramWord((Address + Index), Data);
;;;183    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY) == SET){}
;;;184    			}
;;;185    /* -------- */
;;;186    			FLASH_Lock();
;;;187    		}
;;;188    		return MAL_OK;
;;;189    	}
;;;190    	return MAL_FAIL;
000006  2001              MOVS     r0,#1
                  |L2.8|
;;;191    }
000008  e8bd81f0          POP      {r4-r8,pc}
                  |L2.12|
00000c  498b              LDR      r1,|L2.572|
00000e  f44f70f0          MOV      r0,#0x1e0             ;77
000012  4d8b              LDR      r5,|L2.576|
000014  6008              STR      r0,[r1,#0]            ;78  ; Mass_Block_Count
000016  1f09              SUBS     r1,r1,#4              ;78
000018  f44f7000          MOV      r0,#0x200             ;78
00001c  6008              STR      r0,[r1,#0]            ;79  ; Mass_Block_Size
00001e  1f09              SUBS     r1,r1,#4              ;79
000020  f44f3070          MOV      r0,#0x3c000           ;79
000024  6008              STR      r0,[r1,#0]            ;80  ; Mass_Memory_Size
000026  f8b501fe          LDRH     r0,[r5,#0x1fe]        ;80
00002a  f64a2655          MOV      r6,#0xaa55            ;81
00002e  42b0              CMP      r0,r6                 ;81
000030  d07e              BEQ      |L2.304|
000032  f7fffffe          BL       FLASH_Unlock
000036  2034              MOVS     r0,#0x34              ;85
000038  f7fffffe          BL       FLASH_ClearFlag
00003c  f05f0400          MOVS.W   r4,#0                 ;87
                  |L2.64|
000040  eb0520c4          ADD      r0,r5,r4,LSL #11      ;89
000044  f7fffffe          BL       FLASH_ErasePage
000048  1c64              ADDS     r4,r4,#1              ;89
00004a  b2a4              UXTH     r4,r4                 ;87
00004c  2c03              CMP      r4,#3                 ;87
00004e  d3f7              BCC      |L2.64|
                  |L2.80|
000050  2001              MOVS     r0,#1                 ;91
000052  f7fffffe          BL       FLASH_GetFlagStatus
000056  2801              CMP      r0,#1                 ;91
000058  d0fa              BEQ      |L2.80|
00005a  4f7a              LDR      r7,|L2.580|
00005c  2400              MOVS     r4,#0                 ;94
                  |L2.94|
00005e  1939              ADDS     r1,r7,r4              ;96
000060  78c8              LDRB     r0,[r1,#3]            ;96
000062  0202              LSLS     r2,r0,#8              ;96
000064  7888              LDRB     r0,[r1,#2]            ;97
000066  4310              ORRS     r0,r0,r2              ;97
000068  0202              LSLS     r2,r0,#8              ;97
00006a  7848              LDRB     r0,[r1,#1]            ;98
00006c  5d39              LDRB     r1,[r7,r4]            ;99
00006e  4310              ORRS     r0,r0,r2              ;98
000070  ea412100          ORR      r1,r1,r0,LSL #8       ;99
000074  1928              ADDS     r0,r5,r4              ;101
000076  f7fffffe          BL       FLASH_ProgramWord
                  |L2.122|
00007a  2001              MOVS     r0,#1                 ;102
00007c  f7fffffe          BL       FLASH_GetFlagStatus
000080  2801              CMP      r0,#1                 ;102
000082  d0fa              BEQ      |L2.122|
000084  1d24              ADDS     r4,r4,#4              ;102
000086  b2a4              UXTH     r4,r4                 ;94
000088  2c40              CMP      r4,#0x40              ;94
00008a  d3e8              BCC      |L2.94|
00008c  4631              MOV      r1,r6                 ;104
00008e  486e              LDR      r0,|L2.584|
000090  f7fffffe          BL       FLASH_ProgramHalfWord
                  |L2.148|
000094  2001              MOVS     r0,#1                 ;105
000096  f7fffffe          BL       FLASH_GetFlagStatus
00009a  2801              CMP      r0,#1                 ;105
00009c  d0fa              BEQ      |L2.148|
00009e  2500              MOVS     r5,#0                 ;106
0000a0  4e67              LDR      r6,|L2.576|
0000a2  462c              MOV      r4,r5                 ;107
0000a4  3640              ADDS     r6,r6,#0x40           ;106
0000a6  f44f77df          MOV      r7,#0x1be             ;107
                  |L2.170|
0000aa  4629              MOV      r1,r5                 ;109
0000ac  1930              ADDS     r0,r6,r4              ;109
0000ae  f7fffffe          BL       FLASH_ProgramHalfWord
                  |L2.178|
0000b2  2001              MOVS     r0,#1                 ;110
0000b4  f7fffffe          BL       FLASH_GetFlagStatus
0000b8  2801              CMP      r0,#1                 ;110
0000ba  d0fa              BEQ      |L2.178|
0000bc  1ca4              ADDS     r4,r4,#2              ;110
0000be  b2a4              UXTH     r4,r4                 ;107
0000c0  42bc              CMP      r4,r7                 ;107
0000c2  d3f2              BCC      |L2.170|
0000c4  4e60              LDR      r6,|L2.584|
0000c6  4c61              LDR      r4,|L2.588|
0000c8  1cb6              ADDS     r6,r6,#2              ;114
0000ca  2500              MOVS     r5,#0                 ;115
                  |L2.204|
0000cc  1960              ADDS     r0,r4,r5              ;117
0000ce  78c1              LDRB     r1,[r0,#3]            ;117
0000d0  020a              LSLS     r2,r1,#8              ;117
0000d2  7881              LDRB     r1,[r0,#2]            ;118
0000d4  7840              LDRB     r0,[r0,#1]            ;119
0000d6  4311              ORRS     r1,r1,r2              ;118
0000d8  ea402001          ORR      r0,r0,r1,LSL #8       ;119
0000dc  5d61              LDRB     r1,[r4,r5]            ;120
0000de  ea412100          ORR      r1,r1,r0,LSL #8       ;120
0000e2  1970              ADDS     r0,r6,r5              ;122
0000e4  f7fffffe          BL       FLASH_ProgramWord
                  |L2.232|
0000e8  2001              MOVS     r0,#1                 ;123
0000ea  f7fffffe          BL       FLASH_GetFlagStatus
0000ee  2801              CMP      r0,#1                 ;123
0000f0  d0fa              BEQ      |L2.232|
0000f2  1d2d              ADDS     r5,r5,#4              ;123
0000f4  b2ad              UXTH     r5,r5                 ;115
0000f6  2d08              CMP      r5,#8                 ;115
0000f8  d3e8              BCC      |L2.204|
0000fa  4f53              LDR      r7,|L2.584|
0000fc  f04f0800          MOV      r8,#0                 ;125
000100  370a              ADDS     r7,r7,#0xa            ;125
000102  4645              MOV      r5,r8                 ;126
000104  f44f66bf          MOV      r6,#0x5f8             ;126
                  |L2.264|
000108  1978              ADDS     r0,r7,r5              ;128
00010a  4641              MOV      r1,r8                 ;128
00010c  f7fffffe          BL       FLASH_ProgramWord
                  |L2.272|
000110  2001              MOVS     r0,#1                 ;129
000112  f7fffffe          BL       FLASH_GetFlagStatus
000116  2801              CMP      r0,#1                 ;129
000118  d0fa              BEQ      |L2.272|
00011a  1d2d              ADDS     r5,r5,#4              ;129
00011c  b2ad              UXTH     r5,r5                 ;126
00011e  42b5              CMP      r5,r6                 ;126
000120  d3f2              BCC      |L2.264|
000122  4f4b              LDR      r7,|L2.592|
000124  2500              MOVS     r5,#0                 ;133
                  |L2.294|
000126  1960              ADDS     r0,r4,r5              ;135
000128  78c1              LDRB     r1,[r0,#3]            ;135
00012a  020a              LSLS     r2,r1,#8              ;135
00012c  7881              LDRB     r1,[r0,#2]            ;136
00012e  e000              B        |L2.306|
                  |L2.304|
000130  e081              B        |L2.566|
                  |L2.306|
000132  7840              LDRB     r0,[r0,#1]            ;137
000134  4311              ORRS     r1,r1,r2              ;136
000136  ea402001          ORR      r0,r0,r1,LSL #8       ;137
00013a  5d61              LDRB     r1,[r4,r5]            ;138
00013c  ea412100          ORR      r1,r1,r0,LSL #8       ;138
000140  1978              ADDS     r0,r7,r5              ;140
000142  f7fffffe          BL       FLASH_ProgramWord
                  |L2.326|
000146  2001              MOVS     r0,#1                 ;141
000148  f7fffffe          BL       FLASH_GetFlagStatus
00014c  2801              CMP      r0,#1                 ;141
00014e  d0fa              BEQ      |L2.326|
000150  1d2d              ADDS     r5,r5,#4              ;141
000152  b2ad              UXTH     r5,r5                 ;133
000154  2d08              CMP      r5,#8                 ;133
000156  d3e6              BCC      |L2.294|
000158  2700              MOVS     r7,#0                 ;143
00015a  4d3d              LDR      r5,|L2.592|
00015c  463c              MOV      r4,r7                 ;144
00015e  3508              ADDS     r5,r5,#8              ;143
                  |L2.352|
000160  1928              ADDS     r0,r5,r4              ;146
000162  4639              MOV      r1,r7                 ;146
000164  f7fffffe          BL       FLASH_ProgramWord
                  |L2.360|
000168  2001              MOVS     r0,#1                 ;147
00016a  f7fffffe          BL       FLASH_GetFlagStatus
00016e  2801              CMP      r0,#1                 ;147
000170  d0fa              BEQ      |L2.360|
000172  1d24              ADDS     r4,r4,#4              ;147
000174  b2a4              UXTH     r4,r4                 ;144
000176  42b4              CMP      r4,r6                 ;144
000178  d3f2              BCC      |L2.352|
00017a  4d34              LDR      r5,|L2.588|
00017c  4e35              LDR      r6,|L2.596|
00017e  2400              MOVS     r4,#0                 ;151
000180  3508              ADDS     r5,r5,#8              ;153
                  |L2.386|
000182  1928              ADDS     r0,r5,r4              ;153
000184  78c1              LDRB     r1,[r0,#3]            ;153
000186  020a              LSLS     r2,r1,#8              ;153
000188  7881              LDRB     r1,[r0,#2]            ;154
00018a  7840              LDRB     r0,[r0,#1]            ;155
00018c  4311              ORRS     r1,r1,r2              ;154
00018e  ea402001          ORR      r0,r0,r1,LSL #8       ;155
000192  5d29              LDRB     r1,[r5,r4]            ;156
000194  ea412100          ORR      r1,r1,r0,LSL #8       ;156
000198  1930              ADDS     r0,r6,r4              ;158
00019a  f7fffffe          BL       FLASH_ProgramWord
                  |L2.414|
00019e  2001              MOVS     r0,#1                 ;159
0001a0  f7fffffe          BL       FLASH_GetFlagStatus
0001a4  2801              CMP      r0,#1                 ;159
0001a6  d0fa              BEQ      |L2.414|
0001a8  1d24              ADDS     r4,r4,#4              ;159
0001aa  b2a4              UXTH     r4,r4                 ;151
0001ac  2c60              CMP      r4,#0x60              ;151
0001ae  d3e8              BCC      |L2.386|
0001b0  2600              MOVS     r6,#0                 ;161
0001b2  4d28              LDR      r5,|L2.596|
0001b4  4634              MOV      r4,r6                 ;162
0001b6  3560              ADDS     r5,r5,#0x60           ;161
0001b8  f44f7768          MOV      r7,#0x3a0             ;162
                  |L2.444|
0001bc  1928              ADDS     r0,r5,r4              ;164
0001be  4631              MOV      r1,r6                 ;164
0001c0  f7fffffe          BL       FLASH_ProgramWord
                  |L2.452|
0001c4  2001              MOVS     r0,#1                 ;165
0001c6  f7fffffe          BL       FLASH_GetFlagStatus
0001ca  2801              CMP      r0,#1                 ;165
0001cc  d0fa              BEQ      |L2.452|
0001ce  1d24              ADDS     r4,r4,#4              ;165
0001d0  b2a4              UXTH     r4,r4                 ;162
0001d2  42bc              CMP      r4,r7                 ;162
0001d4  d3f2              BCC      |L2.444|
0001d6  4d1d              LDR      r5,|L2.588|
0001d8  4e1f              LDR      r6,|L2.600|
0001da  2400              MOVS     r4,#0                 ;169
0001dc  3568              ADDS     r5,r5,#0x68           ;171
                  |L2.478|
0001de  1928              ADDS     r0,r5,r4              ;171
0001e0  78c1              LDRB     r1,[r0,#3]            ;171
0001e2  020a              LSLS     r2,r1,#8              ;171
0001e4  7881              LDRB     r1,[r0,#2]            ;172
0001e6  7840              LDRB     r0,[r0,#1]            ;173
0001e8  4311              ORRS     r1,r1,r2              ;172
0001ea  ea402001          ORR      r0,r0,r1,LSL #8       ;173
0001ee  5d29              LDRB     r1,[r5,r4]            ;174
0001f0  ea412100          ORR      r1,r1,r0,LSL #8       ;174
0001f4  1930              ADDS     r0,r6,r4              ;176
0001f6  f7fffffe          BL       FLASH_ProgramWord
                  |L2.506|
0001fa  2001              MOVS     r0,#1                 ;177
0001fc  f7fffffe          BL       FLASH_GetFlagStatus
000200  2801              CMP      r0,#1                 ;177
000202  d0fa              BEQ      |L2.506|
000204  1d24              ADDS     r4,r4,#4              ;177
000206  b2a4              UXTH     r4,r4                 ;169
000208  f5b47f21          CMP      r4,#0x284             ;169
00020c  d3e7              BCC      |L2.478|
00020e  2600              MOVS     r6,#0                 ;179
000210  4d12              LDR      r5,|L2.604|
000212  4634              MOV      r4,r6                 ;180
000214  f44f77be          MOV      r7,#0x17c             ;180
                  |L2.536|
000218  1928              ADDS     r0,r5,r4              ;182
00021a  4631              MOV      r1,r6                 ;182
00021c  f7fffffe          BL       FLASH_ProgramWord
                  |L2.544|
000220  2001              MOVS     r0,#1                 ;183
000222  f7fffffe          BL       FLASH_GetFlagStatus
000226  2801              CMP      r0,#1                 ;183
000228  d0fa              BEQ      |L2.544|
00022a  1d24              ADDS     r4,r4,#4              ;183
00022c  b2a4              UXTH     r4,r4                 ;180
00022e  42bc              CMP      r4,r7                 ;180
000230  d3f2              BCC      |L2.536|
000232  f7fffffe          BL       FLASH_Lock
                  |L2.566|
000236  2000              MOVS     r0,#0                 ;188
000238  e6e6              B        |L2.8|
;;;192    /*******************************************************************************
                          ENDP

00023a  0000              DCW      0x0000
                  |L2.572|
                          DCD      ||area_number.10||+0x8
                  |L2.576|
                          DCD      0x08004000
                  |L2.580|
                          DCD      ||.constdata||+0x2ec
                  |L2.584|
                          DCD      0x080041fe
                  |L2.588|
                          DCD      ||.constdata||
                  |L2.592|
                          DCD      0x08004800
                  |L2.596|
                          DCD      0x08004e00
                  |L2.600|
                          DCD      0x08005200
                  |L2.604|
                          DCD      0x08005484

                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=2

                  MAL_Read PROC
;;;245    *******************************************************************************/
;;;246    uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length)
000000  b570              PUSH     {r4-r6,lr}
;;;247    {
;;;248    	uint16_t Index = 0;
000002  2400              MOVS     r4,#0
000004  b108              CBZ      r0,|L3.10|
;;;249    	if(lun == 0)
;;;250    	{
;;;251    		for(Index = 0; Index < Transfer_Length; Index += 4)
;;;252    		{
;;;253    			Readbuff[Index>>2] = *((uint32_t *)(FAT_TABLE_ADDR + Memory_Offset + Index));
;;;254    		}
;;;255    		return MAL_OK;
;;;256    	}
;;;257    	return MAL_FAIL;
000006  2001              MOVS     r0,#1
;;;258    }
000008  bd70              POP      {r4-r6,pc}
                  |L3.10|
00000a  4806              LDR      r0,|L3.36|
00000c  e006              B        |L3.28|
                  |L3.14|
00000e  190d              ADDS     r5,r1,r4              ;253
000010  f0240603          BIC      r6,r4,#3              ;253
000014  582d              LDR      r5,[r5,r0]            ;253
000016  1d24              ADDS     r4,r4,#4              ;253
000018  5195              STR      r5,[r2,r6]            ;253
00001a  b2a4              UXTH     r4,r4                 ;251
                  |L3.28|
00001c  429c              CMP      r4,r3                 ;251
00001e  d3f6              BCC      |L3.14|
000020  2000              MOVS     r0,#0                 ;255
000022  bd70              POP      {r4-r6,pc}
;;;259    
                          ENDP

                  |L3.36|
                          DCD      0x08004000

                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=2

                  MAL_Write PROC
;;;198    *******************************************************************************/
;;;199    uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;200    {
000004  4692              MOV      r10,r2
;;;201    	uint16_t Index = 0;
;;;202    	uint32_t Offset = Memory_Offset;
;;;203    	uint32_t Address = 0;
;;;204    	uint32_t Pages = ((Offset >> 11) << 11);
000006  ea4f28d1          LSR      r8,r1,#11
00000a  4699              MOV      r9,r3                 ;200
00000c  2200              MOVS     r2,#0                 ;201
00000e  460c              MOV      r4,r1                 ;202
000010  ea4f28c8          LSL      r8,r8,#11
000014  b110              CBZ      r0,|L4.28|
;;;205    	if(lun == 0)
;;;206    	{
;;;207    		if(Memory_Offset > 0)
;;;208    		{
;;;209    			Address = FAT_TABLE_ADDR + Pages;
;;;210    			for(Index = 0; Index < FLASH_PAGE_SIZE; Index += 4)//Copy all page Data from flash memory.
;;;211    			{
;;;212    				Page[Index >> 2] = *(__IO uint32_t *)(Address + Index);
;;;213    			}
;;;214    			FLASH_Unlock();
;;;215    			while(FLASH_GetFlagStatus(FLASH_FLAG_BSY)==SET){}
;;;216    			/* Clear pending flags (if any) */  
;;;217    			FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
;;;218    			FLASH_ErasePage(Address);
;;;219    			while(FLASH_GetFlagStatus(FLASH_FLAG_BSY)==SET){}
;;;220    			Address = Offset - Pages;
;;;221    			Address >>= 2;
;;;222    			for(Index = 0; Index < Transfer_Length; Index += 4)
;;;223    			{
;;;224    				Page[Address + (Index >> 2)] = Writebuff[Index >> 2];
;;;225    			}
;;;226    			Address = FAT_TABLE_ADDR + Pages;
;;;227    			for(Index = 0; Index < FLASH_PAGE_SIZE; Index += 4)
;;;228    			{
;;;229    				FLASH_ProgramWord((Address + Index), Page[Index >> 2]);
;;;230    				while(FLASH_GetFlagStatus(FLASH_FLAG_BSY)==SET){}
;;;231    			}
;;;232    			FLASH_Lock();
;;;233    		}
;;;234    			return MAL_OK;
;;;235    	}
;;;236    	return MAL_FAIL;
000016  2001              MOVS     r0,#1
                  |L4.24|
;;;237    }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L4.28|
00001c  b3f4              CBZ      r4,|L4.156|
00001e  4824              LDR      r0,|L4.176|
000020  4e24              LDR      r6,|L4.180|
000022  eb080500          ADD      r5,r8,r0              ;209
000026  1407              ASRS     r7,r0,#16             ;210
                  |L4.40|
000028  58a8              LDR      r0,[r5,r2]            ;212
00002a  f0220103          BIC      r1,r2,#3              ;212
00002e  1d12              ADDS     r2,r2,#4              ;212
000030  b292              UXTH     r2,r2                 ;210
000032  5070              STR      r0,[r6,r1]            ;212
000034  42ba              CMP      r2,r7                 ;210
000036  d3f7              BCC      |L4.40|
000038  f7fffffe          BL       FLASH_Unlock
                  |L4.60|
00003c  2001              MOVS     r0,#1                 ;215
00003e  f7fffffe          BL       FLASH_GetFlagStatus
000042  2801              CMP      r0,#1                 ;215
000044  d0fa              BEQ      |L4.60|
000046  2034              MOVS     r0,#0x34              ;217
000048  f7fffffe          BL       FLASH_ClearFlag
00004c  4628              MOV      r0,r5                 ;218
00004e  f7fffffe          BL       FLASH_ErasePage
                  |L4.82|
000052  2001              MOVS     r0,#1                 ;219
000054  f7fffffe          BL       FLASH_GetFlagStatus
000058  2801              CMP      r0,#1                 ;219
00005a  d0fa              BEQ      |L4.82|
00005c  eba40008          SUB      r0,r4,r8              ;220
000060  0881              LSRS     r1,r0,#2              ;221
000062  2000              MOVS     r0,#0                 ;222
000064  e00a              B        |L4.124|
000066  bf00              NOP                            ;224
                  |L4.104|
000068  f0200303          BIC      r3,r0,#3              ;224
00006c  f85a2003          LDR      r2,[r10,r3]           ;224
000070  eb010390          ADD      r3,r1,r0,LSR #2       ;224
000074  1d00              ADDS     r0,r0,#4              ;224
000076  f8462023          STR      r2,[r6,r3,LSL #2]     ;224
00007a  b280              UXTH     r0,r0                 ;222
                  |L4.124|
00007c  4548              CMP      r0,r9                 ;222
00007e  d3f3              BCC      |L4.104|
000080  f05f0400          MOVS.W   r4,#0                 ;227
                  |L4.132|
000084  f0240003          BIC      r0,r4,#3              ;229
000088  5831              LDR      r1,[r6,r0]            ;229
00008a  1928              ADDS     r0,r5,r4              ;229
00008c  f7fffffe          BL       FLASH_ProgramWord
                  |L4.144|
000090  2001              MOVS     r0,#1                 ;230
000092  f7fffffe          BL       FLASH_GetFlagStatus
000096  2801              CMP      r0,#1                 ;230
000098  d0fa              BEQ      |L4.144|
00009a  e000              B        |L4.158|
                  |L4.156|
00009c  e005              B        |L4.170|
                  |L4.158|
00009e  1d24              ADDS     r4,r4,#4              ;230
0000a0  b2a4              UXTH     r4,r4                 ;227
0000a2  42bc              CMP      r4,r7                 ;227
0000a4  d3ee              BCC      |L4.132|
0000a6  f7fffffe          BL       FLASH_Lock
                  |L4.170|
0000aa  2000              MOVS     r0,#0                 ;234
0000ac  e7b4              B        |L4.24|
;;;238    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x08004000
                  |L4.180|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Page
                          %        2048

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  FAT_Tab
000000  00000003          DCB      0x00,0x00,0x00,0x03
000004  f0ff0000          DCB      0xf0,0xff,0x00,0x00
                  FileTAB
000008  e5b065fa          DCB      0xe5,0xb0,0x65,0xfa
00000c  5e87652c          DCB      0x5e,0x87,0x65,0x2c
000010  6787650f          DCB      0x67,0x87,0x65,0x0f
000014  00d26368          DCB      0x00,0xd2,0x63,0x68
000018  2e007400          DCB      0x2e,0x00,0x74,0x00
00001c  78007400          DCB      0x78,0x00,0x74,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  ffffffff          DCB      0xff,0xff,0xff,0xff
000028  e5c2bda8          DCB      0xe5,0xc2,0xbd,0xa8
00002c  cec47e31          DCB      0xce,0xc4,0x7e,0x31
000030  54585420          DCB      0x54,0x58,0x54,0x20
000034  007aea9e          DCB      0x00,0x7a,0xea,0x9e
000038  9a479a47          DCB      0x9a,0x47,0x9a,0x47
00003c  0000eb9e          DCB      0x00,0x00,0xeb,0x9e
000040  9a470000          DCB      0x9a,0x47,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  52454144          DCB      0x52,0x45,0x41,0x44
00004c  4d452020          DCB      0x4d,0x45,0x20,0x20
000050  54585420          DCB      0x54,0x58,0x54,0x20
000054  187aea9e          DCB      0x18,0x7a,0xea,0x9e
000058  9a479a47          DCB      0x9a,0x47,0x9a,0x47
00005c  0000629f          DCB      0x00,0x00,0x62,0x9f
000060  9a470200          DCB      0x9a,0x47,0x02,0x00
000064  84020000          DCB      0x84,0x02,0x00,0x00
                  FileData
000068  54686973          DCB      0x54,0x68,0x69,0x73
00006c  20697320          DCB      0x20,0x69,0x73,0x20
000070  74686520          DCB      0x74,0x68,0x65,0x20
000074  66697273          DCB      0x66,0x69,0x72,0x73
000078  74206f66          DCB      0x74,0x20,0x6f,0x66
00007c  20612070          DCB      0x20,0x61,0x20,0x70
000080  61697220          DCB      0x61,0x69,0x72,0x20
000084  6f662070          DCB      0x6f,0x66,0x20,0x70
000088  61706572          DCB      0x61,0x70,0x65,0x72
00008c  73206f6e          DCB      0x73,0x20,0x6f,0x6e
000090  20746865          DCB      0x20,0x74,0x68,0x65
000094  20746865          DCB      0x20,0x74,0x68,0x65
000098  6f727920          DCB      0x6f,0x72,0x79,0x20
00009c  616e6420          DCB      0x61,0x6e,0x64,0x20
0000a0  696d706c          DCB      0x69,0x6d,0x70,0x6c
0000a4  656d656e          DCB      0x65,0x6d,0x65,0x6e
0000a8  74617469          DCB      0x74,0x61,0x74,0x69
0000ac  6f6e206f          DCB      0x6f,0x6e,0x20,0x6f
0000b0  66206120          DCB      0x66,0x20,0x61,0x20
0000b4  64697265          DCB      0x64,0x69,0x72,0x65
0000b8  6374696f          DCB      0x63,0x74,0x69,0x6f
0000bc  6e2d636f          DCB      0x6e,0x2d,0x63,0x6f
0000c0  73696e65          DCB      0x73,0x69,0x6e,0x65
0000c4  2d6d6174          DCB      0x2d,0x6d,0x61,0x74
0000c8  72697820          DCB      0x72,0x69,0x78,0x20
0000cc  2844434d          DCB      0x28,0x44,0x43,0x4d
0000d0  29206261          DCB      0x29,0x20,0x62,0x61
0000d4  73656420          DCB      0x73,0x65,0x64,0x20
0000d8  696e6572          DCB      0x69,0x6e,0x65,0x72
0000dc  7469616c          DCB      0x74,0x69,0x61,0x6c
0000e0  206d6561          DCB      0x20,0x6d,0x65,0x61
0000e4  73757265          DCB      0x73,0x75,0x72,0x65
0000e8  6d656e74          DCB      0x6d,0x65,0x6e,0x74
0000ec  20756e69          DCB      0x20,0x75,0x6e,0x69
0000f0  7420666f          DCB      0x74,0x20,0x66,0x6f
0000f4  72206170          DCB      0x72,0x20,0x61,0x70
0000f8  706c6963          DCB      0x70,0x6c,0x69,0x63
0000fc  6174696f          DCB      0x61,0x74,0x69,0x6f
000100  6e20696e          DCB      0x6e,0x20,0x69,0x6e
000104  206d6f64          DCB      0x20,0x6d,0x6f,0x64
000108  656c2070          DCB      0x65,0x6c,0x20,0x70
00010c  6c616e65          DCB      0x6c,0x61,0x6e,0x65
000110  7320616e          DCB      0x73,0x20,0x61,0x6e
000114  64206865          DCB      0x64,0x20,0x68,0x65
000118  6c69636f          DCB      0x6c,0x69,0x63,0x6f
00011c  70746572          DCB      0x70,0x74,0x65,0x72
000120  732e2041          DCB      0x73,0x2e,0x20,0x41
000124  63747561          DCB      0x63,0x74,0x75,0x61
000128  6c6c792c          DCB      0x6c,0x6c,0x79,0x2c
00012c  20617420          DCB      0x20,0x61,0x74,0x20
000130  74686973          DCB      0x74,0x68,0x69,0x73
000134  20706f69          DCB      0x20,0x70,0x6f,0x69
000138  6e742c20          DCB      0x6e,0x74,0x2c,0x20
00013c  69742069          DCB      0x69,0x74,0x20,0x69
000140  73207374          DCB      0x73,0x20,0x73,0x74
000144  696c6c20          DCB      0x69,0x6c,0x6c,0x20
000148  61206472          DCB      0x61,0x20,0x64,0x72
00014c  6166742c          DCB      0x61,0x66,0x74,0x2c
000150  20746865          DCB      0x20,0x74,0x68,0x65
000154  72652069          DCB      0x72,0x65,0x20,0x69
000158  73207374          DCB      0x73,0x20,0x73,0x74
00015c  696c6c20          DCB      0x69,0x6c,0x6c,0x20
000160  61206c6f          DCB      0x61,0x20,0x6c,0x6f
000164  74206d6f          DCB      0x74,0x20,0x6d,0x6f
000168  72652077          DCB      0x72,0x65,0x20,0x77
00016c  6f726b20          DCB      0x6f,0x72,0x6b,0x20
000170  746f2062          DCB      0x74,0x6f,0x20,0x62
000174  6520646f          DCB      0x65,0x20,0x64,0x6f
000178  6e652e20          DCB      0x6e,0x65,0x2e,0x20
00017c  53657665          DCB      0x53,0x65,0x76,0x65
000180  72616c20          DCB      0x72,0x61,0x6c,0x20
000184  72657669          DCB      0x72,0x65,0x76,0x69
000188  65776572          DCB      0x65,0x77,0x65,0x72
00018c  732c2065          DCB      0x73,0x2c,0x20,0x65
000190  73706563          DCB      0x73,0x70,0x65,0x63
000194  69616c6c          DCB      0x69,0x61,0x6c,0x6c
000198  79204c6f          DCB      0x79,0x20,0x4c,0x6f
00019c  75697320          DCB      0x75,0x69,0x73,0x20
0001a0  4c654772          DCB      0x4c,0x65,0x47,0x72
0001a4  616e6420          DCB      0x61,0x6e,0x64,0x20
0001a8  616e6420          DCB      0x61,0x6e,0x64,0x20
0001ac  55464f2d          DCB      0x55,0x46,0x4f,0x2d
0001b0  6d616e2c          DCB      0x6d,0x61,0x6e,0x2c
0001b4  20686176          DCB      0x20,0x68,0x61,0x76
0001b8  65206d61          DCB      0x65,0x20,0x6d,0x61
0001bc  64652067          DCB      0x64,0x65,0x20,0x67
0001c0  6f6f6420          DCB      0x6f,0x6f,0x64,0x20
0001c4  73756767          DCB      0x73,0x75,0x67,0x67
0001c8  65737469          DCB      0x65,0x73,0x74,0x69
0001cc  6f6e7320          DCB      0x6f,0x6e,0x73,0x20
0001d0  6f6e2061          DCB      0x6f,0x6e,0x20,0x61
0001d4  64646974          DCB      0x64,0x64,0x69,0x74
0001d8  696f6e73          DCB      0x69,0x6f,0x6e,0x73
0001dc  20616e64          DCB      0x20,0x61,0x6e,0x64
0001e0  20726576          DCB      0x20,0x72,0x65,0x76
0001e4  6973696f          DCB      0x69,0x73,0x69,0x6f
0001e8  6e732074          DCB      0x6e,0x73,0x20,0x74
0001ec  68617420          DCB      0x68,0x61,0x74,0x20
0001f0  77652073          DCB      0x77,0x65,0x20,0x73
0001f4  686f756c          DCB      0x68,0x6f,0x75,0x6c
0001f8  64206d61          DCB      0x64,0x20,0x6d,0x61
0001fc  6b652061          DCB      0x6b,0x65,0x20,0x61
000200  6e642070          DCB      0x6e,0x64,0x20,0x70
000204  72657061          DCB      0x72,0x65,0x70,0x61
000208  72656420          DCB      0x72,0x65,0x64,0x20
00020c  736f6d65          DCB      0x73,0x6f,0x6d,0x65
000210  20666967          DCB      0x20,0x66,0x69,0x67
000214  75726573          DCB      0x75,0x72,0x65,0x73
000218  20746861          DCB      0x20,0x74,0x68,0x61
00021c  74207765          DCB      0x74,0x20,0x77,0x65
000220  20686176          DCB      0x20,0x68,0x61,0x76
000224  65206e6f          DCB      0x65,0x20,0x6e,0x6f
000228  7420696e          DCB      0x74,0x20,0x69,0x6e
00022c  636c7564          DCB      0x63,0x6c,0x75,0x64
000230  65642079          DCB      0x65,0x64,0x20,0x79
000234  65742e20          DCB      0x65,0x74,0x2e,0x20
000238  57652077          DCB      0x57,0x65,0x20,0x77
00023c  696c6c20          DCB      0x69,0x6c,0x6c,0x20
000240  6576656e          DCB      0x65,0x76,0x65,0x6e
000244  7475616c          DCB      0x74,0x75,0x61,0x6c
000248  6c792069          DCB      0x6c,0x79,0x20,0x69
00024c  6e636f72          DCB      0x6e,0x63,0x6f,0x72
000250  706f7261          DCB      0x70,0x6f,0x72,0x61
000254  74652074          DCB      0x74,0x65,0x20,0x74
000258  68656972          DCB      0x68,0x65,0x69,0x72
00025c  20737567          DCB      0x20,0x73,0x75,0x67
000260  67657374          DCB      0x67,0x65,0x73,0x74
000264  696f6e73          DCB      0x69,0x6f,0x6e,0x73
000268  2c206275          DCB      0x2c,0x20,0x62,0x75
00026c  74206974          DCB      0x74,0x20,0x69,0x74
000270  206d6179          DCB      0x20,0x6d,0x61,0x79
000274  2074616b          DCB      0x20,0x74,0x61,0x6b
000278  65206120          DCB      0x65,0x20,0x61,0x20
00027c  6c6f6e67          DCB      0x6c,0x6f,0x6e,0x67
000280  2074696d          DCB      0x20,0x74,0x69,0x6d
000284  6520746f          DCB      0x65,0x20,0x74,0x6f
000288  20676574          DCB      0x20,0x67,0x65,0x74
00028c  20746865          DCB      0x20,0x74,0x68,0x65
000290  72652e20          DCB      0x72,0x65,0x2e,0x20
000294  496e2074          DCB      0x49,0x6e,0x20,0x74
000298  6865206d          DCB      0x68,0x65,0x20,0x6d
00029c  65616e74          DCB      0x65,0x61,0x6e,0x74
0002a0  696d652c          DCB      0x69,0x6d,0x65,0x2c
0002a4  20776520          DCB      0x20,0x77,0x65,0x20
0002a8  7468696e          DCB      0x74,0x68,0x69,0x6e
0002ac  6b207468          DCB      0x6b,0x20,0x74,0x68
0002b0  65726520          DCB      0x65,0x72,0x65,0x20
0002b4  69732061          DCB      0x69,0x73,0x20,0x61
0002b8  6e206175          DCB      0x6e,0x20,0x61,0x75
0002bc  6469656e          DCB      0x64,0x69,0x65,0x6e
0002c0  63652077          DCB      0x63,0x65,0x20,0x77
0002c4  686f2063          DCB      0x68,0x6f,0x20,0x63
0002c8  616e2062          DCB      0x61,0x6e,0x20,0x62
0002cc  656e6566          DCB      0x65,0x6e,0x65,0x66
0002d0  69742066          DCB      0x69,0x74,0x20,0x66
0002d4  726f6d20          DCB      0x72,0x6f,0x6d,0x20
0002d8  77686174          DCB      0x77,0x68,0x61,0x74
0002dc  20776520          DCB      0x20,0x77,0x65,0x20
0002e0  68617665          DCB      0x68,0x61,0x76,0x65
0002e4  20736f20          DCB      0x20,0x73,0x6f,0x20
0002e8  6661722e          DCB      0x66,0x61,0x72,0x2e
                  FAT_DBR_TABLE
0002ec  eb3c904d          DCB      0xeb,0x3c,0x90,0x4d
0002f0  5357494e          DCB      0x53,0x57,0x49,0x4e
0002f4  342e3100          DCB      0x34,0x2e,0x31,0x00
0002f8  02010100          DCB      0x02,0x01,0x01,0x00
0002fc  022000e0          DCB      0x02,0x20,0x00,0xe0
000300  01f00300          DCB      0x01,0xf0,0x03,0x00
000304  01000100          DCB      0x01,0x00,0x01,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00002974          DCB      0x00,0x00,0x29,0x74
000314  19022759          DCB      0x19,0x02,0x27,0x59
000318  554e4545          DCB      0x55,0x4e,0x45,0x45
00031c  43205553          DCB      0x43,0x20,0x55,0x53
000320  42204641          DCB      0x42,0x20,0x46,0x41
000324  54313220          DCB      0x54,0x31,0x32,0x20
000328  20200000          DCB      0x20,0x20,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  Status
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  Mass_Memory_Size
                          DCD      0x00000000
                  Mass_Block_Size
                          DCD      0x00000000
                  Mass_Block_Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\mass_mal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Page____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_mass_mal_c_Page____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Page____REVSH|
#line 153
|__asm___10_mass_mal_c_Page____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Page____RRX|
#line 328
|__asm___10_mass_mal_c_Page____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
