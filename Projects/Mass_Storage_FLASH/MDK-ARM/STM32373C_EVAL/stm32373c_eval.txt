; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32373c_eval.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32373c_eval.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_FLASH\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32373c_eval.crf ..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL\stm32373c_eval.c]
                          THUMB

                          AREA ||i.LM75_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_DeInit PROC
;;;501      */
;;;502    void LM75_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;503    {
;;;504      GPIO_InitTypeDef  GPIO_InitStructure;
;;;505    
;;;506      /*!< Disable LM75_I2C */
;;;507      I2C_Cmd(LM75_I2C, DISABLE);
000002  4c14              LDR      r4,|L1.84|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;508      
;;;509      /*!< DeInitializes the LM75_I2C */
;;;510      I2C_DeInit(LM75_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;511      
;;;512      /*!< LM75_I2C Periph clock disable */
;;;513      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f0080          MOV      r0,#0x400000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;514        
;;;515      /*!< Configure LM75_I2C pins: SCL */
;;;516      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
00001c  1560              ASRS     r0,r4,#21
;;;517      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;518      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000026  f88d0007          STRB     r0,[sp,#7]
;;;519      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00002a  f04f4490          MOV      r4,#0x48000000
00002e  4669              MOV      r1,sp
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       GPIO_Init
;;;520    
;;;521      /*!< Configure LM75_I2C pins: SDA */
;;;522      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
000036  f44f6080          MOV      r0,#0x400
;;;523      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
00003a  9000              STR      r0,[sp,#0]
00003c  4669              MOV      r1,sp
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       GPIO_Init
;;;524    
;;;525      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;526      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
000044  f44f7080          MOV      r0,#0x100
;;;527      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000048  9000              STR      r0,[sp,#0]
00004a  4669              MOV      r1,sp
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GPIO_Init
;;;528    }
000052  bd1c              POP      {r2-r4,pc}
;;;529    
                          ENDP

                  |L1.84|
                          DCD      0x40005800

                          AREA ||i.LM75_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_Init PROC
;;;535      */
;;;536    void LM75_LowLevel_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;537    {
;;;538      GPIO_InitTypeDef  GPIO_InitStructure;
;;;539    
;;;540      /*!< LM75_I2C Periph clock enable */
;;;541      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  0588              LSLS     r0,r1,#22
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;542        
;;;543      /* Configure the I2C clock source. The clock is derived from the SYSCLK */
;;;544      RCC_I2CCLKConfig(RCC_I2C2CLK_SYSCLK);
00000a  481c              LDR      r0,|L2.124|
00000c  f7fffffe          BL       RCC_I2CCLKConfig
;;;545      
;;;546      /*!< LM75_I2C_SCL_GPIO_CLK, LM75_I2C_SDA_GPIO_CLK 
;;;547           and LM75_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
;;;548      RCC_AHBPeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
000010  2101              MOVS     r1,#1
000012  0448              LSLS     r0,r1,#17
000014  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;549                            LM75_I2C_SMBUSALERT_GPIO_CLK, ENABLE);
;;;550      
;;;551      /* Connect PXx to I2C_SCL */
;;;552      GPIO_PinAFConfig(LM75_I2C_SCL_GPIO_PORT, LM75_I2C_SCL_SOURCE, LM75_I2C_SCL_AF);
000018  2109              MOVS     r1,#9
00001a  06cc              LSLS     r4,r1,#27
00001c  2204              MOVS     r2,#4
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       GPIO_PinAFConfig
;;;553    
;;;554      /* Connect PXx to I2C_SDA */
;;;555      GPIO_PinAFConfig(LM75_I2C_SDA_GPIO_PORT, LM75_I2C_SDA_SOURCE, LM75_I2C_SDA_AF); 
000024  2204              MOVS     r2,#4
000026  210a              MOVS     r1,#0xa
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_PinAFConfig
;;;556    
;;;557      /* Connect PXx to I2C_SMBUSALER */
;;;558      GPIO_PinAFConfig(LM75_I2C_SMBUSALERT_GPIO_PORT, LM75_I2C_SMBUSALERT_SOURCE, LM75_I2C_SMBUSALERT_AF);
00002e  2204              MOVS     r2,#4
000030  2108              MOVS     r1,#8
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GPIO_PinAFConfig
;;;559        
;;;560      /*!< Configure LM75_I2C pins: SCL */
;;;561      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
000038  f44f7000          MOV      r0,#0x200
;;;562      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003c  9000              STR      r0,[sp,#0]
00003e  2002              MOVS     r0,#2
000040  f88d0004          STRB     r0,[sp,#4]
;;;563      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000044  2003              MOVS     r0,#3
000046  f88d0005          STRB     r0,[sp,#5]
;;;564      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
00004a  2001              MOVS     r0,#1
00004c  f88d0006          STRB     r0,[sp,#6]
;;;565      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000050  2000              MOVS     r0,#0
000052  f88d0007          STRB     r0,[sp,#7]
;;;566      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000056  4669              MOV      r1,sp
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       GPIO_Init
;;;567    
;;;568      /*!< Configure LM75_I2C pins: SDA */
;;;569      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
00005e  f44f6080          MOV      r0,#0x400
;;;570      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000062  9000              STR      r0,[sp,#0]
000064  4669              MOV      r1,sp
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       GPIO_Init
;;;571    
;;;572      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;573      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
00006c  f44f7080          MOV      r0,#0x100
;;;574      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000070  9000              STR      r0,[sp,#0]
000072  4669              MOV      r1,sp
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       GPIO_Init
;;;575    }
00007a  bd1c              POP      {r2-r4,pc}
;;;576    
                          ENDP

                  |L2.124|
                          DCD      0x10000020

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;387      */
;;;388    void SD_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;389    {
;;;390      GPIO_InitTypeDef  GPIO_InitStructure;
;;;391      
;;;392      SPI_Cmd(SD_SPI, DISABLE); /*!< SD_SPI disable */
000002  4c1a              LDR      r4,|L3.108|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;393      SPI_I2S_DeInit(SD_SPI);   /*!< DeInitializes the SD_SPI */
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;394      
;;;395      /*!< SD_SPI Periph clock disable */
;;;396      RCC_APB1PeriphClockCmd(SD_SPI_CLK, DISABLE); 
000012  2100              MOVS     r1,#0
000014  13e0              ASRS     r0,r4,#15
000016  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;397    
;;;398      /*!< Configure SD_SPI pins: SCK */
;;;399      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
00001a  1520              ASRS     r0,r4,#20
;;;400      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001c  9000              STR      r0,[sp,#0]
00001e  2000              MOVS     r0,#0
000020  f88d0004          STRB     r0,[sp,#4]
;;;401      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;402      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000024  4c12              LDR      r4,|L3.112|
000026  f88d0007          STRB     r0,[sp,#7]            ;401
00002a  4669              MOV      r1,sp
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GPIO_Init
;;;403    
;;;404      /*!< Configure SD_SPI pins: MISO */
;;;405      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
000032  f44f6000          MOV      r0,#0x800
;;;406      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000036  9000              STR      r0,[sp,#0]
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;407    
;;;408      /*!< Configure SD_SPI pins: MOSI */
;;;409      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
000040  f44f5080          MOV      r0,#0x1000
;;;410      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000044  9000              STR      r0,[sp,#0]
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       GPIO_Init
;;;411    
;;;412      /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;413      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
00004e  2004              MOVS     r0,#4
;;;414      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
000050  4c08              LDR      r4,|L3.116|
000052  9000              STR      r0,[sp,#0]
000054  4669              MOV      r1,sp
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       GPIO_Init
;;;415    
;;;416      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;417      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
00005c  2008              MOVS     r0,#8
;;;418      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
00005e  9000              STR      r0,[sp,#0]
000060  4669              MOV      r1,sp
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       GPIO_Init
;;;419    }
000068  bd1c              POP      {r2-r4,pc}
;;;420    
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      0x40003c00
                  |L3.112|
                          DCD      0x48000800
                  |L3.116|
                          DCD      0x48001000

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;426      */
;;;427    void SD_LowLevel_Init(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;428    {
000004  b087              SUB      sp,sp,#0x1c
;;;429      GPIO_InitTypeDef  GPIO_InitStructure;
;;;430      SPI_InitTypeDef   SPI_InitStructure;
;;;431    
;;;432      /*!< SD_SPI_CS_GPIO, SD_SPI_MOSI_GPIO, SD_SPI_MISO_GPIO, SD_SPI_DETECT_GPIO 
;;;433           and SD_SPI_SCK_GPIO Periph clock enable */
;;;434      RCC_AHBPeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |
000006  2101              MOVS     r1,#1
000008  f44f1020          MOV      r0,#0x280000
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;435                            SD_SPI_SCK_GPIO_CLK | SD_DETECT_GPIO_CLK, ENABLE);
;;;436    
;;;437      /*!< SD_SPI Periph clock enable */
;;;438      RCC_APB1PeriphClockCmd(SD_SPI_CLK, ENABLE); 
000010  2101              MOVS     r1,#1
000012  03c8              LSLS     r0,r1,#15
000014  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;439    
;;;440      /*!< Configure SD_SPI pins: SCK */
;;;441      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
;;;442      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000018  2602              MOVS     r6,#2
00001a  f88d6004          STRB     r6,[sp,#4]
;;;443      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  2703              MOVS     r7,#3
000020  f44f6080          MOV      r0,#0x400             ;441
000024  f88d7005          STRB     r7,[sp,#5]
;;;444      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000028  2400              MOVS     r4,#0
;;;445      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
;;;446      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002a  f8df90d4          LDR      r9,|L4.256|
00002e  9000              STR      r0,[sp,#0]            ;442
000030  f88d4006          STRB     r4,[sp,#6]            ;444
000034  2501              MOVS     r5,#1                 ;445
000036  f88d5007          STRB     r5,[sp,#7]            ;445
00003a  4669              MOV      r1,sp
00003c  4648              MOV      r0,r9
00003e  f7fffffe          BL       GPIO_Init
;;;447    
;;;448      /*!< Configure SD_SPI pins: MISO */
;;;449      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
000042  02e8              LSLS     r0,r5,#11
;;;450      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000044  9000              STR      r0,[sp,#0]
000046  4669              MOV      r1,sp
000048  4648              MOV      r0,r9
00004a  f7fffffe          BL       GPIO_Init
;;;451    
;;;452      /*!< Configure SD_SPI pins: MOSI */
;;;453      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
00004e  f44f5880          MOV      r8,#0x1000
;;;454      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4648              MOV      r0,r9
000056  f8cd8000          STR      r8,[sp,#0]
00005a  f7fffffe          BL       GPIO_Init
;;;455    
;;;456      /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;457      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
;;;458      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00005e  f88d5004          STRB     r5,[sp,#4]
;;;459      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000062  f88d4006          STRB     r4,[sp,#6]
;;;460      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000066  f88d5007          STRB     r5,[sp,#7]
;;;461      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00006a  f88d7005          STRB     r7,[sp,#5]
00006e  2004              MOVS     r0,#4                 ;457
;;;462      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
000070  4f24              LDR      r7,|L4.260|
000072  9000              STR      r0,[sp,#0]            ;458
000074  4669              MOV      r1,sp
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       GPIO_Init
;;;463    
;;;464      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;465      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
00007c  2008              MOVS     r0,#8
;;;466      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00007e  9000              STR      r0,[sp,#0]
000080  f88d4004          STRB     r4,[sp,#4]
;;;467      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000084  f88d5007          STRB     r5,[sp,#7]
;;;468      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000088  4669              MOV      r1,sp
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       GPIO_Init
;;;469    
;;;470      /* Connect PXx to SD_SPI_SCK */
;;;471      GPIO_PinAFConfig(SD_SPI_SCK_GPIO_PORT, SD_SPI_SCK_SOURCE, SD_SPI_SCK_AF);
000090  2206              MOVS     r2,#6
000092  210a              MOVS     r1,#0xa
000094  4648              MOV      r0,r9
000096  f7fffffe          BL       GPIO_PinAFConfig
;;;472    
;;;473      /* Connect PXx to SD_SPI_MISO */
;;;474      GPIO_PinAFConfig(SD_SPI_MISO_GPIO_PORT, SD_SPI_MISO_SOURCE, SD_SPI_MISO_AF); 
00009a  2206              MOVS     r2,#6
00009c  210b              MOVS     r1,#0xb
00009e  4648              MOV      r0,r9
0000a0  f7fffffe          BL       GPIO_PinAFConfig
;;;475    
;;;476      /* Connect PXx to SD_SPI_MOSI */
;;;477      GPIO_PinAFConfig(SD_SPI_MOSI_GPIO_PORT, SD_SPI_MOSI_SOURCE, SD_SPI_MOSI_AF);  
0000a4  2206              MOVS     r2,#6
0000a6  210c              MOVS     r1,#0xc
0000a8  4648              MOV      r0,r9
0000aa  f7fffffe          BL       GPIO_PinAFConfig
;;;478      
;;;479      /*!< SD_SPI Config */
;;;480      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
0000ae  f8ad4008          STRH     r4,[sp,#8]
;;;481      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
0000b2  f44f7082          MOV      r0,#0x104
0000b6  f8ad000a          STRH     r0,[sp,#0xa]
;;;482      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
0000ba  f44f60e0          MOV      r0,#0x700
0000be  f8ad000c          STRH     r0,[sp,#0xc]
;;;483      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
;;;484      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
0000c2  f8ad5010          STRH     r5,[sp,#0x10]
;;;485      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
0000c6  0268              LSLS     r0,r5,#9
;;;486      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
0000c8  f8ad4014          STRH     r4,[sp,#0x14]
0000cc  f8ad0012          STRH     r0,[sp,#0x12]         ;485
;;;487    
;;;488      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000d0  f8ad4016          STRH     r4,[sp,#0x16]
;;;489      SPI_InitStructure.SPI_CRCPolynomial = 7;
0000d4  2007              MOVS     r0,#7
;;;490      SPI_Init(SD_SPI, &SPI_InitStructure);
0000d6  4c0c              LDR      r4,|L4.264|
0000d8  f8ad0018          STRH     r0,[sp,#0x18]         ;489
0000dc  f8ad600e          STRH     r6,[sp,#0xe]          ;483
0000e0  a902              ADD      r1,sp,#8
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       SPI_Init
;;;491      
;;;492      SPI_RxFIFOThresholdConfig(SD_SPI, SPI_RxFIFOThreshold_QF);
0000e8  4641              MOV      r1,r8
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       SPI_RxFIFOThresholdConfig
;;;493      
;;;494      SPI_Cmd(SD_SPI, ENABLE); /*!< SD_SPI enable */
0000f0  2101              MOVS     r1,#1
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       SPI_Cmd
;;;495    }
0000f8  b007              ADD      sp,sp,#0x1c
0000fa  e8bd83f0          POP      {r4-r9,pc}
;;;496    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L4.256|
                          DCD      0x48000800
                  |L4.260|
                          DCD      0x48001000
                  |L4.264|
                          DCD      0x40003c00

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;347      */
;;;348    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;349    {
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;350      GPIO_InitTypeDef GPIO_InitStructure;
;;;351    
;;;352      /* Enable GPIO clock */
;;;353      RCC_AHBPeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
000008  492a              LDR      r1,|L5.180|
00000a  482a              LDR      r0,|L5.180|
00000c  1d09              ADDS     r1,r1,#4
00000e  f8500024          LDR      r0,[r0,r4,LSL #2]
000012  f8511024          LDR      r1,[r1,r4,LSL #2]
000016  4308              ORRS     r0,r0,r1
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;354    
;;;355      /* Enable USART clock */
;;;356      RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
00001e  4825              LDR      r0,|L5.180|
000020  2101              MOVS     r1,#1
000022  1f00              SUBS     r0,r0,#4
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;357    
;;;358      /* Connect PXx to USARTx_Tx */
;;;359      GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
00002c  4821              LDR      r0,|L5.180|
00002e  4d22              LDR      r5,|L5.184|
000030  3814              SUBS     r0,r0,#0x14
000032  5d02              LDRB     r2,[r0,r4]
000034  1d80              ADDS     r0,r0,#6
000036  f8301014          LDRH     r1,[r0,r4,LSL #1]
00003a  f8550024          LDR      r0,[r5,r4,LSL #2]
00003e  f7fffffe          BL       GPIO_PinAFConfig
;;;360    
;;;361      /* Connect PXx to USARTx_Rx */
;;;362      GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
000042  481c              LDR      r0,|L5.180|
000044  1d2e              ADDS     r6,r5,#4
000046  3813              SUBS     r0,r0,#0x13
000048  5d02              LDRB     r2,[r0,r4]
00004a  1dc0              ADDS     r0,r0,#7
00004c  f8301014          LDRH     r1,[r0,r4,LSL #1]
000050  f8560024          LDR      r0,[r6,r4,LSL #2]
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;363      
;;;364      /* Configure USART Tx as alternate function push-pull */
;;;365      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000058  4816              LDR      r0,|L5.180|
;;;366      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;367      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;368      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;369      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
;;;370      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  3812              SUBS     r0,r0,#0x12           ;365
00005e  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;365
000062  9000              STR      r0,[sp,#0]            ;366
000064  2002              MOVS     r0,#2                 ;366
000066  f88d0004          STRB     r0,[sp,#4]            ;366
00006a  2003              MOVS     r0,#3                 ;367
00006c  f88d0005          STRB     r0,[sp,#5]            ;367
000070  2000              MOVS     r0,#0                 ;368
000072  f88d0006          STRB     r0,[sp,#6]            ;368
000076  2001              MOVS     r0,#1                 ;369
000078  f88d0007          STRB     r0,[sp,#7]            ;369
00007c  f8550024          LDR      r0,[r5,r4,LSL #2]
000080  f7fffffe          BL       GPIO_Init
;;;371        
;;;372      /* Configure USART Rx as alternate function push-pull */
;;;373      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
000084  480b              LDR      r0,|L5.180|
;;;374      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
000086  4669              MOV      r1,sp
000088  3810              SUBS     r0,r0,#0x10           ;373
00008a  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;373
00008e  9000              STR      r0,[sp,#0]
000090  f8560024          LDR      r0,[r6,r4,LSL #2]
000094  f7fffffe          BL       GPIO_Init
;;;375    
;;;376      /* USART configuration */
;;;377      USART_Init(COM_USART[COM], USART_InitStruct);
000098  1f2d              SUBS     r5,r5,#4
00009a  4639              MOV      r1,r7
00009c  f8550024          LDR      r0,[r5,r4,LSL #2]
0000a0  f7fffffe          BL       USART_Init
;;;378        
;;;379      /* Enable USART */
;;;380      USART_Cmd(COM_USART[COM], ENABLE);
0000a4  f8550024          LDR      r0,[r5,r4,LSL #2]
0000a8  2101              MOVS     r1,#1
0000aa  f7fffffe          BL       USART_Cmd
;;;381    }
0000ae  e8bd81fc          POP      {r2-r8,pc}
;;;382    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L5.180|
                          DCD      ||.constdata||+0x14
                  |L5.184|
                          DCD      ||.data||+0x4

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;176      */
;;;177    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b57c              PUSH     {r2-r6,lr}
;;;178    {
000002  4604              MOV      r4,r0
;;;179      GPIO_InitTypeDef  GPIO_InitStructure;
;;;180      
;;;181      /* Enable the GPIO_LED Clock */
;;;182      RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  4810              LDR      r0,|L6.72|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;183    
;;;184      /* Configure the GPIO_LED pin */
;;;185      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  4d0d              LDR      r5,|L6.72|
;;;186      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;187      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;188      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;189      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;190      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000012  4e0e              LDR      r6,|L6.76|
000014  3d2a              SUBS     r5,r5,#0x2a           ;185
000016  4669              MOV      r1,sp
000018  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;185
00001c  9000              STR      r0,[sp,#0]            ;186
00001e  2001              MOVS     r0,#1                 ;186
000020  f88d0004          STRB     r0,[sp,#4]            ;186
000024  2000              MOVS     r0,#0                 ;187
000026  f88d0006          STRB     r0,[sp,#6]            ;187
00002a  f88d0007          STRB     r0,[sp,#7]            ;188
00002e  2003              MOVS     r0,#3                 ;189
000030  f88d0005          STRB     r0,[sp,#5]            ;189
000034  f8560024          LDR      r0,[r6,r4,LSL #2]
000038  f7fffffe          BL       GPIO_Init
;;;191      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
00003c  f8561024          LDR      r1,[r6,r4,LSL #2]
000040  f8350014          LDRH     r0,[r5,r4,LSL #1]
000044  6188              STR      r0,[r1,#0x18]
;;;192    }
000046  bd7c              POP      {r2-r6,pc}
;;;193    
                          ENDP

                  |L6.72|
                          DCD      ||.constdata||+0x34
                  |L6.76|
                          DCD      ||.data||+0xc

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;216      */
;;;217    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L7.16|
;;;218    {
;;;219      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
000002  4a04              LDR      r2,|L7.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6181              STR      r1,[r0,#0x18]
;;;220    }
00000e  4770              BX       lr
;;;221    
                          ENDP

                  |L7.16|
                          DCD      ||.constdata||+0xa
                  |L7.20|
                          DCD      ||.data||+0xc

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;201      */
;;;202    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L8.16|
;;;203    {
;;;204      GPIO_PORT[Led]->BRR = GPIO_PIN[Led];
000002  4a04              LDR      r2,|L8.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  8501              STRH     r1,[r0,#0x28]
;;;205    }
00000e  4770              BX       lr
;;;206    
                          ENDP

                  |L8.16|
                          DCD      ||.constdata||+0xa
                  |L8.20|
                          DCD      ||.data||+0xc

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;231      */
;;;232    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L9.20|
;;;233    {
;;;234      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  8a8a              LDRH     r2,[r1,#0x14]
000008  4b03              LDR      r3,|L9.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  828a              STRH     r2,[r1,#0x14]
;;;235    }
000012  4770              BX       lr
;;;236    
                          ENDP

                  |L9.20|
                          DCD      ||.data||+0xc
                  |L9.24|
                          DCD      ||.constdata||+0xa

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;322      */
;;;323    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  b148              CBZ      r0,|L10.22|
;;;324    {
000002  1e40              SUBS     r0,r0,#1
;;;325      /* There is no Wakeup button on STM32373C_EVAL-EVAL, the Button value should
;;;326         be greater than 0. */
;;;327      if(Button > 0)
;;;328      {
;;;329        Button = (Button_TypeDef) (Button - 1);
;;;330        return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000004  4905              LDR      r1,|L10.28|
000006  b2c0              UXTB     r0,r0                 ;329
000008  4a05              LDR      r2,|L10.32|
00000a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00000e  f8520020          LDR      r0,[r2,r0,LSL #2]
000012  f7ffbffe          B.W      GPIO_ReadInputDataBit
                  |L10.22|
;;;331      }
;;;332      else
;;;333      {
;;;334        return 0xFF; /* Error Code */
000016  20ff              MOVS     r0,#0xff
;;;335      }
;;;336    }
000018  4770              BX       lr
;;;337    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      ||.constdata||+0x3c
                  |L10.32|
                          DCD      ||.data||+0x14

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;254      */
;;;255    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b570              PUSH     {r4-r6,lr}
;;;256    {
000002  b086              SUB      sp,sp,#0x18
000004  460d              MOV      r5,r1
000006  2800              CMP      r0,#0
000008  d048              BEQ      |L11.156|
00000a  1e40              SUBS     r0,r0,#1
;;;257      GPIO_InitTypeDef GPIO_InitStructure;
;;;258      EXTI_InitTypeDef EXTI_InitStructure;
;;;259      NVIC_InitTypeDef NVIC_InitStructure;
;;;260    
;;;261      /* There is no Wakeup button on STM32373C_EVAL, the Button value should
;;;262         be greater than 0. */
;;;263      if(Button > 0)
;;;264      {
;;;265        Button = (Button_TypeDef) (Button - 1);
00000c  b2c4              UXTB     r4,r0
;;;266        
;;;267        /* Enable the BUTTON Clock */
;;;268        RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
00000e  4824              LDR      r0,|L11.160|
000010  2101              MOVS     r1,#1
000012  f8500024          LDR      r0,[r0,r4,LSL #2]
000016  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;269        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;270    
;;;271        /* Configure Button pin as input */
;;;272        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
000022  2600              MOVS     r6,#0
000024  f88d6010          STRB     r6,[sp,#0x10]
;;;273        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
000028  2002              MOVS     r0,#2
00002a  f88d0013          STRB     r0,[sp,#0x13]
;;;274        GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00002e  481c              LDR      r0,|L11.160|
;;;275        GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
000030  a903              ADD      r1,sp,#0xc
000032  3810              SUBS     r0,r0,#0x10           ;274
000034  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;274
000038  9003              STR      r0,[sp,#0xc]
00003a  481a              LDR      r0,|L11.164|
00003c  f8500024          LDR      r0,[r0,r4,LSL #2]
000040  f7fffffe          BL       GPIO_Init
;;;276    
;;;277    
;;;278        if (Button_Mode == BUTTON_MODE_EXTI)
000044  2d01              CMP      r5,#1
000046  d129              BNE      |L11.156|
;;;279        {
;;;280          /* Connect Button EXTI Line to Button GPIO Pin */
;;;281          SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000048  4815              LDR      r0,|L11.160|
00004a  3829              SUBS     r0,r0,#0x29
00004c  5d01              LDRB     r1,[r0,r4]
00004e  1fc0              SUBS     r0,r0,#7
000050  5d00              LDRB     r0,[r0,r4]
000052  f7fffffe          BL       SYSCFG_EXTILineConfig
;;;282    
;;;283          /* Configure Button EXTI line */
;;;284          EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
000056  4812              LDR      r0,|L11.160|
000058  301c              ADDS     r0,r0,#0x1c
;;;285          EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
;;;286        
;;;287          if(Button != BUTTON_KEY) 
00005a  2c02              CMP      r4,#2
00005c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;284
000060  9000              STR      r0,[sp,#0]            ;285
000062  f88d6004          STRB     r6,[sp,#4]            ;285
000066  d001              BEQ      |L11.108|
;;;288          {
;;;289            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000068  2008              MOVS     r0,#8
00006a  e000              B        |L11.110|
                  |L11.108|
;;;290          }
;;;291          else
;;;292          {
;;;293            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
00006c  200c              MOVS     r0,#0xc
                  |L11.110|
00006e  f88d0005          STRB     r0,[sp,#5]
;;;294          }
;;;295          EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000072  2501              MOVS     r5,#1
000074  f88d5006          STRB     r5,[sp,#6]
;;;296          EXTI_Init(&EXTI_InitStructure);
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       EXTI_Init
;;;297    
;;;298          /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;299          NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
00007e  4808              LDR      r0,|L11.160|
000080  3822              SUBS     r0,r0,#0x22
000082  5d00              LDRB     r0,[r0,r4]
000084  f88d0008          STRB     r0,[sp,#8]
;;;300          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
000088  200f              MOVS     r0,#0xf
00008a  f88d0009          STRB     r0,[sp,#9]
;;;301          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
00008e  f88d000a          STRB     r0,[sp,#0xa]
;;;302          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000092  f88d500b          STRB     r5,[sp,#0xb]
;;;303    
;;;304          NVIC_Init(&NVIC_InitStructure); 
000096  a802              ADD      r0,sp,#8
000098  f7fffffe          BL       NVIC_Init
                  |L11.156|
;;;305        }
;;;306      }
;;;307    }
00009c  b006              ADD      sp,sp,#0x18
00009e  bd70              POP      {r4-r6,pc}
;;;308    
                          ENDP

                  |L11.160|
                          DCD      ||.constdata||+0x4c
                  |L11.164|
                          DCD      ||.data||+0x14

                          AREA ||i.sEE_I2C_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sEE_I2C_LowLevel_DeInit PROC
;;;581      */
;;;582    void sEE_I2C_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;583    {
;;;584      GPIO_InitTypeDef  GPIO_InitStructure; 
;;;585       
;;;586      /* sEE_I2C Peripheral Disable */
;;;587      I2C_Cmd(sEE_I2C, DISABLE);
000002  4c13              LDR      r4,|L12.80|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;588     
;;;589      /* sEE_I2C DeInit */
;;;590      I2C_DeInit(sEE_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;591    
;;;592      /*!< sEE_I2C Periph clock disable */
;;;593      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f0080          MOV      r0,#0x400000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;594        
;;;595      /* Disable the I2C fast mode plus driving capability */
;;;596      SYSCFG_I2CFastModePlusConfig(SYSCFG_I2CFastModePlus_I2C2, DISABLE);
00001c  2100              MOVS     r1,#0
00001e  f44f1000          MOV      r0,#0x200000
000022  f7fffffe          BL       SYSCFG_I2CFastModePlusConfig
;;;597      
;;;598      /*!< GPIO configuration */  
;;;599      /*!< Configure sEE_I2C pins: SCL */
;;;600      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
000026  1560              ASRS     r0,r4,#21
;;;601      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
000028  9000              STR      r0,[sp,#0]
00002a  2000              MOVS     r0,#0
00002c  f88d0004          STRB     r0,[sp,#4]
;;;602      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000030  f88d0007          STRB     r0,[sp,#7]
;;;603      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000034  f04f4490          MOV      r4,#0x48000000
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;604    
;;;605      /*!< Configure sEE_I2C pins: SDA */
;;;606      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000040  f44f6080          MOV      r0,#0x400
;;;607      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000044  9000              STR      r0,[sp,#0]
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       GPIO_Init
;;;608    }
00004e  bd1c              POP      {r2-r4,pc}
;;;609    
                          ENDP

                  |L12.80|
                          DCD      0x40005800

                          AREA ||i.sEE_I2C_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sEE_I2C_LowLevel_Init PROC
;;;614      */
;;;615    void sEE_I2C_LowLevel_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;616    {
;;;617      GPIO_InitTypeDef  GPIO_InitStructure;
;;;618      
;;;619      /* Configure the I2C clock source. The clock is derived from the SYSCLK */
;;;620      RCC_I2CCLKConfig(RCC_I2C2CLK_SYSCLK);
000002  481a              LDR      r0,|L13.108|
000004  f7fffffe          BL       RCC_I2CCLKConfig
;;;621      
;;;622      /* Enable the I2C fast mode plus driving capability */
;;;623      SYSCFG_I2CFastModePlusConfig(SYSCFG_I2CFastModePlus_I2C2, ENABLE);
000008  2101              MOVS     r1,#1
00000a  0548              LSLS     r0,r1,#21
00000c  f7fffffe          BL       SYSCFG_I2CFastModePlusConfig
;;;624      
;;;625      /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
;;;626      RCC_AHBPeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
000010  2101              MOVS     r1,#1
000012  0448              LSLS     r0,r1,#17
000014  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;627      
;;;628      /*!< sEE_I2C Periph clock enable */
;;;629      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
000018  2101              MOVS     r1,#1
00001a  0588              LSLS     r0,r1,#22
00001c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;630      
;;;631      /* Connect PXx to I2C_SCL*/
;;;632      GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
000020  2109              MOVS     r1,#9
000022  06cc              LSLS     r4,r1,#27
000024  2204              MOVS     r2,#4
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GPIO_PinAFConfig
;;;633      
;;;634      /* Connect PXx to I2C_SDA*/
;;;635      GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);
00002c  2204              MOVS     r2,#4
00002e  210a              MOVS     r1,#0xa
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       GPIO_PinAFConfig
;;;636      
;;;637      /*!< GPIO configuration */  
;;;638      /*!< Configure sEE_I2C pins: SCL */
;;;639      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
000036  f44f7000          MOV      r0,#0x200
;;;640      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00003a  9000              STR      r0,[sp,#0]
00003c  2002              MOVS     r0,#2
00003e  f88d0004          STRB     r0,[sp,#4]
;;;641      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000042  2003              MOVS     r0,#3
000044  f88d0005          STRB     r0,[sp,#5]
;;;642      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000048  2001              MOVS     r0,#1
00004a  f88d0006          STRB     r0,[sp,#6]
;;;643      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00004e  2000              MOVS     r0,#0
000050  f88d0007          STRB     r0,[sp,#7]
;;;644      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       GPIO_Init
;;;645      
;;;646      /*!< Configure sEE_I2C pins: SDA */
;;;647      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
00005c  f44f6080          MOV      r0,#0x400
;;;648      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);     
000060  9000              STR      r0,[sp,#0]
000062  4669              MOV      r1,sp
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       GPIO_Init
;;;649    }
00006a  bd1c              POP      {r2-r4,pc}
;;;650    /**
                          ENDP

                  |L13.108|
                          DCD      0x10000020

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_AF
000000  07                DCB      0x07
                  COM_RX_AF
000001  07                DCB      0x07
                  COM_TX_PIN
000002  0020              DCW      0x0020
                  COM_RX_PIN
000004  0040              DCW      0x0040
                  COM_TX_PIN_SOURCE
000006  0005              DCW      0x0005
                  COM_RX_PIN_SOURCE
000008  0006              DCW      0x0006
                  GPIO_PIN
00000a  4000              DCW      0x4000
00000c  8000              DCW      0x8000
00000e  0000              DCB      0x00,0x00
                  COM_USART_CLK
                          DCD      0x00020000
                  COM_TX_PORT_CLK
                          DCD      0x00100000
                  COM_RX_PORT_CLK
                          DCD      0x00100000
                  BUTTON_PORT_SOURCE
00001c  00000505          DCB      0x00,0x00,0x05,0x05
000020  050504            DCB      0x05,0x05,0x04
                  BUTTON_PIN_SOURCE
000023  00                DCB      0x00
000024  0209040a          DCB      0x02,0x09,0x04,0x0a
000028  0206              DCB      0x02,0x06
                  BUTTON_IRQn
00002a  0608              DCB      0x06,0x08
00002c  170a2808          DCB      0x17,0x0a,0x28,0x08
000030  17000000          DCB      0x17,0x00,0x00,0x00
                  GPIO_CLK
                          DCD      0x00040000
                          DCD      0x00040000
                  BUTTON_PIN
00003c  00010004          DCW      0x0001,0x0004
000040  02000010          DCW      0x0200,0x0010
000044  04000004          DCW      0x0400,0x0004
000048  0040              DCW      0x0040
00004a  0000              DCB      0x00,0x00
                  BUTTON_CLK
                          DCD      0x00020000
                          DCD      0x00020000
                          DCD      0x00400000
                          DCD      0x00400000
                          DCD      0x00400000
                          DCD      0x00400000
                          DCD      0x00200000
                  BUTTON_EXTI_LINE
000068  00010004          DCW      0x0001,0x0004
00006c  02000010          DCW      0x0200,0x0010
000070  04000004          DCW      0x0400,0x0004
000074  0040              DCW      0x0040

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40004400
                  COM_TX_PORT
                          DCD      0x48000c00
                  COM_RX_PORT
                          DCD      0x48000c00
                  GPIO_PORT
                          DCD      0x48000400
                          DCD      0x48000400
                  BUTTON_PORT
                          DCD      0x48000000
                          DCD      0x48000000
                          DCD      0x48001400
                          DCD      0x48001400
                          DCD      0x48001400
                          DCD      0x48001400
                          DCD      0x48001000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Utilities\\STM32_EVAL\\STM32373C_EVAL\\stm32373c_eval.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32373c_eval_c_c84236cb____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32373c_eval_c_c84236cb____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32373c_eval_c_c84236cb____REVSH|
#line 153
|__asm___16_stm32373c_eval_c_c84236cb____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32373c_eval_c_c84236cb____RRX|
#line 328
|__asm___16_stm32373c_eval_c_c84236cb____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
