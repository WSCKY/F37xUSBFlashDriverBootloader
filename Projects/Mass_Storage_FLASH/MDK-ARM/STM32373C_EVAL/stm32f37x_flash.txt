; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32373c_eval\stm32f37x_flash.o --asm_dir=.\STM32373C_EVAL\ --list_dir=.\STM32373C_EVAL\ --depend=.\stm32373c_eval\stm32f37x_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F37x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F37x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32373C_EVAL -IE:\STM32F373_USB_BootLoader\Projects\Mass_Storage_FLASH\MDK-ARM\RTE -ID:\MDK\install\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -ID:\MDK\install\ARM\PACK\Keil\STM32F3xx_DFP\1.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F37X -DUSE_STDPERIPH_DRIVER -DSTM32F37X -DUSE_STM32373C_EVAL --omf_browse=.\stm32373c_eval\stm32f37x_flash.crf ..\..\..\Libraries\STM32F37x_StdPeriph_Driver\src\stm32f37x_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;1137     */
;;;1138   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  4901              LDR      r1,|L1.8|
;;;1139   {
;;;1140     /* Check the parameters */
;;;1141     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;1142     
;;;1143     /* Clear the flags */
;;;1144     FLASH->SR = FLASH_FLAG;
000002  60c8              STR      r0,[r1,#0xc]
;;;1145   }
000004  4770              BX       lr
;;;1146   
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_EraseAllPages||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllPages PROC
;;;307      */
;;;308    FLASH_Status FLASH_EraseAllPages(void)
000000  b530              PUSH     {r4,r5,lr}
;;;309    {
;;;310      FLASH_Status status = FLASH_COMPLETE;
;;;311    
;;;312      /* Wait for last operation to be completed */
;;;313      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000002  f44f2530          MOV      r5,#0xb0000
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       FLASH_WaitForLastOperation
;;;314      
;;;315      if(status == FLASH_COMPLETE)
00000c  2804              CMP      r0,#4
00000e  d10f              BNE      |L2.48|
;;;316      {
;;;317        /* if the previous operation is completed, proceed to erase all pages */
;;;318         FLASH->CR |= FLASH_CR_MER;
000010  4c08              LDR      r4,|L2.52|
000012  6920              LDR      r0,[r4,#0x10]
000014  f0400004          ORR      r0,r0,#4
000018  6120              STR      r0,[r4,#0x10]
;;;319         FLASH->CR |= FLASH_CR_STRT;
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400040          ORR      r0,r0,#0x40
000020  6120              STR      r0,[r4,#0x10]
;;;320        
;;;321        /* Wait for last operation to be completed */
;;;322        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FLASH_WaitForLastOperation
;;;323    
;;;324        /* Disable the MER Bit */
;;;325        FLASH->CR &= ~FLASH_CR_MER;
000028  6921              LDR      r1,[r4,#0x10]
00002a  f0210104          BIC      r1,r1,#4
00002e  6121              STR      r1,[r4,#0x10]
                  |L2.48|
;;;326      }
;;;327    
;;;328      /* Return the Erase Status */
;;;329      return status;
;;;330    }
000030  bd30              POP      {r4,r5,pc}
;;;331    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40022000

                          AREA ||i.FLASH_ErasePage||, CODE, READONLY, ALIGN=2

                  FLASH_ErasePage PROC
;;;269      */
;;;270    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
000000  b570              PUSH     {r4-r6,lr}
;;;271    {
000002  4605              MOV      r5,r0
;;;272      FLASH_Status status = FLASH_COMPLETE;
;;;273    
;;;274      /* Check the parameters */
;;;275      assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
;;;276     
;;;277      /* Wait for last operation to be completed */
;;;278      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;279      
;;;280      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d110              BNE      |L3.52|
;;;281      { 
;;;282        /* If the previous operation is completed, proceed to erase the page */
;;;283        FLASH->CR |= FLASH_CR_PER;
000012  4c09              LDR      r4,|L3.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400002          ORR      r0,r0,#2
00001a  6120              STR      r0,[r4,#0x10]
;;;284        FLASH->AR  = Page_Address; 
00001c  6165              STR      r5,[r4,#0x14]
;;;285        FLASH->CR |= FLASH_CR_STRT;
00001e  6920              LDR      r0,[r4,#0x10]
000020  f0400040          ORR      r0,r0,#0x40
000024  6120              STR      r0,[r4,#0x10]
;;;286        
;;;287        /* Wait for last operation to be completed */
;;;288        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       FLASH_WaitForLastOperation
;;;289        
;;;290        /* Disable the PER Bit */
;;;291        FLASH->CR &= ~FLASH_CR_PER;
00002c  6921              LDR      r1,[r4,#0x10]
00002e  f0210102          BIC      r1,r1,#2
000032  6121              STR      r1,[r4,#0x10]
                  |L3.52|
;;;292      }
;;;293        
;;;294      /* Return the Erase Status */
;;;295      return status;
;;;296    }
000034  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;1109     */
;;;1110   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  4a03              LDR      r2,|L4.16|
;;;1111   {
000002  4601              MOV      r1,r0
;;;1112     FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1113   
;;;1114     /* Check the parameters */
;;;1115     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;1116   
;;;1117     if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000006  68d2              LDR      r2,[r2,#0xc]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L4.14|
;;;1118     {
;;;1119       bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;1120     }
;;;1121     else
;;;1122     {
;;;1123       bitstatus = RESET;
;;;1124     }
;;;1125     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1126     return bitstatus; 
;;;1127   }
00000e  4770              BX       lr
;;;1128   
                          ENDP

                  |L4.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;1152     */
;;;1153   FLASH_Status FLASH_GetStatus(void)
000000  4908              LDR      r1,|L5.36|
;;;1154   {
;;;1155     FLASH_Status FLASHstatus = FLASH_COMPLETE;
000002  2004              MOVS     r0,#4
;;;1156     
;;;1157     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000004  68ca              LDR      r2,[r1,#0xc]
000006  07d2              LSLS     r2,r2,#31
000008  d001              BEQ      |L5.14|
;;;1158     {
;;;1159       FLASHstatus = FLASH_BUSY;
00000a  2001              MOVS     r0,#1
;;;1160     }
;;;1161     else 
;;;1162     {  
;;;1163       if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
;;;1164       { 
;;;1165         FLASHstatus = FLASH_ERROR_WRP;
;;;1166       }
;;;1167       else 
;;;1168       {
;;;1169         if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
;;;1170         {
;;;1171           FLASHstatus = FLASH_ERROR_PROGRAM; 
;;;1172         }
;;;1173         else
;;;1174         {
;;;1175           FLASHstatus = FLASH_COMPLETE;
;;;1176         }
;;;1177       }
;;;1178     }
;;;1179     /* Return the FLASH Status */
;;;1180     return FLASHstatus;
;;;1181   }
00000c  4770              BX       lr
                  |L5.14|
00000e  68ca              LDR      r2,[r1,#0xc]          ;1163
000010  06d2              LSLS     r2,r2,#27             ;1163
000012  d501              BPL      |L5.24|
000014  2002              MOVS     r0,#2                 ;1165
                  |L5.22|
000016  4770              BX       lr
                  |L5.24|
000018  68c9              LDR      r1,[r1,#0xc]          ;1169
00001a  0749              LSLS     r1,r1,#29             ;1169
00001c  d5fb              BPL      |L5.22|
00001e  2003              MOVS     r0,#3                 ;1171
000020  4770              BX       lr
;;;1182   
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_HalfCycleAccessCmd||, CODE, READONLY, ALIGN=2

                  FLASH_HalfCycleAccessCmd PROC
;;;165      */
;;;166    void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L6.24|
;;;167    {
;;;168      /* Check the parameters */
;;;169      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;170       
;;;171      if(NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;172      {
;;;173        FLASH->ACR |= FLASH_ACR_HLFCYA;
;;;174      }
;;;175      else
;;;176      {
;;;177        FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L6.14|
000008  f0400008          ORR      r0,r0,#8              ;173
00000c  e001              B        |L6.18|
                  |L6.14|
00000e  f0200008          BIC      r0,r0,#8
                  |L6.18|
000012  6008              STR      r0,[r1,#0]            ;173
;;;178      }
;;;179    }
000014  4770              BX       lr
;;;180    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;1081     */
;;;1082   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L7.20|
;;;1083   {
;;;1084     /* Check the parameters */
;;;1085     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1086     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1087     
;;;1088     if(NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1089     {
;;;1090       /* Enable the interrupt sources */
;;;1091       FLASH->CR |= FLASH_IT;
;;;1092     }
;;;1093     else
;;;1094     {
;;;1095       /* Disable the interrupt sources */
;;;1096       FLASH->CR &= ~(uint32_t)FLASH_IT;
000004  6911              LDR      r1,[r2,#0x10]
000006  d001              BEQ      |L7.12|
000008  4301              ORRS     r1,r1,r0              ;1091
00000a  e000              B        |L7.14|
                  |L7.12|
00000c  4381              BICS     r1,r1,r0
                  |L7.14|
00000e  6111              STR      r1,[r2,#0x10]         ;1091
;;;1097     }
;;;1098   }
000010  4770              BX       lr
;;;1099   
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;252      */
;;;253    void FLASH_Lock(void)
000000  4802              LDR      r0,|L8.12|
;;;254    {
;;;255      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;256      FLASH->CR |= FLASH_CR_LOCK;
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;257    }
00000a  4770              BX       lr
;;;258    
                          ENDP

                  |L8.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_BOOTConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BOOTConfig PROC
;;;818      */
;;;819    FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
000000  b570              PUSH     {r4-r6,lr}
;;;820    {
000002  4605              MOV      r5,r0
;;;821      FLASH_Status status = FLASH_COMPLETE; 
;;;822    
;;;823      /* Check the parameters */
;;;824      assert_param(IS_OB_BOOT1(OB_BOOT1));
;;;825      
;;;826      /* Wait for last operation to be completed */
;;;827      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;828      
;;;829      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L9.54|
;;;830      {  
;;;831        /* Enable the Option Bytes Programming operation */
;;;832        FLASH->CR |= FLASH_CR_OPTPG; 
000012  4c09              LDR      r4,|L9.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400010          ORR      r0,r0,#0x10
00001a  6120              STR      r0,[r4,#0x10]
;;;833               
;;;834    	OB->USER = OB_BOOT1|0xEF;
00001c  4907              LDR      r1,|L9.60|
00001e  f04500ef          ORR      r0,r5,#0xef
000022  8008              STRH     r0,[r1,#0]
;;;835      
;;;836        /* Wait for last operation to be completed */
;;;837        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;838    
;;;839        if(status != FLASH_TIMEOUT)
00002a  2805              CMP      r0,#5
00002c  d003              BEQ      |L9.54|
;;;840        {
;;;841          /* If the program operation is completed, disable the OPTPG Bit */
;;;842          FLASH->CR &= ~FLASH_CR_OPTPG;
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L9.54|
;;;843        }
;;;844      }    
;;;845      /* Return the Option Byte program Status */
;;;846      return status;
;;;847    }
000036  bd70              POP      {r4-r6,pc}
;;;848    
                          ENDP

                  |L9.56|
                          DCD      0x40022000
                  |L9.60|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;635      */
;;;636    FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;637    {
;;;638      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
;;;639      
;;;640      FLASH_Status status = FLASH_COMPLETE;
;;;641      
;;;642      /* Check the parameters */
;;;643      assert_param(IS_OB_WRP(OB_WRP));
;;;644        
;;;645      OB_WRP = (uint32_t)(~OB_WRP);
000004  43c0              MVNS     r0,r0
;;;646      WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
000006  b2c7              UXTB     r7,r0
;;;647      WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8); 
000008  f3c02607          UBFX     r6,r0,#8,#8
;;;648      WRP2_Data = (uint16_t)((OB_WRP & OB_WRP1_WRP1) >> 16);
00000c  f3c04507          UBFX     r5,r0,#16,#8
;;;649      WRP3_Data = (uint16_t)((OB_WRP & OB_WRP1_nWRP1) >> 24); 
000010  0e04              LSRS     r4,r0,#24
;;;650      
;;;651      /* Wait for last operation to be completed */
;;;652      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000012  f44f2930          MOV      r9,#0xb0000
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       FLASH_WaitForLastOperation
;;;653      
;;;654      if(status == FLASH_COMPLETE)
00001c  2804              CMP      r0,#4
00001e  d134              BNE      |L10.138|
;;;655      {
;;;656        FLASH->CR |= FLASH_CR_OPTPG;
000020  f8df806c          LDR      r8,|L10.144|
000024  f8d82010          LDR      r2,[r8,#0x10]
000028  f0420210          ORR      r2,r2,#0x10
00002c  f8c82010          STR      r2,[r8,#0x10]
;;;657    
;;;658        if(WRP0_Data != 0xFF)
000030  2fff              CMP      r7,#0xff
000032  d006              BEQ      |L10.66|
;;;659        {
;;;660          OB->WRP0 = WRP0_Data;
000034  4817              LDR      r0,|L10.148|
000036  8007              STRH     r7,[r0,#0]
;;;661          
;;;662          /* Wait for last operation to be completed */
;;;663          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;664        }
;;;665        if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
00003e  2804              CMP      r0,#4
000040  d11b              BNE      |L10.122|
                  |L10.66|
000042  2eff              CMP      r6,#0xff
000044  d007              BEQ      |L10.86|
;;;666        {
;;;667          OB->WRP1 = WRP1_Data;
000046  4813              LDR      r0,|L10.148|
000048  1c80              ADDS     r0,r0,#2
00004a  8006              STRH     r6,[r0,#0]
;;;668          
;;;669          /* Wait for last operation to be completed */
;;;670          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;671        }
;;;672    	if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
000052  2804              CMP      r0,#4
000054  d111              BNE      |L10.122|
                  |L10.86|
000056  2dff              CMP      r5,#0xff
000058  d007              BEQ      |L10.106|
;;;673        {
;;;674          OB->WRP2 = WRP2_Data;
00005a  480e              LDR      r0,|L10.148|
00005c  1d00              ADDS     r0,r0,#4
00005e  8005              STRH     r5,[r0,#0]
;;;675          
;;;676          /* Wait for last operation to be completed */
;;;677          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000060  4648              MOV      r0,r9
000062  f7fffffe          BL       FLASH_WaitForLastOperation
;;;678        }
;;;679    	if((status == FLASH_COMPLETE) && (WRP3_Data != 0xFF))
000066  2804              CMP      r0,#4
000068  d107              BNE      |L10.122|
                  |L10.106|
00006a  2cff              CMP      r4,#0xff
00006c  d007              BEQ      |L10.126|
;;;680        {
;;;681          OB->WRP3 = WRP3_Data;
00006e  4809              LDR      r0,|L10.148|
000070  1d80              ADDS     r0,r0,#6
000072  8004              STRH     r4,[r0,#0]
;;;682          
;;;683          /* Wait for last operation to be completed */
;;;684          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000074  4648              MOV      r0,r9
000076  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L10.122|
;;;685        }
;;;686              
;;;687        if(status != FLASH_TIMEOUT)
00007a  2805              CMP      r0,#5
00007c  d005              BEQ      |L10.138|
                  |L10.126|
;;;688        {
;;;689          /* if the program operation is completed, disable the OPTPG Bit */
;;;690          FLASH->CR &= ~FLASH_CR_OPTPG;
00007e  f8d82010          LDR      r2,[r8,#0x10]
000082  f0220210          BIC      r2,r2,#0x10
000086  f8c82010          STR      r2,[r8,#0x10]
                  |L10.138|
;;;691        }
;;;692      } 
;;;693      /* Return the write protection operation Status */
;;;694      return status;      
;;;695    }
00008a  e8bd83f0          POP      {r4-r9,pc}
;;;696    
                          ENDP

00008e  0000              DCW      0x0000
                  |L10.144|
                          DCD      0x40022000
                  |L10.148|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_Erase||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Erase PROC
;;;529      */
;;;530    FLASH_Status FLASH_OB_Erase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;531    {
;;;532      uint16_t rdptmp = OB_RDP_Level_0;
000002  25aa              MOVS     r5,#0xaa
;;;533    
;;;534      FLASH_Status status = FLASH_COMPLETE;
;;;535    
;;;536      /* Get the actual read protection Option Byte value */ 
;;;537      if(FLASH_OB_GetRDP() != RESET)
000004  f7fffffe          BL       FLASH_OB_GetRDP
000008  b100              CBZ      r0,|L11.12|
;;;538      {
;;;539        rdptmp = 0x00;  
00000a  2500              MOVS     r5,#0
                  |L11.12|
;;;540      }
;;;541    
;;;542      /* Wait for last operation to be completed */
;;;543      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000c  f44f2630          MOV      r6,#0xb0000
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;544    
;;;545      if(status == FLASH_COMPLETE)
000016  2804              CMP      r0,#4
000018  d120              BNE      |L11.92|
;;;546      {   
;;;547        /* If the previous operation is completed, proceed to erase the option bytes */
;;;548        FLASH->CR |= FLASH_CR_OPTER;
00001a  4c11              LDR      r4,|L11.96|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400020          ORR      r0,r0,#0x20
000022  6120              STR      r0,[r4,#0x10]
;;;549        FLASH->CR |= FLASH_CR_STRT;
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400040          ORR      r0,r0,#0x40
00002a  6120              STR      r0,[r4,#0x10]
;;;550    
;;;551        /* Wait for last operation to be completed */
;;;552        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;553        
;;;554        if(status == FLASH_COMPLETE)
000032  2804              CMP      r0,#4
000034  d10c              BNE      |L11.80|
;;;555        {
;;;556          /* If the erase operation is completed, disable the OPTER Bit */
;;;557          FLASH->CR &= ~FLASH_CR_OPTER;
000036  6920              LDR      r0,[r4,#0x10]
000038  f0200020          BIC      r0,r0,#0x20
00003c  6120              STR      r0,[r4,#0x10]
;;;558           
;;;559          /* Enable the Option Bytes Programming operation */
;;;560          FLASH->CR |= FLASH_CR_OPTPG;
00003e  6920              LDR      r0,[r4,#0x10]
000040  f0400010          ORR      r0,r0,#0x10
000044  6120              STR      r0,[r4,#0x10]
;;;561    
;;;562          /* Restore the last read protection Option Byte value */
;;;563          OB->RDP = (uint16_t)rdptmp; 
000046  4807              LDR      r0,|L11.100|
000048  8005              STRH     r5,[r0,#0]
;;;564    
;;;565          /* Wait for last operation to be completed */
;;;566          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L11.80|
;;;567     
;;;568          if(status != FLASH_TIMEOUT)
;;;569          {
;;;570            /* if the program operation is completed, disable the OPTPG Bit */
;;;571            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;572          }
;;;573        }
;;;574        else
;;;575        {
;;;576          if (status != FLASH_TIMEOUT)
000050  2805              CMP      r0,#5
000052  d003              BEQ      |L11.92|
000054  6921              LDR      r1,[r4,#0x10]         ;571
000056  f0210110          BIC      r1,r1,#0x10           ;571
00005a  6121              STR      r1,[r4,#0x10]         ;571
                  |L11.92|
;;;577          {
;;;578            /* Disable the OPTPG Bit */
;;;579            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;580          }
;;;581        }  
;;;582      }
;;;583      /* Return the erase status */
;;;584      return status;
;;;585    }
00005c  bd70              POP      {r4-r6,pc}
;;;586    
                          ENDP

00005e  0000              DCW      0x0000
                  |L11.96|
                          DCD      0x40022000
                  |L11.100|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1041     */
;;;1042   FlagStatus FLASH_OB_GetRDP(void)
000000  4903              LDR      r1,|L12.16|
;;;1043   {
;;;1044     FlagStatus readstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1045     
;;;1046     if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
000004  69c9              LDR      r1,[r1,#0x1c]
000006  f0110f06          TST      r1,#6
00000a  d000              BEQ      |L12.14|
;;;1047     {
;;;1048       readstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L12.14|
;;;1049     }
;;;1050     else
;;;1051     {
;;;1052       readstatus = RESET;
;;;1053     }
;;;1054     return readstatus;
;;;1055   }
00000e  4770              BX       lr
;;;1056   
                          ENDP

                  |L12.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1019     */
;;;1020   uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L13.12|
;;;1021   {
;;;1022     /* Return the User Option Byte */
;;;1023     return (uint8_t)(FLASH->OBR >> 8);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  f3c02007          UBFX     r0,r0,#8,#8
;;;1024   }
000008  4770              BX       lr
;;;1025   
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1030     */
;;;1031   uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L14.8|
;;;1032   {
;;;1033     /* Return the FLASH write protection Register value */
;;;1034     return (uint32_t)(FLASH->WRPR);
000002  6a00              LDR      r0,[r0,#0x20]
;;;1035   }
000004  4770              BX       lr
;;;1036   
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Launch PROC
;;;513      */
;;;514    void FLASH_OB_Launch(void)
000000  4802              LDR      r0,|L15.12|
;;;515    {
;;;516      /* Set the OBL_Launch bit to launch the option byte loading */
;;;517      FLASH->CR |= FLASH_CR_OBL_LAUNCH;
000002  6901              LDR      r1,[r0,#0x10]
000004  f4415100          ORR      r1,r1,#0x2000
000008  6101              STR      r1,[r0,#0x10]
;;;518    }
00000a  4770              BX       lr
;;;519    
                          ENDP

                  |L15.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Lock PROC
;;;502      */
;;;503    void FLASH_OB_Lock(void)
000000  4802              LDR      r0,|L16.12|
;;;504    {
;;;505      /* Set the OPTWREN Bit to lock the option bytes block access */
;;;506      FLASH->CR &= ~FLASH_CR_OPTWRE;
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;507    }
00000a  4770              BX       lr
;;;508    
                          ENDP

                  |L16.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_ProgramData||, CODE, READONLY, ALIGN=2

                  FLASH_OB_ProgramData PROC
;;;597      */
;;;598    FLASH_Status FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;599    {
000002  4606              MOV      r6,r0
;;;600      FLASH_Status status = FLASH_COMPLETE;
;;;601      /* Check the parameters */
;;;602      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;603      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2730          MOV      r7,#0xb0000
000008  460d              MOV      r5,r1                 ;599
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;604    
;;;605      if(status == FLASH_COMPLETE)
000010  2804              CMP      r0,#4
000012  d10e              BNE      |L17.50|
;;;606      {
;;;607        /* Enables the Option Bytes Programming operation */
;;;608        FLASH->CR |= FLASH_CR_OPTPG; 
000014  4c07              LDR      r4,|L17.52|
000016  6920              LDR      r0,[r4,#0x10]
000018  f0400010          ORR      r0,r0,#0x10
00001c  6120              STR      r0,[r4,#0x10]
;;;609        *(__IO uint16_t*)Address = Data;
00001e  8035              STRH     r5,[r6,#0]
;;;610        
;;;611        /* Wait for last operation to be completed */
;;;612        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       FLASH_WaitForLastOperation
;;;613        
;;;614        if(status != FLASH_TIMEOUT)
000026  2805              CMP      r0,#5
000028  d003              BEQ      |L17.50|
;;;615        {
;;;616          /* If the program operation is completed, disable the OPTPG Bit */
;;;617          FLASH->CR &= ~FLASH_CR_OPTPG;
00002a  6921              LDR      r1,[r4,#0x10]
00002c  f0210110          BIC      r1,r1,#0x10
000030  6121              STR      r1,[r4,#0x10]
                  |L17.50|
;;;618        }
;;;619      }
;;;620      /* Return the Option Byte Data Program Status */
;;;621      return status;
;;;622    }
000032  bdf0              POP      {r4-r7,pc}
;;;623    
                          ENDP

                  |L17.52|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;710      */
;;;711    FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
000000  b570              PUSH     {r4-r6,lr}
;;;712    {
000002  4605              MOV      r5,r0
;;;713      FLASH_Status status = FLASH_COMPLETE;
;;;714      
;;;715      /* Check the parameters */
;;;716      assert_param(IS_OB_RDP(OB_RDP));
;;;717      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;718      
;;;719      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d113              BNE      |L18.58|
;;;720      {
;;;721        FLASH->CR |= FLASH_CR_OPTER;
000012  4c14              LDR      r4,|L18.100|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400020          ORR      r0,r0,#0x20
00001a  6120              STR      r0,[r4,#0x10]
;;;722        FLASH->CR |= FLASH_CR_STRT;
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6120              STR      r0,[r4,#0x10]
;;;723        
;;;724        /* Wait for last operation to be completed */
;;;725        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;726        
;;;727        if(status == FLASH_COMPLETE)
00002a  2804              CMP      r0,#4
00002c  d006              BEQ      |L18.60|
;;;728        {
;;;729          /* If the erase operation is completed, disable the OPTER Bit */
;;;730          FLASH->CR &= ~FLASH_CR_OPTER;
;;;731          
;;;732          /* Enable the Option Bytes Programming operation */
;;;733          FLASH->CR |= FLASH_CR_OPTPG;
;;;734           
;;;735          OB->RDP = OB_RDP;
;;;736    
;;;737          /* Wait for last operation to be completed */
;;;738          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
;;;739        
;;;740          if(status != FLASH_TIMEOUT)
;;;741          {
;;;742            /* if the program operation is completed, disable the OPTPG Bit */
;;;743            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;744          }
;;;745        }
;;;746        else 
;;;747        {
;;;748          if(status != FLASH_TIMEOUT)
00002e  2805              CMP      r0,#5
000030  d003              BEQ      |L18.58|
;;;749          {
;;;750            /* Disable the OPTER Bit */
;;;751            FLASH->CR &= ~FLASH_CR_OPTER;
000032  6921              LDR      r1,[r4,#0x10]
000034  f0210120          BIC      r1,r1,#0x20
                  |L18.56|
000038  6121              STR      r1,[r4,#0x10]         ;743
                  |L18.58|
;;;752          }
;;;753        }
;;;754      }
;;;755      /* Return the protection operation Status */
;;;756      return status;
;;;757    }
00003a  bd70              POP      {r4-r6,pc}
                  |L18.60|
00003c  6920              LDR      r0,[r4,#0x10]         ;730
00003e  f0200020          BIC      r0,r0,#0x20           ;730
000042  6120              STR      r0,[r4,#0x10]         ;730
000044  6920              LDR      r0,[r4,#0x10]         ;733
000046  f0400010          ORR      r0,r0,#0x10           ;733
00004a  6120              STR      r0,[r4,#0x10]         ;733
00004c  4806              LDR      r0,|L18.104|
00004e  8005              STRH     r5,[r0,#0]            ;735
000050  4630              MOV      r0,r6                 ;738
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  2805              CMP      r0,#5                 ;740
000058  d0ef              BEQ      |L18.58|
00005a  6921              LDR      r1,[r4,#0x10]         ;743
00005c  f0210110          BIC      r1,r1,#0x10           ;743
000060  e7ea              B        |L18.56|
;;;758    
                          ENDP

000062  0000              DCW      0x0000
                  |L18.100|
                          DCD      0x40022000
                  |L18.104|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_SRAMParityConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_SRAMParityConfig PROC
;;;932      */
;;;933    FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
000000  b570              PUSH     {r4-r6,lr}
;;;934    {
000002  4605              MOV      r5,r0
;;;935      FLASH_Status status = FLASH_COMPLETE; 
;;;936    
;;;937      /* Check the parameters */
;;;938      assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
;;;939    
;;;940      /* Wait for last operation to be completed */
;;;941      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;942      
;;;943      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L19.54|
;;;944      {  
;;;945        /* Enable the Option Bytes Programming operation */
;;;946        FLASH->CR |= FLASH_CR_OPTPG; 
000012  4c09              LDR      r4,|L19.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400010          ORR      r0,r0,#0x10
00001a  6120              STR      r0,[r4,#0x10]
;;;947    
;;;948        OB->USER = OB_SRAM_Parity | 0xBF;
00001c  4907              LDR      r1,|L19.60|
00001e  f04500bf          ORR      r0,r5,#0xbf
000022  8008              STRH     r0,[r1,#0]
;;;949      
;;;950        /* Wait for last operation to be completed */
;;;951        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;952    
;;;953        if(status != FLASH_TIMEOUT)
00002a  2805              CMP      r0,#5
00002c  d003              BEQ      |L19.54|
;;;954        {
;;;955          /* if the program operation is completed, disable the OPTPG Bit */
;;;956          FLASH->CR &= ~FLASH_CR_OPTPG;
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L19.54|
;;;957        }
;;;958      }
;;;959      /* Return the Option Byte program Status */
;;;960      return status;
;;;961    }
000036  bd70              POP      {r4-r6,pc}
;;;962    
                          ENDP

                  |L19.56|
                          DCD      0x40022000
                  |L19.60|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Unlock PROC
;;;487      */
;;;488    void FLASH_OB_Unlock(void)
000000  4804              LDR      r0,|L20.20|
;;;489    {
;;;490      if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
000002  6901              LDR      r1,[r0,#0x10]
000004  0589              LSLS     r1,r1,#22
000006  d403              BMI      |L20.16|
;;;491      { 
;;;492        /* Unlocking the option bytes block access */
;;;493        FLASH->OPTKEYR = FLASH_OPTKEY1;
000008  4903              LDR      r1,|L20.24|
00000a  6081              STR      r1,[r0,#8]
;;;494        FLASH->OPTKEYR = FLASH_OPTKEY2;
00000c  4903              LDR      r1,|L20.28|
00000e  6081              STR      r1,[r0,#8]
                  |L20.16|
;;;495      }
;;;496    }
000010  4770              BX       lr
;;;497    
                          ENDP

000012  0000              DCW      0x0000
                  |L20.20|
                          DCD      0x40022000
                  |L20.24|
                          DCD      0x45670123
                  |L20.28|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;778      */
;;;779    FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;780    {
000004  4605              MOV      r5,r0
;;;781      FLASH_Status status = FLASH_COMPLETE; 
;;;782    
;;;783      /* Check the parameters */
;;;784      assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;785      assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;786      assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;787      
;;;788      /* Wait for last operation to be completed */
;;;789      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000006  f44f2830          MOV      r8,#0xb0000
00000a  4616              MOV      r6,r2                 ;780
00000c  460f              MOV      r7,r1                 ;780
00000e  4640              MOV      r0,r8
000010  f7fffffe          BL       FLASH_WaitForLastOperation
;;;790      
;;;791      if(status == FLASH_COMPLETE)
000014  2804              CMP      r0,#4
000016  d113              BNE      |L21.64|
;;;792      {  
;;;793        /* Enable the Option Bytes Programming operation */
;;;794        FLASH->CR |= FLASH_CR_OPTPG; 
000018  4c0a              LDR      r4,|L21.68|
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400010          ORR      r0,r0,#0x10
000020  6120              STR      r0,[r4,#0x10]
;;;795    
;;;796        OB->USER = (uint16_t)((uint16_t)(OB_IWDG | OB_STOP) | (uint16_t)(OB_STDBY | 0xF8));
000022  433d              ORRS     r5,r5,r7
000024  4808              LDR      r0,|L21.72|
000026  4335              ORRS     r5,r5,r6
000028  f04501f8          ORR      r1,r5,#0xf8
00002c  8001              STRH     r1,[r0,#0]
;;;797      
;;;798        /* Wait for last operation to be completed */
;;;799        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       FLASH_WaitForLastOperation
;;;800    
;;;801        if(status != FLASH_TIMEOUT)
000034  2805              CMP      r0,#5
000036  d003              BEQ      |L21.64|
;;;802        {
;;;803          /* If the program operation is completed, disable the OPTPG Bit */
;;;804          FLASH->CR &= ~FLASH_CR_OPTPG;
000038  6921              LDR      r1,[r4,#0x10]
00003a  f0210110          BIC      r1,r1,#0x10
00003e  6121              STR      r1,[r4,#0x10]
                  |L21.64|
;;;805        }
;;;806      }    
;;;807      /* Return the Option Byte program Status */
;;;808      return status;
;;;809    }
000040  e8bd81f0          POP      {r4-r8,pc}
;;;810    
                          ENDP

                  |L21.68|
                          DCD      0x40022000
                  |L21.72|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_VDDAConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_VDDAConfig PROC
;;;856      */
;;;857    FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
000000  b570              PUSH     {r4-r6,lr}
;;;858    {
000002  4605              MOV      r5,r0
;;;859      FLASH_Status status = FLASH_COMPLETE; 
;;;860    
;;;861      /* Check the parameters */
;;;862      assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
;;;863      
;;;864      /* Wait for last operation to be completed */
;;;865      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;866      
;;;867      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L22.54|
;;;868      {  
;;;869        /* Enable the Option Bytes Programming operation */
;;;870        FLASH->CR |= FLASH_CR_OPTPG; 
000012  4c09              LDR      r4,|L22.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400010          ORR      r0,r0,#0x10
00001a  6120              STR      r0,[r4,#0x10]
;;;871    
;;;872        OB->USER = OB_VDDA_ANALOG | 0xDF;
00001c  4907              LDR      r1,|L22.60|
00001e  f04500df          ORR      r0,r5,#0xdf
000022  8008              STRH     r0,[r1,#0]
;;;873      
;;;874        /* Wait for last operation to be completed */
;;;875        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;876    
;;;877        if(status != FLASH_TIMEOUT)
00002a  2805              CMP      r0,#5
00002c  d003              BEQ      |L22.54|
;;;878        {
;;;879          /* if the program operation is completed, disable the OPTPG Bit */
;;;880          FLASH->CR &= ~FLASH_CR_OPTPG;
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L22.54|
;;;881        }
;;;882      }    
;;;883      /* Return the Option Byte program Status */
;;;884      return status;
;;;885    }
000036  bd70              POP      {r4-r6,pc}
;;;886    
                          ENDP

                  |L22.56|
                          DCD      0x40022000
                  |L22.60|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_VDD_SD12Config||, CODE, READONLY, ALIGN=2

                  FLASH_OB_VDD_SD12Config PROC
;;;894      */
;;;895    FLASH_Status FLASH_OB_VDD_SD12Config(uint8_t OB_VDD_SD12)
000000  b570              PUSH     {r4-r6,lr}
;;;896    {
000002  4605              MOV      r5,r0
;;;897      FLASH_Status status = FLASH_COMPLETE; 
;;;898    
;;;899      /* Check the parameters */
;;;900      assert_param(IS_OB_VDD_SD12(OB_VDD_SD12));
;;;901      
;;;902      /* Wait for last operation to be completed */
;;;903      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;904      
;;;905      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L23.54|
;;;906      {  
;;;907        /* Enable the Option Bytes Programming operation */
;;;908        FLASH->CR |= FLASH_CR_OPTPG; 
000012  4c09              LDR      r4,|L23.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400010          ORR      r0,r0,#0x10
00001a  6120              STR      r0,[r4,#0x10]
;;;909               
;;;910        OB->USER = OB_VDD_SD12 | 0x7F;
00001c  4907              LDR      r1,|L23.60|
00001e  f045007f          ORR      r0,r5,#0x7f
000022  8008              STRH     r0,[r1,#0]
;;;911      
;;;912        /* Wait for last operation to be completed */
;;;913        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;914    
;;;915        if(status != FLASH_TIMEOUT)
00002a  2805              CMP      r0,#5
00002c  d003              BEQ      |L23.54|
;;;916        {
;;;917          /* if the program operation is completed, disable the OPTPG Bit */
;;;918          FLASH->CR &= ~FLASH_CR_OPTPG;
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L23.54|
;;;919        }
;;;920      }    
;;;921      /* Return the Option Byte program Status */
;;;922      return status;
;;;923    }
000036  bd70              POP      {r4-r6,pc}
;;;924    
                          ENDP

                  |L23.56|
                          DCD      0x40022000
                  |L23.60|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_WriteUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WriteUser PROC
;;;986      */
;;;987    FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
000000  b570              PUSH     {r4-r6,lr}
;;;988    {
000002  4605              MOV      r5,r0
;;;989      FLASH_Status status = FLASH_COMPLETE; 
;;;990      
;;;991      /* Wait for last operation to be completed */
;;;992      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;993      
;;;994      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L24.54|
;;;995      {  
;;;996        /* Enable the Option Bytes Programming operation */
;;;997        FLASH->CR |= FLASH_CR_OPTPG; 
000012  4c09              LDR      r4,|L24.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400010          ORR      r0,r0,#0x10
00001a  6120              STR      r0,[r4,#0x10]
;;;998               
;;;999        OB->USER = OB_USER | 0x48;
00001c  4907              LDR      r1,|L24.60|
00001e  f0450048          ORR      r0,r5,#0x48
000022  8008              STRH     r0,[r1,#0]
;;;1000     
;;;1001       /* Wait for last operation to be completed */
;;;1002       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1003   
;;;1004       if(status != FLASH_TIMEOUT)
00002a  2805              CMP      r0,#5
00002c  d003              BEQ      |L24.54|
;;;1005       {
;;;1006         /* if the program operation is completed, disable the OPTPG Bit */
;;;1007         FLASH->CR &= ~FLASH_CR_OPTPG;
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L24.54|
;;;1008       }
;;;1009     }    
;;;1010     /* Return the Option Byte program Status */
;;;1011     return status;
;;;1012   
;;;1013   }
000036  bd70              POP      {r4-r6,pc}
;;;1014   
                          ENDP

                  |L24.56|
                          DCD      0x40022000
                  |L24.60|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;186      */
;;;187    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L25.24|
;;;188    {
;;;189      /* Check the parameters */
;;;190      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;191       
;;;192      if(NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;193      {
;;;194        FLASH->ACR |= FLASH_ACR_PRFTBE;
;;;195      }
;;;196      else
;;;197      {
;;;198        FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L25.14|
000008  f0400010          ORR      r0,r0,#0x10           ;194
00000c  e001              B        |L25.18|
                  |L25.14|
00000e  f0200010          BIC      r0,r0,#0x10
                  |L25.18|
000012  6008              STR      r0,[r1,#0]            ;194
;;;199      }
;;;200    }
000014  4770              BX       lr
;;;201    
                          ENDP

000016  0000              DCW      0x0000
                  |L25.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramHalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramHalfWord PROC
;;;398      */
;;;399    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;400    {
000002  4606              MOV      r6,r0
;;;401      FLASH_Status status = FLASH_COMPLETE;
;;;402    
;;;403      /* Check the parameters */
;;;404      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;405    
;;;406      /* Wait for last operation to be completed */
;;;407      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2730          MOV      r7,#0xb0000
000008  460d              MOV      r5,r1                 ;400
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;408      
;;;409      if(status == FLASH_COMPLETE)
000010  2804              CMP      r0,#4
000012  d10c              BNE      |L26.46|
;;;410      {
;;;411        /* If the previous operation is completed, proceed to program the new data */
;;;412        FLASH->CR |= FLASH_CR_PG;
000014  4c06              LDR      r4,|L26.48|
000016  6920              LDR      r0,[r4,#0x10]
000018  f0400001          ORR      r0,r0,#1
00001c  6120              STR      r0,[r4,#0x10]
;;;413      
;;;414        *(__IO uint16_t*)Address = Data;
00001e  8035              STRH     r5,[r6,#0]
;;;415    
;;;416        /* Wait for last operation to be completed */
;;;417        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       FLASH_WaitForLastOperation
;;;418        
;;;419        /* Disable the PG Bit */
;;;420        FLASH->CR &= ~FLASH_CR_PG;
000026  6921              LDR      r1,[r4,#0x10]
000028  f0210101          BIC      r1,r1,#1
00002c  6121              STR      r1,[r4,#0x10]
                  |L26.46|
;;;421      } 
;;;422      
;;;423      /* Return the Program Status */
;;;424      return status;
;;;425    }
00002e  bdf0              POP      {r4-r7,pc}
;;;426    
                          ENDP

                  |L26.48|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;341      */
;;;342    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  b5f8              PUSH     {r3-r7,lr}
;;;343    {
000002  4606              MOV      r6,r0
;;;344      FLASH_Status status = FLASH_COMPLETE;
;;;345      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
;;;346    
;;;347      /* Check the parameters */
;;;348      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;349    
;;;350      /* Wait for last operation to be completed */
;;;351      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000006  f44f2730          MOV      r7,#0xb0000
00000a  9000              STR      r0,[sp,#0]
00000c  460d              MOV      r5,r1                 ;343
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       FLASH_WaitForLastOperation
;;;352      
;;;353      if(status == FLASH_COMPLETE)
000014  2804              CMP      r0,#4
000016  d115              BNE      |L27.68|
;;;354      {
;;;355        /* If the previous operation is completed, proceed to program the new first 
;;;356        half word */
;;;357        FLASH->CR |= FLASH_CR_PG;
000018  4c0b              LDR      r4,|L27.72|
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400001          ORR      r0,r0,#1
000020  6120              STR      r0,[r4,#0x10]
;;;358      
;;;359        *(__IO uint16_t*)Address = (uint16_t)Data;
000022  8035              STRH     r5,[r6,#0]
;;;360        
;;;361        /* Wait for last operation to be completed */
;;;362        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;363     
;;;364        if(status == FLASH_COMPLETE)
00002a  2804              CMP      r0,#4
00002c  d106              BNE      |L27.60|
00002e  1cb6              ADDS     r6,r6,#2
;;;365        {
;;;366          /* If the previous operation is completed, proceed to program the new second 
;;;367          half word */
;;;368          tmp = Address + 2;
;;;369    
;;;370          *(__IO uint16_t*) tmp = Data >> 16;
000030  0c28              LSRS     r0,r5,#16
000032  9600              STR      r6,[sp,#0]
000034  8030              STRH     r0,[r6,#0]
;;;371        
;;;372          /* Wait for last operation to be completed */
;;;373          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L27.60|
;;;374            
;;;375          /* Disable the PG Bit */
;;;376          FLASH->CR &= ~FLASH_CR_PG;
;;;377        }
;;;378        else
;;;379        {
;;;380          /* Disable the PG Bit */
;;;381          FLASH->CR &= ~FLASH_CR_PG;
00003c  6921              LDR      r1,[r4,#0x10]
00003e  f0210101          BIC      r1,r1,#1
000042  6121              STR      r1,[r4,#0x10]
                  |L27.68|
;;;382        }
;;;383      }
;;;384       
;;;385      /* Return the Program Status */
;;;386      return status;
;;;387    }
000044  bdf8              POP      {r3-r7,pc}
;;;388    
                          ENDP

000046  0000              DCW      0x0000
                  |L27.72|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;139      */
;;;140    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4a03              LDR      r2,|L28.16|
;;;141    {
;;;142       uint32_t tmpreg = 0;
;;;143      
;;;144      /* Check the parameters */
;;;145      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;146      
;;;147      /* Read the ACR register */
;;;148      tmpreg = FLASH->ACR;  
000002  6811              LDR      r1,[r2,#0]
;;;149      
;;;150      /* Sets the Latency value */
;;;151      tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
000004  f0210103          BIC      r1,r1,#3
;;;152      tmpreg |= FLASH_Latency;
000008  4301              ORRS     r1,r1,r0
;;;153      
;;;154      /* Write the ACR register */
;;;155      FLASH->ACR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;156    }
00000c  4770              BX       lr
;;;157    
                          ENDP

00000e  0000              DCW      0x0000
                  |L28.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;237      */
;;;238    void FLASH_Unlock(void)
000000  4804              LDR      r0,|L29.20|
;;;239    {
;;;240      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6901              LDR      r1,[r0,#0x10]
000004  0609              LSLS     r1,r1,#24
000006  d503              BPL      |L29.16|
;;;241      {
;;;242        /* Authorize the FLASH Registers access */
;;;243        FLASH->KEYR = FLASH_KEY1;
000008  4903              LDR      r1,|L29.24|
00000a  6041              STR      r1,[r0,#4]
;;;244        FLASH->KEYR = FLASH_KEY2;
00000c  4903              LDR      r1,|L29.28|
00000e  6041              STR      r1,[r0,#4]
                  |L29.16|
;;;245      }  
;;;246    }
000010  4770              BX       lr
;;;247    
                          ENDP

000012  0000              DCW      0x0000
                  |L29.20|
                          DCD      0x40022000
                  |L29.24|
                          DCD      0x45670123
                  |L29.28|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;1188     */
;;;1189   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b500              PUSH     {lr}
;;;1190   { 
000002  4603              MOV      r3,r0
;;;1191     FLASH_Status status = FLASH_COMPLETE;
;;;1192      
;;;1193     /* Check for the FLASH Status */
;;;1194     status = FLASH_GetStatus();
000004  f7fffffe          BL       FLASH_GetStatus
;;;1195     
;;;1196     /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
;;;1197     while((status == FLASH_BUSY) && (Timeout != 0x00))
000008  e003              B        |L30.18|
;;;1198     {
;;;1199       status = FLASH_GetStatus();
00000a  bf00              NOP      
                  |L30.12|
00000c  f7fffffe          BL       FLASH_GetStatus
000010  1e5b              SUBS     r3,r3,#1
                  |L30.18|
000012  2801              CMP      r0,#1                 ;1197
000014  d003              BEQ      |L30.30|
;;;1200       Timeout--;
;;;1201     }
;;;1202     
;;;1203     if(Timeout == 0x00 )
000016  2b00              CMP      r3,#0
000018  d100              BNE      |L30.28|
                  |L30.26|
;;;1204     {
;;;1205       status = FLASH_TIMEOUT;
00001a  2005              MOVS     r0,#5
                  |L30.28|
;;;1206     }
;;;1207     /* Return the operation status */
;;;1208     return status;
;;;1209   }
00001c  bd00              POP      {pc}
                  |L30.30|
00001e  2b00              CMP      r3,#0                 ;1197
000020  d1f4              BNE      |L30.12|
000022  e7fa              B        |L30.26|
;;;1210   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F37x_StdPeriph_Driver\\src\\stm32f37x_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f37x_flash_c_a2a150d6____REV16|
#line 138 "D:\\MDK\\install\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f37x_flash_c_a2a150d6____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f37x_flash_c_a2a150d6____REVSH|
#line 153
|__asm___17_stm32f37x_flash_c_a2a150d6____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f37x_flash_c_a2a150d6____RRX|
#line 328
|__asm___17_stm32f37x_flash_c_a2a150d6____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
